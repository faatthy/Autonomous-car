
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000491e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  0000491e  000049b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008001a2  008001a2  00004af4  2**0
                  ALLOC
  3 .stab         000044e8  00000000  00000000  00004af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b84  00000000  00000000  00008fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ab60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ad00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000aef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e683  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fd12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1e 0a 	jmp	0x143c	; 0x143c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 19 	call	0x3382	; 0x3382 <main>
      8a:	0c 94 8d 24 	jmp	0x491a	; 0x491a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 23 	jmp	0x47b4	; 0x47b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 23 	jmp	0x47c4	; 0x47c4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e9       	ldi	r22, 0x99	; 153
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 23 	jmp	0x47cc	; 0x47cc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 06 24 	jmp	0x480c	; 0x480c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e2 23 	jmp	0x47c4	; 0x47c4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fe 23 	jmp	0x47fc	; 0x47fc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ef 55       	subi	r30, 0x5F	; 95
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Pwm1_voidInit>:
#include"../DIO/DIO_int.h"
#include"TIMER1_priv.h"
#include"TIMER1_conf.h"
#include "../../HAL/LCD/LCD_int.h"
#include "util/delay.h"
void Pwm1_voidInit(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

#if PWM1_MODE ==FAST_PWM
	TCCR1A&=~(1<<0);
     e36:	af e4       	ldi	r26, 0x4F	; 79
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e4       	ldi	r30, 0x4F	; 79
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8e 7f       	andi	r24, 0xFE	; 254
     e42:	8c 93       	st	X, r24
	TCCR1A|=(1<<1);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	82 60       	ori	r24, 0x02	; 2
     e50:	8c 93       	st	X, r24
	TCCR1B|=(1<<3);
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
	TCCR1B|=(1<<4);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 61       	ori	r24, 0x10	; 16
     e6c:	8c 93       	st	X, r24
#endif

#if OUTPUT_MODE==NON_INVERTED
	TCCR1A|=(1<<7);
     e6e:	af e4       	ldi	r26, 0x4F	; 79
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ef e4       	ldi	r30, 0x4F	; 79
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	8c 93       	st	X, r24
	TCCR1A&=~(1<<6);
     e7c:	af e4       	ldi	r26, 0x4F	; 79
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e4       	ldi	r30, 0x4F	; 79
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 7b       	andi	r24, 0xBF	; 191
     e88:	8c 93       	st	X, r24
#endif
	DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN5,DIO_u8OUTPUT);
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	65 e0       	ldi	r22, 0x05	; 5
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>


	//CHANNEL 2 INIT
  DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN4,DIO_u8OUTPUT);
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	64 e0       	ldi	r22, 0x04	; 4
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	TCCR1A|=(1<<5);
     e9e:	af e4       	ldi	r26, 0x4F	; 79
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ef e4       	ldi	r30, 0x4F	; 79
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 62       	ori	r24, 0x20	; 32
     eaa:	8c 93       	st	X, r24
	TCCR1A&=~(1<<4);
     eac:	af e4       	ldi	r26, 0x4F	; 79
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7e       	andi	r24, 0xEF	; 239
     eb8:	8c 93       	st	X, r24
    LCD_voidInit();
     eba:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_voidInit>
	return;
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <Pwm1_voidSetFrequency>:

void Pwm1_voidSetFrequency(u16 Copy_u16Frequency){
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <Pwm1_voidSetFrequency+0xa>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Copy_u16Frequency* TIMER1_PRESCALER));
     ed6:	06 e4       	ldi	r16, 0x46	; 70
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	00 24       	eor	r0, r0
     ee0:	96 95       	lsr	r25
     ee2:	87 95       	ror	r24
     ee4:	07 94       	ror	r0
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	07 94       	ror	r0
     eec:	98 2f       	mov	r25, r24
     eee:	80 2d       	mov	r24, r0
     ef0:	9c 01       	movw	r18, r24
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	94 e2       	ldi	r25, 0x24	; 36
     efa:	a4 ef       	ldi	r26, 0xF4	; 244
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 89 23 	call	0x4712	; 0x4712 <__divmodsi4>
     f06:	da 01       	movw	r26, r20
     f08:	c9 01       	movw	r24, r18
     f0a:	f8 01       	movw	r30, r16
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
	LCD_voidWritInteger(ICR1);
     f10:	e6 e4       	ldi	r30, 0x46	; 70
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	0e 94 ad 18 	call	0x315a	; 0x315a <LCD_voidWritInteger>
	return;
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <Pwm1_voidSetOCR1A>:
void Pwm1_voidSetOCR1A(u16 Copy_u16DutyCycle){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <Pwm1_voidSetOCR1A+0x6>
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	9a 83       	std	Y+2, r25	; 0x02
     f36:	89 83       	std	Y+1, r24	; 0x01


	OCR1A = Copy_u16DutyCycle;
     f38:	ea e4       	ldi	r30, 0x4A	; 74
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
	//LCD_voidWritInteger(OCR1A);


		return;
	}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <Pwm1_voidSetOCR1B>:
void Pwm1_voidSetOCR1B(u16 Copy_u16DutyCycle){
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <Pwm1_voidSetOCR1B+0x6>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01


		OCR1B = Copy_u16DutyCycle;
     f5c:	e8 e4       	ldi	r30, 0x48	; 72
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24


		return;
	}
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <Pwm1_voidStart>:


void Pwm1_voidStart(void){
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62

		TCCR1B|=(1<<0);
	#elif TIMER1_PRESCALER==PRESCLNG_8
		TCCR1B|=(1<<1);
	#elif TIMER1_PRESCALER==PRESCLNG_64
		TCCR1B|=(3<<0);
     f7a:	ae e4       	ldi	r26, 0x4E	; 78
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	ee e4       	ldi	r30, 0x4E	; 78
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	83 60       	ori	r24, 0x03	; 3
     f86:	8c 93       	st	X, r24
		TCCR1B|=(7<<0);

	#endif

		return;
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Pwm1_voidStop>:
void Pwm1_voidStop(void){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=~(7<<0);
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	88 7f       	andi	r24, 0xF8	; 248
     fa2:	8c 93       	st	X, r24
	return;
}
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <TIMER0_voidInit>:
static void (*ptr_ovf)(void)=NULL;
static void (*ptr_Ctc)(void)=NULL;

u16 Timer0_Num_OVF = 0;
u8 Timer0_Init_Value = 0;
void TIMER0_voidInit(void){
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62


#if TIMER0_MODE==NORMAL_MODE
	TCCR0=0X00;
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	10 82       	st	Z, r1
	TIMSK|=(1<<0);
     fb8:	a9 e5       	ldi	r26, 0x59	; 89
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e9 e5       	ldi	r30, 0x59	; 89
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	8c 93       	st	X, r24
	TCCR0|=(1<<3);
//	TIMSK|=(1<<1);

#endif
	return ;
}
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <TIMER0_voidStart>:
void TIMER0_voidStart(void){
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62

	TCCR0&=~(7<<0);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	88 7f       	andi	r24, 0xF8	; 248
     fe0:	8c 93       	st	X, r24
#if TIMER0_PRES ==PRES_0
	//do nothing
#elif TIMER0_PRES==PRES_1
	TCCR0|=(1<<0);
     fe2:	a3 e5       	ldi	r26, 0x53	; 83
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e3 e5       	ldi	r30, 0x53	; 83
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	81 60       	ori	r24, 0x01	; 1
     fee:	8c 93       	st	X, r24

#endif
#endif
	return ;

	}
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <TIMER0_voidStop>:
void TIMER0_voidStop(void){
     ff6:	df 93       	push	r29
     ff8:	cf 93       	push	r28
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=~(7<<0);
     ffe:	a3 e5       	ldi	r26, 0x53	; 83
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	88 7f       	andi	r24, 0xF8	; 248
    100a:	8c 93       	st	X, r24
	return;
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <TIMER0_voidDelay>:
void TIMER0_voidDelay(u16 copy_u16millisec){
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	62 97       	sbiw	r28, 0x12	; 18
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	9a 8b       	std	Y+18, r25	; 0x12
    1030:	89 8b       	std	Y+17, r24	; 0x11

	u16 local_u16Num_ov,local_u16TimeInitial;
	double local_doubleTimeMaxDelay,local_doubleTimetick;
	u32 local_u32OverFlowCounnt=0;
    1032:	19 82       	std	Y+1, r1	; 0x01
    1034:	1a 82       	std	Y+2, r1	; 0x02
    1036:	1b 82       	std	Y+3, r1	; 0x03
    1038:	1c 82       	std	Y+4, r1	; 0x04

	local_doubleTimetick = 1024.0/16000.0;   // pres/F_CPU
    103a:	8f e6       	ldi	r24, 0x6F	; 111
    103c:	92 e1       	ldi	r25, 0x12	; 18
    103e:	a3 e8       	ldi	r26, 0x83	; 131
    1040:	bd e3       	ldi	r27, 0x3D	; 61
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	af 83       	std	Y+7, r26	; 0x07
    1048:	b8 87       	std	Y+8, r27	; 0x08

	local_doubleTimeMaxDelay= 256.0*1024.0/16000.0; //ms		Tmaxdelay = Ttick * 2^8
    104a:	8f e6       	ldi	r24, 0x6F	; 111
    104c:	92 e1       	ldi	r25, 0x12	; 18
    104e:	a3 e8       	ldi	r26, 0x83	; 131
    1050:	b1 e4       	ldi	r27, 0x41	; 65
    1052:	89 87       	std	Y+9, r24	; 0x09
    1054:	9a 87       	std	Y+10, r25	; 0x0a
    1056:	ab 87       	std	Y+11, r26	; 0x0b
    1058:	bc 87       	std	Y+12, r27	; 0x0c
	if(copy_u16millisec<local_doubleTimeMaxDelay){
    105a:	89 89       	ldd	r24, Y+17	; 0x11
    105c:	9a 89       	ldd	r25, Y+18	; 0x12
    105e:	cc 01       	movw	r24, r24
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	29 85       	ldd	r18, Y+9	; 0x09
    1076:	3a 85       	ldd	r19, Y+10	; 0x0a
    1078:	4b 85       	ldd	r20, Y+11	; 0x0b
    107a:	5c 85       	ldd	r21, Y+12	; 0x0c
    107c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	54 f5       	brge	.+84     	; 0x10d8 <TIMER0_voidDelay+0xc6>
		local_u16TimeInitial = (local_doubleTimeMaxDelay-copy_u16millisec)/local_doubleTimetick;
    1084:	89 89       	ldd	r24, Y+17	; 0x11
    1086:	9a 89       	ldd	r25, Y+18	; 0x12
    1088:	cc 01       	movw	r24, r24
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	69 85       	ldd	r22, Y+9	; 0x09
    109c:	7a 85       	ldd	r23, Y+10	; 0x0a
    109e:	8b 85       	ldd	r24, Y+11	; 0x0b
    10a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	4f 81       	ldd	r20, Y+7	; 0x07
    10b4:	58 85       	ldd	r21, Y+8	; 0x08
    10b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 87       	std	Y+14, r25	; 0x0e
    10cc:	8d 87       	std	Y+13, r24	; 0x0d
		local_u16Num_ov = 1;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	98 8b       	std	Y+16, r25	; 0x10
    10d4:	8f 87       	std	Y+15, r24	; 0x0f
    10d6:	72 c0       	rjmp	.+228    	; 0x11bc <TIMER0_voidDelay+0x1aa>

	}else if(copy_u16millisec == (int)local_doubleTimeMaxDelay){
    10d8:	69 85       	ldd	r22, Y+9	; 0x09
    10da:	7a 85       	ldd	r23, Y+10	; 0x0a
    10dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    10de:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9c 01       	movw	r18, r24
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	9a 89       	ldd	r25, Y+18	; 0x12
    10ee:	28 17       	cp	r18, r24
    10f0:	39 07       	cpc	r19, r25
    10f2:	39 f4       	brne	.+14     	; 0x1102 <TIMER0_voidDelay+0xf0>
		local_u16TimeInitial=0;
    10f4:	1e 86       	std	Y+14, r1	; 0x0e
    10f6:	1d 86       	std	Y+13, r1	; 0x0d
		local_u16Num_ov=1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	98 8b       	std	Y+16, r25	; 0x10
    10fe:	8f 87       	std	Y+15, r24	; 0x0f
    1100:	5d c0       	rjmp	.+186    	; 0x11bc <TIMER0_voidDelay+0x1aa>
	}else{
		local_u16Num_ov = ceil((double)copy_u16millisec/local_doubleTimeMaxDelay);
    1102:	89 89       	ldd	r24, Y+17	; 0x11
    1104:	9a 89       	ldd	r25, Y+18	; 0x12
    1106:	cc 01       	movw	r24, r24
    1108:	a0 e0       	ldi	r26, 0x00	; 0
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	bc 01       	movw	r22, r24
    110e:	cd 01       	movw	r24, r26
    1110:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	29 85       	ldd	r18, Y+9	; 0x09
    111e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1120:	4b 85       	ldd	r20, Y+11	; 0x0b
    1122:	5c 85       	ldd	r21, Y+12	; 0x0c
    1124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 11 24 	call	0x4822	; 0x4822 <ceil>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	98 8b       	std	Y+16, r25	; 0x10
    1146:	8f 87       	std	Y+15, r24	; 0x0f
		local_u16TimeInitial= (1<<8) - ((double)copy_u16millisec/local_doubleTimetick)/local_u16Num_ov;
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	9a 89       	ldd	r25, Y+18	; 0x12
    114c:	cc 01       	movw	r24, r24
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	bc 01       	movw	r22, r24
    1160:	cd 01       	movw	r24, r26
    1162:	2d 81       	ldd	r18, Y+5	; 0x05
    1164:	3e 81       	ldd	r19, Y+6	; 0x06
    1166:	4f 81       	ldd	r20, Y+7	; 0x07
    1168:	58 85       	ldd	r21, Y+8	; 0x08
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	7c 01       	movw	r14, r24
    1174:	8d 01       	movw	r16, r26
    1176:	8f 85       	ldd	r24, Y+15	; 0x0f
    1178:	98 89       	ldd	r25, Y+16	; 0x10
    117a:	cc 01       	movw	r24, r24
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1188:	9b 01       	movw	r18, r22
    118a:	ac 01       	movw	r20, r24
    118c:	c8 01       	movw	r24, r16
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9c 01       	movw	r18, r24
    119a:	ad 01       	movw	r20, r26
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	93 e4       	ldi	r25, 0x43	; 67
    11a4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9e 87       	std	Y+14, r25	; 0x0e
    11ba:	8d 87       	std	Y+13, r24	; 0x0d

	}
	LCD_voidWritInteger(local_u16Num_ov);
    11bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11be:	98 89       	ldd	r25, Y+16	; 0x10
    11c0:	0e 94 ad 18 	call	0x315a	; 0x315a <LCD_voidWritInteger>
	LCD_voidWritInteger(local_u16TimeInitial);
    11c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11c8:	0e 94 ad 18 	call	0x315a	; 0x315a <LCD_voidWritInteger>
	TCNT0 = local_u16TimeInitial;
    11cc:	e2 e5       	ldi	r30, 0x52	; 82
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	80 83       	st	Z, r24
	TIMER0_voidStart();
    11d4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <TIMER0_voidStart>
    11d8:	1b c0       	rjmp	.+54     	; 0x1210 <TIMER0_voidDelay+0x1fe>

	while(local_u32OverFlowCounnt<local_u16Num_ov){

		while(((TIFR>>0)&1)==0);
    11da:	e8 e5       	ldi	r30, 0x58	; 88
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	81 70       	andi	r24, 0x01	; 1
    11e6:	90 70       	andi	r25, 0x00	; 0
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	b9 f3       	breq	.-18     	; 0x11da <TIMER0_voidDelay+0x1c8>

		TIFR|=(1<<0);
    11ec:	a8 e5       	ldi	r26, 0x58	; 88
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e8 e5       	ldi	r30, 0x58	; 88
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	8c 93       	st	X, r24

		local_u32OverFlowCounnt++;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1200:	bc 81       	ldd	r27, Y+4	; 0x04
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	a1 1d       	adc	r26, r1
    1206:	b1 1d       	adc	r27, r1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	ab 83       	std	Y+3, r26	; 0x03
    120e:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidWritInteger(local_u16Num_ov);
	LCD_voidWritInteger(local_u16TimeInitial);
	TCNT0 = local_u16TimeInitial;
	TIMER0_voidStart();

	while(local_u32OverFlowCounnt<local_u16Num_ov){
    1210:	8f 85       	ldd	r24, Y+15	; 0x0f
    1212:	98 89       	ldd	r25, Y+16	; 0x10
    1214:	9c 01       	movw	r18, r24
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	ab 81       	ldd	r26, Y+3	; 0x03
    1220:	bc 81       	ldd	r27, Y+4	; 0x04
    1222:	82 17       	cp	r24, r18
    1224:	93 07       	cpc	r25, r19
    1226:	a4 07       	cpc	r26, r20
    1228:	b5 07       	cpc	r27, r21
    122a:	b8 f2       	brcs	.-82     	; 0x11da <TIMER0_voidDelay+0x1c8>
		TIFR|=(1<<0);

		local_u32OverFlowCounnt++;
	}

	TCCR0=0x00;
    122c:	e3 e5       	ldi	r30, 0x53	; 83
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	10 82       	st	Z, r1
	return ;
}
    1232:	62 96       	adiw	r28, 0x12	; 18
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	08 95       	ret

0000124c <TIMER0_voidCallBack>:





void TIMER0_voidCallBack(void (*fun)(void)){
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <TIMER0_voidCallBack+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9a 83       	std	Y+2, r25	; 0x02
    1258:	89 83       	std	Y+1, r24	; 0x01

#if TIMER0_MODE==NORMAL_MODE
	ptr_ovf=fun;
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	90 93 a3 01 	sts	0x01A3, r25
    1262:	80 93 a2 01 	sts	0x01A2, r24
#elif TIMER0_MODE==CTC_MODE
	ptr_Ctc=fun;
#endif
	return ;

}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <PWM0_voidInit>:
void PWM0_voidInit(void){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62

#if PWM0_MODE==FAST_PWM_MODE
TCCR0|=(1<<3);
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	88 60       	ori	r24, 0x08	; 8
    1284:	8c 93       	st	X, r24
TCCR0|=(1<<6);
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 64       	ori	r24, 0x40	; 64
    1292:	8c 93       	st	X, r24
#elif PWM0_MODE==PHASE_PWM_MODE
TCCR0|=(1<<6);

#endif
#if OUTPUT_MODE==NON_INVERTED
TCCR0|=(1<<5);
    1294:	a3 e5       	ldi	r26, 0x53	; 83
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e3 e5       	ldi	r30, 0x53	; 83
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 62       	ori	r24, 0x20	; 32
    12a0:	8c 93       	st	X, r24
TCCR0|=(3<<4);

#endif
return;

	}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <PWM0_voidSetDuty>:
void PWM0_voidSetDuty(u8 Copy_u8Duty){
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	0f 92       	push	r0
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Duty < 0)
			Copy_u8Duty = 0;
		else if(Copy_u8Duty > 100)
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	85 36       	cpi	r24, 0x65	; 101
    12b8:	10 f0       	brcs	.+4      	; 0x12be <PWM0_voidSetDuty+0x16>
			Copy_u8Duty = 100;
    12ba:	84 e6       	ldi	r24, 0x64	; 100
    12bc:	89 83       	std	Y+1, r24	; 0x01

			#endif
		#endif

return;
}
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <PWM0_voidStart>:
void PWM0_voidStart(){
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStart();
    12ce:	0e 94 e6 07 	call	0xfcc	; 0xfcc <TIMER0_voidStart>
	return;
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <PWM0_voidStop>:
void PWM0_voidStop(){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStop();
    12e0:	0e 94 fb 07 	call	0xff6	; 0xff6 <TIMER0_voidStop>
	return;
}
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <__vector_10>:
void __vector_10(void)__attribute__((signal));
	void __vector_10 (void)
	{static u32 local_enu32count=0;
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	local_enu32count++;
    1314:	80 91 a9 01 	lds	r24, 0x01A9
    1318:	90 91 aa 01 	lds	r25, 0x01AA
    131c:	a0 91 ab 01 	lds	r26, 0x01AB
    1320:	b0 91 ac 01 	lds	r27, 0x01AC
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	a1 1d       	adc	r26, r1
    1328:	b1 1d       	adc	r27, r1
    132a:	80 93 a9 01 	sts	0x01A9, r24
    132e:	90 93 aa 01 	sts	0x01AA, r25
    1332:	a0 93 ab 01 	sts	0x01AB, r26
    1336:	b0 93 ac 01 	sts	0x01AC, r27

		if (ptr_Ctc != NULL)
    133a:	80 91 a4 01 	lds	r24, 0x01A4
    133e:	90 91 a5 01 	lds	r25, 0x01A5
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	09 f4       	brne	.+2      	; 0x1348 <__vector_10+0x5e>
    1346:	67 c0       	rjmp	.+206    	; 0x1416 <__vector_10+0x12c>
		{

			if(local_enu32count == 1 && Timer0_Num_OVF ==local_enu32count)
    1348:	80 91 a9 01 	lds	r24, 0x01A9
    134c:	90 91 aa 01 	lds	r25, 0x01AA
    1350:	a0 91 ab 01 	lds	r26, 0x01AB
    1354:	b0 91 ac 01 	lds	r27, 0x01AC
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	39 f5       	brne	.+78     	; 0x13b0 <__vector_10+0xc6>
    1362:	80 91 a6 01 	lds	r24, 0x01A6
    1366:	90 91 a7 01 	lds	r25, 0x01A7
    136a:	9c 01       	movw	r18, r24
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	80 91 a9 01 	lds	r24, 0x01A9
    1374:	90 91 aa 01 	lds	r25, 0x01AA
    1378:	a0 91 ab 01 	lds	r26, 0x01AB
    137c:	b0 91 ac 01 	lds	r27, 0x01AC
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	4a 07       	cpc	r20, r26
    1386:	5b 07       	cpc	r21, r27
    1388:	99 f4       	brne	.+38     	; 0x13b0 <__vector_10+0xc6>
				{

					ptr_Ctc();
    138a:	e0 91 a4 01 	lds	r30, 0x01A4
    138e:	f0 91 a5 01 	lds	r31, 0x01A5
    1392:	09 95       	icall

					local_enu32count = 0;
    1394:	10 92 a9 01 	sts	0x01A9, r1
    1398:	10 92 aa 01 	sts	0x01AA, r1
    139c:	10 92 ab 01 	sts	0x01AB, r1
    13a0:	10 92 ac 01 	sts	0x01AC, r1
					OCR0 = Timer0_Init_Value;
    13a4:	ec e5       	ldi	r30, 0x5C	; 92
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 91 a8 01 	lds	r24, 0x01A8
    13ac:	80 83       	st	Z, r24
    13ae:	33 c0       	rjmp	.+102    	; 0x1416 <__vector_10+0x12c>
				}
				else if(local_enu32count== 1)
    13b0:	80 91 a9 01 	lds	r24, 0x01A9
    13b4:	90 91 aa 01 	lds	r25, 0x01AA
    13b8:	a0 91 ab 01 	lds	r26, 0x01AB
    13bc:	b0 91 ac 01 	lds	r27, 0x01AC
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	a1 05       	cpc	r26, r1
    13c6:	b1 05       	cpc	r27, r1
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <__vector_10+0xea>
					OCR0 = 255;
    13ca:	ec e5       	ldi	r30, 0x5C	; 92
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	80 83       	st	Z, r24
    13d2:	21 c0       	rjmp	.+66     	; 0x1416 <__vector_10+0x12c>
				else if(Timer0_Num_OVF == local_enu32count)
    13d4:	80 91 a6 01 	lds	r24, 0x01A6
    13d8:	90 91 a7 01 	lds	r25, 0x01A7
    13dc:	9c 01       	movw	r18, r24
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	80 91 a9 01 	lds	r24, 0x01A9
    13e6:	90 91 aa 01 	lds	r25, 0x01AA
    13ea:	a0 91 ab 01 	lds	r26, 0x01AB
    13ee:	b0 91 ac 01 	lds	r27, 0x01AC
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	4a 07       	cpc	r20, r26
    13f8:	5b 07       	cpc	r21, r27
    13fa:	69 f4       	brne	.+26     	; 0x1416 <__vector_10+0x12c>
				{
					// Write your code here


					local_enu32count= 0;
    13fc:	10 92 a9 01 	sts	0x01A9, r1
    1400:	10 92 aa 01 	sts	0x01AA, r1
    1404:	10 92 ab 01 	sts	0x01AB, r1
    1408:	10 92 ac 01 	sts	0x01AC, r1
					OCR0 = Timer0_Init_Value;
    140c:	ec e5       	ldi	r30, 0x5C	; 92
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 91 a8 01 	lds	r24, 0x01A8
    1414:	80 83       	st	Z, r24
				}
		}
	}
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	0f 90       	pop	r0
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	0f 90       	pop	r0
    1438:	1f 90       	pop	r1
    143a:	18 95       	reti

0000143c <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect){
    143c:	1f 92       	push	r1
    143e:	0f 92       	push	r0
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	0f 92       	push	r0
    1444:	11 24       	eor	r1, r1
    1446:	2f 93       	push	r18
    1448:	3f 93       	push	r19
    144a:	4f 93       	push	r20
    144c:	5f 93       	push	r21
    144e:	6f 93       	push	r22
    1450:	7f 93       	push	r23
    1452:	8f 93       	push	r24
    1454:	9f 93       	push	r25
    1456:	af 93       	push	r26
    1458:	bf 93       	push	r27
    145a:	ef 93       	push	r30
    145c:	ff 93       	push	r31
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
	if(ICU_callBackPtr != NULL)
    1466:	80 91 ad 01 	lds	r24, 0x01AD
    146a:	90 91 ae 01 	lds	r25, 0x01AE
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	29 f0       	breq	.+10     	; 0x147c <__vector_6+0x40>
	{

		ICU_callBackPtr(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1472:	e0 91 ad 01 	lds	r30, 0x01AD
    1476:	f0 91 ae 01 	lds	r31, 0x01AE
    147a:	09 95       	icall
	}
}
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	7f 91       	pop	r23
    148e:	6f 91       	pop	r22
    1490:	5f 91       	pop	r21
    1492:	4f 91       	pop	r20
    1494:	3f 91       	pop	r19
    1496:	2f 91       	pop	r18
    1498:	0f 90       	pop	r0
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	0f 90       	pop	r0
    149e:	1f 90       	pop	r1
    14a0:	18 95       	reti

000014a2 <Icu_voidInit>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_voidInit(const Icu_ConfigType * Config_Ptr)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <Icu_voidInit+0x6>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8INPUT);
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	66 e0       	ldi	r22, 0x06	; 6
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<3) | (1<<2);
    14ba:	ef e4       	ldi	r30, 0x4F	; 79
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8c e0       	ldi	r24, 0x0C	; 12
    14c0:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    14c2:	ae e4       	ldi	r26, 0x4E	; 78
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	98 2f       	mov	r25, r24
    14ce:	98 7f       	andi	r25, 0xF8	; 248
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	80 81       	ld	r24, Z
    14d6:	89 2b       	or	r24, r25
    14d8:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    14da:	ae e4       	ldi	r26, 0x4E	; 78
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ee e4       	ldi	r30, 0x4E	; 78
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	28 2f       	mov	r18, r24
    14e6:	2f 7b       	andi	r18, 0xBF	; 191
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	81 81       	ldd	r24, Z+1	; 0x01
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	00 24       	eor	r0, r0
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	07 94       	ror	r0
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	07 94       	ror	r0
    1500:	98 2f       	mov	r25, r24
    1502:	80 2d       	mov	r24, r0
    1504:	82 2b       	or	r24, r18
    1506:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1508:	ec e4       	ldi	r30, 0x4C	; 76
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	11 82       	std	Z+1, r1	; 0x01
    150e:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1510:	e6 e4       	ldi	r30, 0x46	; 70
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<5);
    1518:	a9 e5       	ldi	r26, 0x59	; 89
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e9 e5       	ldi	r30, 0x59	; 89
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 62       	ori	r24, 0x20	; 32
    1524:	8c 93       	st	X, r24
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <Icu_voidSetCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_voidSetCallBack(void(*a_ptr)(void))
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <Icu_voidSetCallBack+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	ICU_callBackPtr = a_ptr;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	90 93 ae 01 	sts	0x01AE, r25
    1546:	80 93 ad 01 	sts	0x01AD, r24
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <Icu_voidSetEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_voidSetEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1560:	ae e4       	ldi	r26, 0x4E	; 78
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ee e4       	ldi	r30, 0x4E	; 78
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	28 2f       	mov	r18, r24
    156c:	2f 7b       	andi	r18, 0xBF	; 191
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	00 24       	eor	r0, r0
    1576:	96 95       	lsr	r25
    1578:	87 95       	ror	r24
    157a:	07 94       	ror	r0
    157c:	96 95       	lsr	r25
    157e:	87 95       	ror	r24
    1580:	07 94       	ror	r0
    1582:	98 2f       	mov	r25, r24
    1584:	80 2d       	mov	r24, r0
    1586:	82 2b       	or	r24, r18
    1588:	8c 93       	st	X, r24
}
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Icu_u16GetInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Icu_u16GetInputCaptureValue(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	//LCD_voidWritInteger(ICR1);
	return ICR1;
    159a:	e6 e4       	ldi	r30, 0x46	; 70
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01

}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <Icu_voidClearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_voidClearTimerValue(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    15b0:	ec e4       	ldi	r30, 0x4C	; 76
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	10 82       	st	Z, r1
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <Icu_voidDeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_voidDeInit(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    15c6:	ef e4       	ldi	r30, 0x4F	; 79
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	10 82       	st	Z, r1
	TCCR1B = 0;
    15cc:	ee e4       	ldi	r30, 0x4E	; 78
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	10 82       	st	Z, r1
	TCNT1 = 0;
    15d2:	ec e4       	ldi	r30, 0x4C	; 76
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	11 82       	std	Z+1, r1	; 0x01
    15d8:	10 82       	st	Z, r1
	ICR1 = 0;
    15da:	e6 e4       	ldi	r30, 0x46	; 70
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	11 82       	std	Z+1, r1	; 0x01
    15e0:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<5);
    15e2:	a9 e5       	ldi	r26, 0x59	; 89
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e9 e5       	ldi	r30, 0x59	; 89
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 7d       	andi	r24, 0xDF	; 223
    15ee:	8c 93       	st	X, r24
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <GIE_voidEnable>:
 */
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"GIE_conf.h"
#include"GIE_priv.h"
void GIE_voidEnable(void){
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62

	SREG|=(1<<7);
    15fe:	af e5       	ldi	r26, 0x5F	; 95
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ef e5       	ldi	r30, 0x5F	; 95
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 68       	ori	r24, 0x80	; 128
    160a:	8c 93       	st	X, r24
	return ;
}
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	08 95       	ret

00001612 <GIE_voidDisable>:
void GIE_voidDisable(void){
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62

	SREG&=~(1<<7);
    161a:	af e5       	ldi	r26, 0x5F	; 95
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ef e5       	ldi	r30, 0x5F	; 95
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8f 77       	andi	r24, 0x7F	; 127
    1626:	8c 93       	st	X, r24
	return;
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <EXTI_voidInit>:
#include"EXTI_priv.h"
#include"../DIO/DIO_int.h"
static void (*EXTI_pFunISR0Fun)(void) = NULL;
static void (*EXTI_pFunISR1Fun)(void) = NULL;
static void (*EXTI_pFunISR2Fun)(void) = NULL;
void EXTI_voidInit(void){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62

	//INT0
#if EXTI0_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<6);
    1636:	ab e5       	ldi	r26, 0x5B	; 91
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e5       	ldi	r30, 0x5B	; 91
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 64       	ori	r24, 0x40	; 64
    1642:	8c 93       	st	X, r24
#else
#error exti0 configuration is wrong

#endif
	//clear register before intializion
	MCUCR &=~(3<<0);
    1644:	a5 e5       	ldi	r26, 0x55	; 85
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e5 e5       	ldi	r30, 0x55	; 85
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8c 7f       	andi	r24, 0xFC	; 252
    1650:	8c 93       	st	X, r24

#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
    1652:	a5 e5       	ldi	r26, 0x55	; 85
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e5 e5       	ldi	r30, 0x55	; 85
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	8c 93       	st	X, r24
#endif

	//INT1

#if EXTI1_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<7);
    1660:	ab e5       	ldi	r26, 0x5B	; 91
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e5       	ldi	r30, 0x5B	; 91
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 68       	ori	r24, 0x80	; 128
    166c:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<7);
#else
//#error exti0 configuration is wrong
#endif
	//clear register before intializion
	MCUCR &=~(3<<2);
    166e:	a5 e5       	ldi	r26, 0x55	; 85
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e5 e5       	ldi	r30, 0x55	; 85
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	83 7f       	andi	r24, 0xF3	; 243
    167a:	8c 93       	st	X, r24
#if EXTI1_SENSE_LEVEL == LOW_LEVEL

#elif EXTI1_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<2);
#elif EXTI1_SENSE_LEVEL == FALLING
	MCUCR |= (2<<2);
    167c:	a5 e5       	ldi	r26, 0x55	; 85
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e5       	ldi	r30, 0x55	; 85
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	88 60       	ori	r24, 0x08	; 8
    1688:	8c 93       	st	X, r24
#endif


	//INT2
#if EXTI2_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<5);
    168a:	ab e5       	ldi	r26, 0x5B	; 91
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	eb e5       	ldi	r30, 0x5B	; 91
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 62       	ori	r24, 0x20	; 32
    1696:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<5);
#else
//#error exti2 configuration is wrong
#endif
	//clear register before intializion
	MCUCSR&=~(1<<6);
    1698:	a4 e5       	ldi	r26, 0x54	; 84
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e4 e5       	ldi	r30, 0x54	; 84
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7b       	andi	r24, 0xBF	; 191
    16a4:	8c 93       	st	X, r24

#if EXTI2_SENSE_LEVEL==FALLING

#elif EXTI2_SENSE_LEVEL==RISING
	MCUCSR|=(1<<6);
    16a6:	a4 e5       	ldi	r26, 0x54	; 84
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	80 64       	ori	r24, 0x40	; 64
    16b2:	8c 93       	st	X, r24
#else
#error sense level of exti 0 is wrong
#endif
	return ;
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <EXTI_voidSetSenseLevel>:

void EXTI_voidSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel){
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	28 97       	sbiw	r28, 0x08	; 8
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8IntPinNum == INT0)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	88 23       	and	r24, r24
    16d6:	d1 f5       	brne	.+116    	; 0x174c <EXTI_voidSetSenseLevel+0x92>
		{
			MCUCR &=~(3<<0);
    16d8:	a5 e5       	ldi	r26, 0x55	; 85
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e5       	ldi	r30, 0x55	; 85
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8c 7f       	andi	r24, 0xFC	; 252
    16e4:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	38 87       	std	Y+8, r19	; 0x08
    16ee:	2f 83       	std	Y+7, r18	; 0x07
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	82 32       	cpi	r24, 0x22	; 34
    16f6:	91 05       	cpc	r25, r1
    16f8:	89 f0       	breq	.+34     	; 0x171c <EXTI_voidSetSenseLevel+0x62>
    16fa:	2f 81       	ldd	r18, Y+7	; 0x07
    16fc:	38 85       	ldd	r19, Y+8	; 0x08
    16fe:	23 32       	cpi	r18, 0x23	; 35
    1700:	31 05       	cpc	r19, r1
    1702:	34 f4       	brge	.+12     	; 0x1710 <EXTI_voidSetSenseLevel+0x56>
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	98 85       	ldd	r25, Y+8	; 0x08
    1708:	8a 30       	cpi	r24, 0x0A	; 10
    170a:	91 05       	cpc	r25, r1
    170c:	79 f0       	breq	.+30     	; 0x172c <EXTI_voidSetSenseLevel+0x72>
    170e:	7b c0       	rjmp	.+246    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
    1710:	2f 81       	ldd	r18, Y+7	; 0x07
    1712:	38 85       	ldd	r19, Y+8	; 0x08
    1714:	29 34       	cpi	r18, 0x49	; 73
    1716:	31 05       	cpc	r19, r1
    1718:	89 f0       	breq	.+34     	; 0x173c <EXTI_voidSetSenseLevel+0x82>
    171a:	75 c0       	rjmp	.+234    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
			{
			case LOW_LEVEL:

				break;
			case ANY_CHANGE:
				MCUCR |= (1<<0);
    171c:	a5 e5       	ldi	r26, 0x55	; 85
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e5 e5       	ldi	r30, 0x55	; 85
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	81 60       	ori	r24, 0x01	; 1
    1728:	8c 93       	st	X, r24
    172a:	6d c0       	rjmp	.+218    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case FALLING:
				MCUCR |= (2<<0);
    172c:	a5 e5       	ldi	r26, 0x55	; 85
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e5       	ldi	r30, 0x55	; 85
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	82 60       	ori	r24, 0x02	; 2
    1738:	8c 93       	st	X, r24
    173a:	65 c0       	rjmp	.+202    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case RISING:
				MCUCR |= (3<<0);
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	83 60       	ori	r24, 0x03	; 3
    1748:	8c 93       	st	X, r24
    174a:	5d c0       	rjmp	.+186    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
				break;

			}
		}
		else if(Copy_u8IntPinNum == INT1)
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	d1 f5       	brne	.+116    	; 0x17c6 <EXTI_voidSetSenseLevel+0x10c>
		{
           MCUCR&=~(3<<2);
    1752:	a5 e5       	ldi	r26, 0x55	; 85
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e5       	ldi	r30, 0x55	; 85
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	83 7f       	andi	r24, 0xF3	; 243
    175e:	8c 93       	st	X, r24
       	switch(Copy_u8SenseLevel)
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3e 83       	std	Y+6, r19	; 0x06
    1768:	2d 83       	std	Y+5, r18	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	82 32       	cpi	r24, 0x22	; 34
    1770:	91 05       	cpc	r25, r1
    1772:	89 f0       	breq	.+34     	; 0x1796 <EXTI_voidSetSenseLevel+0xdc>
    1774:	2d 81       	ldd	r18, Y+5	; 0x05
    1776:	3e 81       	ldd	r19, Y+6	; 0x06
    1778:	23 32       	cpi	r18, 0x23	; 35
    177a:	31 05       	cpc	r19, r1
    177c:	34 f4       	brge	.+12     	; 0x178a <EXTI_voidSetSenseLevel+0xd0>
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	8a 30       	cpi	r24, 0x0A	; 10
    1784:	91 05       	cpc	r25, r1
    1786:	79 f0       	breq	.+30     	; 0x17a6 <EXTI_voidSetSenseLevel+0xec>
    1788:	3e c0       	rjmp	.+124    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
    178a:	2d 81       	ldd	r18, Y+5	; 0x05
    178c:	3e 81       	ldd	r19, Y+6	; 0x06
    178e:	29 34       	cpi	r18, 0x49	; 73
    1790:	31 05       	cpc	r19, r1
    1792:	89 f0       	breq	.+34     	; 0x17b6 <EXTI_voidSetSenseLevel+0xfc>
    1794:	38 c0       	rjmp	.+112    	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
       			{
       			case LOW_LEVEL:

       				break;
       			case ANY_CHANGE:
       				MCUCR |= (1<<2);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	8c 93       	st	X, r24
    17a4:	30 c0       	rjmp	.+96     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case FALLING:
       				MCUCR |= (2<<2);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	88 60       	ori	r24, 0x08	; 8
    17b2:	8c 93       	st	X, r24
    17b4:	28 c0       	rjmp	.+80     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case RISING:
       				MCUCR |= (3<<2);
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	8c 60       	ori	r24, 0x0C	; 12
    17c2:	8c 93       	st	X, r24
    17c4:	20 c0       	rjmp	.+64     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
       				break;

       			}

		}
		else if(Copy_u8IntPinNum == INT2)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	e9 f4       	brne	.+58     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
		{
        MCUCSR&=~(1<<6);
    17cc:	a4 e5       	ldi	r26, 0x54	; 84
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e4 e5       	ldi	r30, 0x54	; 84
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8f 7b       	andi	r24, 0xBF	; 191
    17d8:	8c 93       	st	X, r24
        switch(Copy_u8SenseLevel){
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3c 83       	std	Y+4, r19	; 0x04
    17e2:	2b 83       	std	Y+3, r18	; 0x03
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	8a 30       	cpi	r24, 0x0A	; 10
    17ea:	91 05       	cpc	r25, r1
    17ec:	61 f0       	breq	.+24     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	29 34       	cpi	r18, 0x49	; 73
    17f4:	31 05       	cpc	r19, r1
    17f6:	39 f4       	brne	.+14     	; 0x1806 <EXTI_voidSetSenseLevel+0x14c>
        case FALLING:
        	break;
        case RISING:
        	MCUCSR|=(1<<6);
    17f8:	a4 e5       	ldi	r26, 0x54	; 84
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e4 e5       	ldi	r30, 0x54	; 84
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 64       	ori	r24, 0x40	; 64
    1804:	8c 93       	st	X, r24

		}}


		return;
	}
    1806:	28 96       	adiw	r28, 0x08	; 8
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <EXTI_voidEnableInterrupt>:


void EXTI_voidEnableInterrupt(u8 Copy_u8IntPinNum){
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <EXTI_voidEnableInterrupt+0x6>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPinNum){
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3b 83       	std	Y+3, r19	; 0x03
    182e:	2a 83       	std	Y+2, r18	; 0x02
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	89 f0       	breq	.+34     	; 0x185c <EXTI_voidEnableInterrupt+0x44>
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	3b 81       	ldd	r19, Y+3	; 0x03
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	a1 f0       	breq	.+40     	; 0x186c <EXTI_voidEnableInterrupt+0x54>
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	9b 81       	ldd	r25, Y+3	; 0x03
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	b9 f4       	brne	.+46     	; 0x187a <EXTI_voidEnableInterrupt+0x62>
	case INT0:
		GICR|=(1<<6);
    184c:	ab e5       	ldi	r26, 0x5B	; 91
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e5       	ldi	r30, 0x5B	; 91
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	8c 93       	st	X, r24
    185a:	0f c0       	rjmp	.+30     	; 0x187a <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT1:
		GICR|=(1<<7	);
    185c:	ab e5       	ldi	r26, 0x5B	; 91
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e5       	ldi	r30, 0x5B	; 91
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8c 93       	st	X, r24
    186a:	07 c0       	rjmp	.+14     	; 0x187a <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT2:
		GICR|=(1<<5);
    186c:	ab e5       	ldi	r26, 0x5B	; 91
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	eb e5       	ldi	r30, 0x5B	; 91
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 62       	ori	r24, 0x20	; 32
    1878:	8c 93       	st	X, r24
		break;

}
return;
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <EXTI_voidsDisableInterrupt>:
void EXTI_voidsDisableInterrupt(u8 Copy_u8IntPinNum){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <EXTI_voidsDisableInterrupt+0x6>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8IntPinNum){
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	3b 83       	std	Y+3, r19	; 0x03
    189c:	2a 83       	std	Y+2, r18	; 0x02
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	91 05       	cpc	r25, r1
    18a6:	89 f0       	breq	.+34     	; 0x18ca <EXTI_voidsDisableInterrupt+0x44>
    18a8:	2a 81       	ldd	r18, Y+2	; 0x02
    18aa:	3b 81       	ldd	r19, Y+3	; 0x03
    18ac:	22 30       	cpi	r18, 0x02	; 2
    18ae:	31 05       	cpc	r19, r1
    18b0:	a1 f0       	breq	.+40     	; 0x18da <EXTI_voidsDisableInterrupt+0x54>
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	b9 f4       	brne	.+46     	; 0x18e8 <EXTI_voidsDisableInterrupt+0x62>
		case INT0:
			GICR&=~(1<<6);
    18ba:	ab e5       	ldi	r26, 0x5B	; 91
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e5       	ldi	r30, 0x5B	; 91
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7b       	andi	r24, 0xBF	; 191
    18c6:	8c 93       	st	X, r24
    18c8:	0f c0       	rjmp	.+30     	; 0x18e8 <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT1:
			GICR&=~(1<<7	);
    18ca:	ab e5       	ldi	r26, 0x5B	; 91
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e5       	ldi	r30, 0x5B	; 91
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 77       	andi	r24, 0x7F	; 127
    18d6:	8c 93       	st	X, r24
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT2:
			GICR&=~(1<<5);
    18da:	ab e5       	ldi	r26, 0x5B	; 91
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	eb e5       	ldi	r30, 0x5B	; 91
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7d       	andi	r24, 0xDF	; 223
    18e6:	8c 93       	st	X, r24
			break;

}
		return;
}
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <EXTI_voidCallBack>:

void EXTI_voidCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum){
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <EXTI_voidCallBack+0x6>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <EXTI_voidCallBack+0x8>
    18fc:	0f 92       	push	r0
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_pFunAppFun != NULL)
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	39 f1       	breq	.+78     	; 0x195e <EXTI_voidCallBack+0x6a>
		{
			switch(Copy_u8IntPinNum){
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	3d 83       	std	Y+5, r19	; 0x05
    1918:	2c 83       	std	Y+4, r18	; 0x04
    191a:	8c 81       	ldd	r24, Y+4	; 0x04
    191c:	9d 81       	ldd	r25, Y+5	; 0x05
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 05       	cpc	r25, r1
    1922:	81 f0       	breq	.+32     	; 0x1944 <EXTI_voidCallBack+0x50>
    1924:	2c 81       	ldd	r18, Y+4	; 0x04
    1926:	3d 81       	ldd	r19, Y+5	; 0x05
    1928:	22 30       	cpi	r18, 0x02	; 2
    192a:	31 05       	cpc	r19, r1
    192c:	91 f0       	breq	.+36     	; 0x1952 <EXTI_voidCallBack+0x5e>
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	a1 f4       	brne	.+40     	; 0x195e <EXTI_voidCallBack+0x6a>
			case INT0:
				EXTI_pFunISR0Fun=Copy_pFunAppFun;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	90 93 b0 01 	sts	0x01B0, r25
    193e:	80 93 af 01 	sts	0x01AF, r24
    1942:	0d c0       	rjmp	.+26     	; 0x195e <EXTI_voidCallBack+0x6a>
				break;
			case INT1:
				EXTI_pFunISR1Fun=Copy_pFunAppFun;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	90 93 b2 01 	sts	0x01B2, r25
    194c:	80 93 b1 01 	sts	0x01B1, r24
    1950:	06 c0       	rjmp	.+12     	; 0x195e <EXTI_voidCallBack+0x6a>
				break;
			case INT2:
				EXTI_pFunISR2Fun=Copy_pFunAppFun;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	90 93 b4 01 	sts	0x01B4, r25
    195a:	80 93 b3 01 	sts	0x01B3, r24
				break;

			}
		}
		return;
	}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <DIO_voidSetPinDirection>:
#include"DIO_priv.h"
#include"DIO_conf.h"



void DIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <DIO_voidSetPinDirection+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <DIO_voidSetPinDirection+0x8>
    1976:	0f 92       	push	r0
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	6a 83       	std	Y+2, r22	; 0x02
    1980:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	08 f0       	brcs	.+2      	; 0x198a <DIO_voidSetPinDirection+0x1c>
    1988:	ce c0       	rjmp	.+412    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	88 30       	cpi	r24, 0x08	; 8
    198e:	08 f0       	brcs	.+2      	; 0x1992 <DIO_voidSetPinDirection+0x24>
    1990:	ca c0       	rjmp	.+404    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	08 f0       	brcs	.+2      	; 0x199a <DIO_voidSetPinDirection+0x2c>
    1998:	c6 c0       	rjmp	.+396    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
		switch(Copy_u8GroupID){
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3d 83       	std	Y+5, r19	; 0x05
    19a2:	2c 83       	std	Y+4, r18	; 0x04
    19a4:	6c 81       	ldd	r22, Y+4	; 0x04
    19a6:	7d 81       	ldd	r23, Y+5	; 0x05
    19a8:	61 30       	cpi	r22, 0x01	; 1
    19aa:	71 05       	cpc	r23, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <DIO_voidSetPinDirection+0x42>
    19ae:	41 c0       	rjmp	.+130    	; 0x1a32 <DIO_voidSetPinDirection+0xc4>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	82 30       	cpi	r24, 0x02	; 2
    19b6:	91 05       	cpc	r25, r1
    19b8:	34 f4       	brge	.+12     	; 0x19c6 <DIO_voidSetPinDirection+0x58>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	71 f0       	breq	.+28     	; 0x19e0 <DIO_voidSetPinDirection+0x72>
    19c4:	b0 c0       	rjmp	.+352    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
    19c6:	6c 81       	ldd	r22, Y+4	; 0x04
    19c8:	7d 81       	ldd	r23, Y+5	; 0x05
    19ca:	62 30       	cpi	r22, 0x02	; 2
    19cc:	71 05       	cpc	r23, r1
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <DIO_voidSetPinDirection+0x64>
    19d0:	59 c0       	rjmp	.+178    	; 0x1a84 <DIO_voidSetPinDirection+0x116>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <DIO_voidSetPinDirection+0x70>
    19dc:	7c c0       	rjmp	.+248    	; 0x1ad6 <DIO_voidSetPinDirection+0x168>
    19de:	a3 c0       	rjmp	.+326    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    19e0:	aa e3       	ldi	r26, 0x3A	; 58
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	ea e3       	ldi	r30, 0x3A	; 58
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_voidSetPinDirection+0x8e>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	2a 95       	dec	r18
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <DIO_voidSetPinDirection+0x8a>
    1a00:	80 95       	com	r24
    1a02:	84 23       	and	r24, r20
    1a04:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
    1a06:	aa e3       	ldi	r26, 0x3A	; 58
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ea e3       	ldi	r30, 0x3A	; 58
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	48 2f       	mov	r20, r24
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	28 2f       	mov	r18, r24
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	b9 01       	movw	r22, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_voidSetPinDirection+0xb8>
    1a22:	66 0f       	add	r22, r22
    1a24:	77 1f       	adc	r23, r23
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_voidSetPinDirection+0xb4>
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	7a c0       	rjmp	.+244    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1a32:	a7 e3       	ldi	r26, 0x37	; 55
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e7 e3       	ldi	r30, 0x37	; 55
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_voidSetPinDirection+0xe0>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	2a 95       	dec	r18
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_voidSetPinDirection+0xdc>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
    1a58:	a7 e3       	ldi	r26, 0x37	; 55
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e7 e3       	ldi	r30, 0x37	; 55
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	b9 01       	movw	r22, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <DIO_voidSetPinDirection+0x10a>
    1a74:	66 0f       	add	r22, r22
    1a76:	77 1f       	adc	r23, r23
    1a78:	8a 95       	dec	r24
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <DIO_voidSetPinDirection+0x106>
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	84 2b       	or	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	51 c0       	rjmp	.+162    	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1a84:	a4 e3       	ldi	r26, 0x34	; 52
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e4 e3       	ldi	r30, 0x34	; 52
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_voidSetPinDirection+0x132>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	2a 95       	dec	r18
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <DIO_voidSetPinDirection+0x12e>
    1aa4:	80 95       	com	r24
    1aa6:	84 23       	and	r24, r20
    1aa8:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
    1aaa:	a4 e3       	ldi	r26, 0x34	; 52
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e4 e3       	ldi	r30, 0x34	; 52
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	48 2f       	mov	r20, r24
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	88 2f       	mov	r24, r24
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	b9 01       	movw	r22, r18
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_voidSetPinDirection+0x15c>
    1ac6:	66 0f       	add	r22, r22
    1ac8:	77 1f       	adc	r23, r23
    1aca:	8a 95       	dec	r24
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <DIO_voidSetPinDirection+0x158>
    1ace:	cb 01       	movw	r24, r22
    1ad0:	84 2b       	or	r24, r20
    1ad2:	8c 93       	st	X, r24
    1ad4:	28 c0       	rjmp	.+80     	; 0x1b26 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1ad6:	a1 e3       	ldi	r26, 0x31	; 49
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e1 e3       	ldi	r30, 0x31	; 49
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_voidSetPinDirection+0x184>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	2a 95       	dec	r18
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_voidSetPinDirection+0x180>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
    1afc:	a1 e3       	ldi	r26, 0x31	; 49
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e1 e3       	ldi	r30, 0x31	; 49
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	48 2f       	mov	r20, r24
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	88 2f       	mov	r24, r24
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	b9 01       	movw	r22, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <DIO_voidSetPinDirection+0x1ae>
    1b18:	66 0f       	add	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	8a 95       	dec	r24
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <DIO_voidSetPinDirection+0x1aa>
    1b20:	cb 01       	movw	r24, r22
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
		}

	}

	return ;
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <DIO_voidSetPinValue+0x6>
    1b3c:	00 d0       	rcall	.+0      	; 0x1b3e <DIO_voidSetPinValue+0x8>
    1b3e:	0f 92       	push	r0
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    1b48:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	84 30       	cpi	r24, 0x04	; 4
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <DIO_voidSetPinValue+0x1c>
    1b50:	ca c0       	rjmp	.+404    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	88 30       	cpi	r24, 0x08	; 8
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <DIO_voidSetPinValue+0x24>
    1b58:	c6 c0       	rjmp	.+396    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
		switch(Copy_u8GroupID){
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3d 83       	std	Y+5, r19	; 0x05
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	6c 81       	ldd	r22, Y+4	; 0x04
    1b66:	7d 81       	ldd	r23, Y+5	; 0x05
    1b68:	61 30       	cpi	r22, 0x01	; 1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <DIO_voidSetPinValue+0x3a>
    1b6e:	41 c0       	rjmp	.+130    	; 0x1bf2 <DIO_voidSetPinValue+0xbc>
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	91 05       	cpc	r25, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <DIO_voidSetPinValue+0x50>
    1b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7e:	21 15       	cp	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <DIO_voidSetPinValue+0x6a>
    1b84:	b0 c0       	rjmp	.+352    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
    1b86:	6c 81       	ldd	r22, Y+4	; 0x04
    1b88:	7d 81       	ldd	r23, Y+5	; 0x05
    1b8a:	62 30       	cpi	r22, 0x02	; 2
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <DIO_voidSetPinValue+0x5c>
    1b90:	59 c0       	rjmp	.+178    	; 0x1c44 <DIO_voidSetPinValue+0x10e>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <DIO_voidSetPinValue+0x68>
    1b9c:	7c c0       	rjmp	.+248    	; 0x1c96 <DIO_voidSetPinValue+0x160>
    1b9e:	a3 c0       	rjmp	.+326    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1ba0:	ab e3       	ldi	r26, 0x3B	; 59
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	eb e3       	ldi	r30, 0x3B	; 59
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_voidSetPinValue+0x86>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_voidSetPinValue+0x82>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1bc6:	ab e3       	ldi	r26, 0x3B	; 59
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	eb e3       	ldi	r30, 0x3B	; 59
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	b9 01       	movw	r22, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_voidSetPinValue+0xb0>
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	8a 95       	dec	r24
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_voidSetPinValue+0xac>
    1bea:	cb 01       	movw	r24, r22
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	7a c0       	rjmp	.+244    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1bf2:	a8 e3       	ldi	r26, 0x38	; 56
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e8 e3       	ldi	r30, 0x38	; 56
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_voidSetPinValue+0xd8>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	2a 95       	dec	r18
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_voidSetPinValue+0xd4>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	b9 01       	movw	r22, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_voidSetPinValue+0x102>
    1c34:	66 0f       	add	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_voidSetPinValue+0xfe>
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	51 c0       	rjmp	.+162    	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c44:	a5 e3       	ldi	r26, 0x35	; 53
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e5 e3       	ldi	r30, 0x35	; 53
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_voidSetPinValue+0x12a>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	2a 95       	dec	r18
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_voidSetPinValue+0x126>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1c6a:	a5 e3       	ldi	r26, 0x35	; 53
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e5 e3       	ldi	r30, 0x35	; 53
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b9 01       	movw	r22, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_voidSetPinValue+0x154>
    1c86:	66 0f       	add	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_voidSetPinValue+0x150>
    1c8e:	cb 01       	movw	r24, r22
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	28 c0       	rjmp	.+80     	; 0x1ce6 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c96:	a2 e3       	ldi	r26, 0x32	; 50
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e2 e3       	ldi	r30, 0x32	; 50
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_voidSetPinValue+0x17c>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	2a 95       	dec	r18
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_voidSetPinValue+0x178>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1cbc:	a2 e3       	ldi	r26, 0x32	; 50
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_voidSetPinValue+0x1a6>
    1cd8:	66 0f       	add	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_voidSetPinValue+0x1a2>
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
			break;
		}
	}

	return ;
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <DIO_voidTogglePinValue+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <DIO_voidTogglePinValue+0x8>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	84 30       	cpi	r24, 0x04	; 4
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <DIO_voidTogglePinValue+0x18>
    1d0c:	72 c0       	rjmp	.+228    	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	88 30       	cpi	r24, 0x08	; 8
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <DIO_voidTogglePinValue+0x20>
    1d14:	6e c0       	rjmp	.+220    	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
		switch(Copy_u8GroupID){
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	3c 83       	std	Y+4, r19	; 0x04
    1d1e:	2b 83       	std	Y+3, r18	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	91 05       	cpc	r25, r1
    1d28:	49 f1       	breq	.+82     	; 0x1d7c <DIO_voidTogglePinValue+0x86>
    1d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2e:	22 30       	cpi	r18, 0x02	; 2
    1d30:	31 05       	cpc	r19, r1
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <DIO_voidTogglePinValue+0x48>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <DIO_voidTogglePinValue+0x5e>
    1d3c:	5a c0       	rjmp	.+180    	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	71 f1       	breq	.+92     	; 0x1da4 <DIO_voidTogglePinValue+0xae>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	91 05       	cpc	r25, r1
    1d50:	e9 f1       	breq	.+122    	; 0x1dcc <DIO_voidTogglePinValue+0xd6>
    1d52:	4f c0       	rjmp	.+158    	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_voidTogglePinValue+0x7c>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_voidTogglePinValue+0x78>
    1d76:	84 27       	eor	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	3b c0       	rjmp	.+118    	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_voidTogglePinValue+0xa4>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_voidTogglePinValue+0xa0>
    1d9e:	84 27       	eor	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	27 c0       	rjmp	.+78     	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1da4:	a5 e3       	ldi	r26, 0x35	; 53
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e5 e3       	ldi	r30, 0x35	; 53
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_voidTogglePinValue+0xcc>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_voidTogglePinValue+0xc8>
    1dc6:	84 27       	eor	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	13 c0       	rjmp	.+38     	; 0x1df2 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1dcc:	a2 e3       	ldi	r26, 0x32	; 50
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e2 e3       	ldi	r30, 0x32	; 50
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	02 2e       	mov	r0, r18
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <DIO_voidTogglePinValue+0xf4>
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <DIO_voidTogglePinValue+0xf0>
    1dee:	84 27       	eor	r24, r20
    1df0:	8c 93       	st	X, r24

		}
	}

	return ;
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <DIO_voidGetPinValue+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <DIO_voidGetPinValue+0x8>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <DIO_voidGetPinValue+0xa>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
    1e12:	5c 83       	std	Y+4, r21	; 0x04
    1e14:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	84 30       	cpi	r24, 0x04	; 4
    1e1a:	08 f0       	brcs	.+2      	; 0x1e1e <DIO_voidGetPinValue+0x1e>
    1e1c:	74 c0       	rjmp	.+232    	; 0x1f06 <DIO_voidGetPinValue+0x106>
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <DIO_voidGetPinValue+0x26>
    1e24:	70 c0       	rjmp	.+224    	; 0x1f06 <DIO_voidGetPinValue+0x106>
		switch (Copy_u8GroupID){
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	3e 83       	std	Y+6, r19	; 0x06
    1e2e:	2d 83       	std	Y+5, r18	; 0x05
    1e30:	4d 81       	ldd	r20, Y+5	; 0x05
    1e32:	5e 81       	ldd	r21, Y+6	; 0x06
    1e34:	41 30       	cpi	r20, 0x01	; 1
    1e36:	51 05       	cpc	r21, r1
    1e38:	59 f1       	breq	.+86     	; 0x1e90 <DIO_voidGetPinValue+0x90>
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	34 f4       	brge	.+12     	; 0x1e50 <DIO_voidGetPinValue+0x50>
    1e44:	2d 81       	ldd	r18, Y+5	; 0x05
    1e46:	3e 81       	ldd	r19, Y+6	; 0x06
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	69 f0       	breq	.+26     	; 0x1e68 <DIO_voidGetPinValue+0x68>
    1e4e:	5b c0       	rjmp	.+182    	; 0x1f06 <DIO_voidGetPinValue+0x106>
    1e50:	4d 81       	ldd	r20, Y+5	; 0x05
    1e52:	5e 81       	ldd	r21, Y+6	; 0x06
    1e54:	42 30       	cpi	r20, 0x02	; 2
    1e56:	51 05       	cpc	r21, r1
    1e58:	79 f1       	breq	.+94     	; 0x1eb8 <DIO_voidGetPinValue+0xb8>
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	83 30       	cpi	r24, 0x03	; 3
    1e60:	91 05       	cpc	r25, r1
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <DIO_voidGetPinValue+0x66>
    1e64:	3d c0       	rjmp	.+122    	; 0x1ee0 <DIO_voidGetPinValue+0xe0>
    1e66:	4f c0       	rjmp	.+158    	; 0x1f06 <DIO_voidGetPinValue+0x106>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1e68:	e9 e3       	ldi	r30, 0x39	; 57
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_voidGetPinValue+0x80>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_voidGetPinValue+0x7c>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	eb 81       	ldd	r30, Y+3	; 0x03
    1e8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e8c:	80 83       	st	Z, r24
    1e8e:	3b c0       	rjmp	.+118    	; 0x1f06 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1e90:	e6 e3       	ldi	r30, 0x36	; 54
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DIO_voidGetPinValue+0xa8>
    1ea4:	55 95       	asr	r21
    1ea6:	47 95       	ror	r20
    1ea8:	8a 95       	dec	r24
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <DIO_voidGetPinValue+0xa4>
    1eac:	ca 01       	movw	r24, r20
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb4:	80 83       	st	Z, r24
    1eb6:	27 c0       	rjmp	.+78     	; 0x1f06 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1eb8:	e3 e3       	ldi	r30, 0x33	; 51
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_voidGetPinValue+0xd0>
    1ecc:	55 95       	asr	r21
    1ece:	47 95       	ror	r20
    1ed0:	8a 95       	dec	r24
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_voidGetPinValue+0xcc>
    1ed4:	ca 01       	movw	r24, r20
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	80 83       	st	Z, r24
    1ede:	13 c0       	rjmp	.+38     	; 0x1f06 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1ee0:	e0 e3       	ldi	r30, 0x30	; 48
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a9 01       	movw	r20, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <DIO_voidGetPinValue+0xf8>
    1ef4:	55 95       	asr	r21
    1ef6:	47 95       	ror	r20
    1ef8:	8a 95       	dec	r24
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <DIO_voidGetPinValue+0xf4>
    1efc:	ca 01       	movw	r24, r20
    1efe:	81 70       	andi	r24, 0x01	; 1
    1f00:	eb 81       	ldd	r30, Y+3	; 0x03
    1f02:	fc 81       	ldd	r31, Y+4	; 0x04
    1f04:	80 83       	st	Z, r24

		}
	}

	return;
}
    1f06:	26 96       	adiw	r28, 0x06	; 6
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <DIO_u8GetValue>:
u8 DIO_u8GetValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <DIO_u8GetValue+0x6>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <DIO_u8GetValue+0x8>
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	8a 83       	std	Y+2, r24	; 0x02
    1f28:	6b 83       	std	Y+3, r22	; 0x03
	u8 value=0;
    1f2a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <DIO_u8GetValue+0x1c>
    1f32:	6b c0       	rjmp	.+214    	; 0x200a <DIO_u8GetValue+0xf2>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 30       	cpi	r24, 0x08	; 8
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <DIO_u8GetValue+0x24>
    1f3a:	67 c0       	rjmp	.+206    	; 0x200a <DIO_u8GetValue+0xf2>
			switch (Copy_u8GroupID){
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3d 83       	std	Y+5, r19	; 0x05
    1f44:	2c 83       	std	Y+4, r18	; 0x04
    1f46:	4c 81       	ldd	r20, Y+4	; 0x04
    1f48:	5d 81       	ldd	r21, Y+5	; 0x05
    1f4a:	41 30       	cpi	r20, 0x01	; 1
    1f4c:	51 05       	cpc	r21, r1
    1f4e:	41 f1       	breq	.+80     	; 0x1fa0 <DIO_u8GetValue+0x88>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	82 30       	cpi	r24, 0x02	; 2
    1f56:	91 05       	cpc	r25, r1
    1f58:	34 f4       	brge	.+12     	; 0x1f66 <DIO_u8GetValue+0x4e>
    1f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5e:	21 15       	cp	r18, r1
    1f60:	31 05       	cpc	r19, r1
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <DIO_u8GetValue+0x64>
    1f64:	52 c0       	rjmp	.+164    	; 0x200a <DIO_u8GetValue+0xf2>
    1f66:	4c 81       	ldd	r20, Y+4	; 0x04
    1f68:	5d 81       	ldd	r21, Y+5	; 0x05
    1f6a:	42 30       	cpi	r20, 0x02	; 2
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	51 f1       	breq	.+84     	; 0x1fc4 <DIO_u8GetValue+0xac>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	83 30       	cpi	r24, 0x03	; 3
    1f76:	91 05       	cpc	r25, r1
    1f78:	b9 f1       	breq	.+110    	; 0x1fe8 <DIO_u8GetValue+0xd0>
    1f7a:	47 c0       	rjmp	.+142    	; 0x200a <DIO_u8GetValue+0xf2>
			case DIO_u8GROUP_A:
				value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1f7c:	e9 e3       	ldi	r30, 0x39	; 57
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a9 01       	movw	r20, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <DIO_u8GetValue+0x7c>
    1f90:	55 95       	asr	r21
    1f92:	47 95       	ror	r20
    1f94:	8a 95       	dec	r24
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <DIO_u8GetValue+0x78>
    1f98:	ca 01       	movw	r24, r20
    1f9a:	81 70       	andi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	35 c0       	rjmp	.+106    	; 0x200a <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_B:
				value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1fa0:	e6 e3       	ldi	r30, 0x36	; 54
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a9 01       	movw	r20, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_u8GetValue+0xa0>
    1fb4:	55 95       	asr	r21
    1fb6:	47 95       	ror	r20
    1fb8:	8a 95       	dec	r24
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <DIO_u8GetValue+0x9c>
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	23 c0       	rjmp	.+70     	; 0x200a <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_C:
				value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1fc4:	e3 e3       	ldi	r30, 0x33	; 51
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 2f       	mov	r24, r24
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <DIO_u8GetValue+0xc4>
    1fd8:	55 95       	asr	r21
    1fda:	47 95       	ror	r20
    1fdc:	8a 95       	dec	r24
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <DIO_u8GetValue+0xc0>
    1fe0:	ca 01       	movw	r24, r20
    1fe2:	81 70       	andi	r24, 0x01	; 1
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	11 c0       	rjmp	.+34     	; 0x200a <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_D:
				value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1fe8:	e0 e3       	ldi	r30, 0x30	; 48
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a9 01       	movw	r20, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_u8GetValue+0xe8>
    1ffc:	55 95       	asr	r21
    1ffe:	47 95       	ror	r20
    2000:	8a 95       	dec	r24
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <DIO_u8GetValue+0xe4>
    2004:	ca 01       	movw	r24, r20
    2006:	81 70       	andi	r24, 0x01	; 1
    2008:	89 83       	std	Y+1, r24	; 0x01
				break;

			}

}
	return value;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
}
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <ULTRASONIC_SENSOR_voidEdgeProcessing>:

u8 Edge_Count = 0;
u16 Time_High = 0;
u16 distance=0;

void ULTRASONIC_SENSOR_voidEdgeProcessing(void){
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62

	Edge_Count++;
    2024:	80 91 b5 01 	lds	r24, 0x01B5
    2028:	8f 5f       	subi	r24, 0xFF	; 255
    202a:	80 93 b5 01 	sts	0x01B5, r24
		if(Edge_Count == 1)
    202e:	80 91 b5 01 	lds	r24, 0x01B5
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	31 f4       	brne	.+12     	; 0x2042 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x26>
		{

			Icu_voidClearTimerValue();
    2036:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(FALLING_EDGE);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <Icu_voidSetEdgeDetectionType>
    2040:	11 c0       	rjmp	.+34     	; 0x2064 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		}

		else if(Edge_Count == 2)
    2042:	80 91 b5 01 	lds	r24, 0x01B5
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	69 f4       	brne	.+26     	; 0x2064 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		{

			Time_High = Icu_u16GetInputCaptureValue();
    204a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <Icu_u16GetInputCaptureValue>
    204e:	90 93 b7 01 	sts	0x01B7, r25
    2052:	80 93 b6 01 	sts	0x01B6, r24


			Edge_Count =0;
    2056:	10 92 b5 01 	sts	0x01B5, r1
			Icu_voidClearTimerValue();
    205a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(RISING_EDGE);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	0e 94 aa 0a 	call	0x1554	; 0x1554 <Icu_voidSetEdgeDetectionType>
		}

}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <ULTRASONIC_SENSOR_voidInit>:


void ULTRASONIC_SENSOR_voidInit(void){
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <ULTRASONIC_SENSOR_voidInit+0x6>
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62

		Icu_ConfigType Icu_Config = {F_8,RISING_EDGE};
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	8a 83       	std	Y+2, r24	; 0x02


	Icu_voidSetCallBack(ULTRASONIC_SENSOR_voidEdgeProcessing);
    207c:	8e e0       	ldi	r24, 0x0E	; 14
    207e:	90 e1       	ldi	r25, 0x10	; 16
    2080:	0e 94 98 0a 	call	0x1530	; 0x1530 <Icu_voidSetCallBack>


		Icu_voidInit(&Icu_Config);
    2084:	ce 01       	movw	r24, r28
    2086:	01 96       	adiw	r24, 0x01	; 1
    2088:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <Icu_voidInit>


		DIO_voidSetPinDirection(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8OUTPUT);
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
}
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <ULTRASONIC_SENSOR_voidTrigger>:
void ULTRASONIC_SENSOR_voidTrigger(void){
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	68 97       	sbiw	r28, 0x18	; 24
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8HIGH);
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e2       	ldi	r26, 0x20	; 32
    20c4:	b1 e4       	ldi	r27, 0x41	; 65
    20c6:	8d 8b       	std	Y+21, r24	; 0x15
    20c8:	9e 8b       	std	Y+22, r25	; 0x16
    20ca:	af 8b       	std	Y+23, r26	; 0x17
    20cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	2b ea       	ldi	r18, 0xAB	; 171
    20d8:	3a ea       	ldi	r19, 0xAA	; 170
    20da:	4a ea       	ldi	r20, 0xAA	; 170
    20dc:	50 e4       	ldi	r21, 0x40	; 64
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	89 8b       	std	Y+17, r24	; 0x11
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	ab 8b       	std	Y+19, r26	; 0x13
    20ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20ee:	69 89       	ldd	r22, Y+17	; 0x11
    20f0:	7a 89       	ldd	r23, Y+18	; 0x12
    20f2:	8b 89       	ldd	r24, Y+19	; 0x13
    20f4:	9c 89       	ldd	r25, Y+20	; 0x14
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	1c f4       	brge	.+6      	; 0x210c <ULTRASONIC_SENSOR_voidTrigger+0x6c>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	88 8b       	std	Y+16, r24	; 0x10
    210a:	91 c0       	rjmp	.+290    	; 0x222e <ULTRASONIC_SENSOR_voidTrigger+0x18e>
	else if (__tmp > 255)
    210c:	69 89       	ldd	r22, Y+17	; 0x11
    210e:	7a 89       	ldd	r23, Y+18	; 0x12
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	53 e4       	ldi	r21, 0x43	; 67
    211c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	0c f0       	brlt	.+2      	; 0x2126 <ULTRASONIC_SENSOR_voidTrigger+0x86>
    2124:	7b c0       	rjmp	.+246    	; 0x221c <ULTRASONIC_SENSOR_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a e7       	ldi	r20, 0x7A	; 122
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8c 87       	std	Y+12, r24	; 0x0c
    2140:	9d 87       	std	Y+13, r25	; 0x0d
    2142:	ae 87       	std	Y+14, r26	; 0x0e
    2144:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	6c 85       	ldd	r22, Y+12	; 0x0c
    2148:	7d 85       	ldd	r23, Y+13	; 0x0d
    214a:	8e 85       	ldd	r24, Y+14	; 0x0e
    214c:	9f 85       	ldd	r25, Y+15	; 0x0f
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	4a e7       	ldi	r20, 0x7A	; 122
    2154:	55 e4       	ldi	r21, 0x45	; 69
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	88 87       	std	Y+8, r24	; 0x08
    2160:	99 87       	std	Y+9, r25	; 0x09
    2162:	aa 87       	std	Y+10, r26	; 0x0a
    2164:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2166:	68 85       	ldd	r22, Y+8	; 0x08
    2168:	79 85       	ldd	r23, Y+9	; 0x09
    216a:	8a 85       	ldd	r24, Y+10	; 0x0a
    216c:	9b 85       	ldd	r25, Y+11	; 0x0b
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e8       	ldi	r20, 0x80	; 128
    2174:	5f e3       	ldi	r21, 0x3F	; 63
    2176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    217a:	88 23       	and	r24, r24
    217c:	2c f4       	brge	.+10     	; 0x2188 <ULTRASONIC_SENSOR_voidTrigger+0xe8>
		__ticks = 1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9f 83       	std	Y+7, r25	; 0x07
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	3f c0       	rjmp	.+126    	; 0x2206 <ULTRASONIC_SENSOR_voidTrigger+0x166>
	else if (__tmp > 65535)
    2188:	68 85       	ldd	r22, Y+8	; 0x08
    218a:	79 85       	ldd	r23, Y+9	; 0x09
    218c:	8a 85       	ldd	r24, Y+10	; 0x0a
    218e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	4c f5       	brge	.+82     	; 0x21f2 <ULTRASONIC_SENSOR_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    21a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    21a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9f 83       	std	Y+7, r25	; 0x07
    21c6:	8e 83       	std	Y+6, r24	; 0x06
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <ULTRASONIC_SENSOR_voidTrigger+0x148>
    21ca:	80 e9       	ldi	r24, 0x90	; 144
    21cc:	91 e0       	ldi	r25, 0x01	; 1
    21ce:	9d 83       	std	Y+5, r25	; 0x05
    21d0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <ULTRASONIC_SENSOR_voidTrigger+0x136>
    21da:	9d 83       	std	Y+5, r25	; 0x05
    21dc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21de:	8e 81       	ldd	r24, Y+6	; 0x06
    21e0:	9f 81       	ldd	r25, Y+7	; 0x07
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	9f 83       	std	Y+7, r25	; 0x07
    21e6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ea:	9f 81       	ldd	r25, Y+7	; 0x07
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	69 f7       	brne	.-38     	; 0x21ca <ULTRASONIC_SENSOR_voidTrigger+0x12a>
    21f0:	24 c0       	rjmp	.+72     	; 0x223a <ULTRASONIC_SENSOR_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f2:	68 85       	ldd	r22, Y+8	; 0x08
    21f4:	79 85       	ldd	r23, Y+9	; 0x09
    21f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9f 83       	std	Y+7, r25	; 0x07
    2204:	8e 83       	std	Y+6, r24	; 0x06
    2206:	8e 81       	ldd	r24, Y+6	; 0x06
    2208:	9f 81       	ldd	r25, Y+7	; 0x07
    220a:	9b 83       	std	Y+3, r25	; 0x03
    220c:	8a 83       	std	Y+2, r24	; 0x02
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	9b 81       	ldd	r25, Y+3	; 0x03
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	f1 f7       	brne	.-4      	; 0x2212 <ULTRASONIC_SENSOR_voidTrigger+0x172>
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02
    221a:	0f c0       	rjmp	.+30     	; 0x223a <ULTRASONIC_SENSOR_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    221c:	69 89       	ldd	r22, Y+17	; 0x11
    221e:	7a 89       	ldd	r23, Y+18	; 0x12
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	88 8b       	std	Y+16, r24	; 0x10
    222e:	88 89       	ldd	r24, Y+16	; 0x10
    2230:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	8a 95       	dec	r24
    2236:	f1 f7       	brne	.-4      	; 0x2234 <ULTRASONIC_SENSOR_voidTrigger+0x194>
    2238:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8LOW);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
}
    2244:	68 96       	adiw	r28, 0x18	; 24
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <ULTRASONIC_SENSOR_u16ReadDistance>:
u16 ULTRASONIC_SENSOR_u16ReadDistance(void){
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_SENSOR_voidTrigger();
    225e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ULTRASONIC_SENSOR_voidTrigger>

		distance= ((u16)(f32)((Time_High)/57.47));
    2262:	80 91 b6 01 	lds	r24, 0x01B6
    2266:	90 91 b7 01 	lds	r25, 0x01B7
    226a:	cc 01       	movw	r24, r24
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	bc 01       	movw	r22, r24
    227e:	cd 01       	movw	r24, r26
    2280:	28 e4       	ldi	r18, 0x48	; 72
    2282:	31 ee       	ldi	r19, 0xE1	; 225
    2284:	45 e6       	ldi	r20, 0x65	; 101
    2286:	52 e4       	ldi	r21, 0x42	; 66
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	90 93 b9 01 	sts	0x01B9, r25
    22a0:	80 93 b8 01 	sts	0x01B8, r24
        distance/=2;     /* i work as frequency 16 million not 8 million */
    22a4:	80 91 b8 01 	lds	r24, 0x01B8
    22a8:	90 91 b9 01 	lds	r25, 0x01B9
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	90 93 b9 01 	sts	0x01B9, r25
    22b4:	80 93 b8 01 	sts	0x01B8, r24
	return distance;
    22b8:	80 91 b8 01 	lds	r24, 0x01B8
    22bc:	90 91 b9 01 	lds	r25, 0x01B9
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <SERVO_MOTOR_voidInit>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/TIMER1/TIMER1_int.h"
#include "SERVO_MOTOR_priv.h"
#include "SERVO_MOTOR_conf.h"
#include<util/delay.h>
void SERVO_MOTOR_voidInit(void){
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidInit();
    22ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <Pwm1_voidInit>
	Pwm1_voidSetFrequency(50);
    22d2:	82 e3       	ldi	r24, 0x32	; 50
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 62 07 	call	0xec4	; 0xec4 <Pwm1_voidSetFrequency>
	Pwm1_voidStart();
    22da:	0e 94 b9 07 	call	0xf72	; 0xf72 <Pwm1_voidStart>
}
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <SERVO_MOTOR_voidRotate>:
void SERVO_MOTOR_voidRotate(void){
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	e8 97       	sbiw	r28, 0x38	; 56
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
	Pwm1_voidSetOCR1A(RIGHT);
    22f8:	87 e8       	ldi	r24, 0x87	; 135
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	aa e7       	ldi	r26, 0x7A	; 122
    2306:	b4 e4       	ldi	r27, 0x44	; 68
    2308:	8d ab       	std	Y+53, r24	; 0x35
    230a:	9e ab       	std	Y+54, r25	; 0x36
    230c:	af ab       	std	Y+55, r26	; 0x37
    230e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6d a9       	ldd	r22, Y+53	; 0x35
    2312:	7e a9       	ldd	r23, Y+54	; 0x36
    2314:	8f a9       	ldd	r24, Y+55	; 0x37
    2316:	98 ad       	ldd	r25, Y+56	; 0x38
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a e7       	ldi	r20, 0x7A	; 122
    231e:	55 e4       	ldi	r21, 0x45	; 69
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	89 ab       	std	Y+49, r24	; 0x31
    232a:	9a ab       	std	Y+50, r25	; 0x32
    232c:	ab ab       	std	Y+51, r26	; 0x33
    232e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2330:	69 a9       	ldd	r22, Y+49	; 0x31
    2332:	7a a9       	ldd	r23, Y+50	; 0x32
    2334:	8b a9       	ldd	r24, Y+51	; 0x33
    2336:	9c a9       	ldd	r25, Y+52	; 0x34
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <SERVO_MOTOR_voidRotate+0x6e>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	98 ab       	std	Y+48, r25	; 0x30
    234e:	8f a7       	std	Y+47, r24	; 0x2f
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <SERVO_MOTOR_voidRotate+0xec>
	else if (__tmp > 65535)
    2352:	69 a9       	ldd	r22, Y+49	; 0x31
    2354:	7a a9       	ldd	r23, Y+50	; 0x32
    2356:	8b a9       	ldd	r24, Y+51	; 0x33
    2358:	9c a9       	ldd	r25, Y+52	; 0x34
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <SERVO_MOTOR_voidRotate+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6d a9       	ldd	r22, Y+53	; 0x35
    236c:	7e a9       	ldd	r23, Y+54	; 0x36
    236e:	8f a9       	ldd	r24, Y+55	; 0x37
    2370:	98 ad       	ldd	r25, Y+56	; 0x38
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	98 ab       	std	Y+48, r25	; 0x30
    2390:	8f a7       	std	Y+47, r24	; 0x2f
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <SERVO_MOTOR_voidRotate+0xce>
    2394:	80 e9       	ldi	r24, 0x90	; 144
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	9e a7       	std	Y+46, r25	; 0x2e
    239a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    239c:	8d a5       	ldd	r24, Y+45	; 0x2d
    239e:	9e a5       	ldd	r25, Y+46	; 0x2e
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <SERVO_MOTOR_voidRotate+0xbc>
    23a4:	9e a7       	std	Y+46, r25	; 0x2e
    23a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23aa:	98 a9       	ldd	r25, Y+48	; 0x30
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	98 ab       	std	Y+48, r25	; 0x30
    23b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b4:	98 a9       	ldd	r25, Y+48	; 0x30
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <SERVO_MOTOR_voidRotate+0xb0>
    23ba:	14 c0       	rjmp	.+40     	; 0x23e4 <SERVO_MOTOR_voidRotate+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	98 ab       	std	Y+48, r25	; 0x30
    23ce:	8f a7       	std	Y+47, r24	; 0x2f
    23d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d2:	98 a9       	ldd	r25, Y+48	; 0x30
    23d4:	9c a7       	std	Y+44, r25	; 0x2c
    23d6:	8b a7       	std	Y+43, r24	; 0x2b
    23d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23da:	9c a5       	ldd	r25, Y+44	; 0x2c
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <SERVO_MOTOR_voidRotate+0xf8>
    23e0:	9c a7       	std	Y+44, r25	; 0x2c
    23e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(MIDDLE);
    23e4:	81 e8       	ldi	r24, 0x81	; 129
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	aa e7       	ldi	r26, 0x7A	; 122
    23f2:	b4 e4       	ldi	r27, 0x44	; 68
    23f4:	8f a3       	std	Y+39, r24	; 0x27
    23f6:	98 a7       	std	Y+40, r25	; 0x28
    23f8:	a9 a7       	std	Y+41, r26	; 0x29
    23fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fc:	6f a1       	ldd	r22, Y+39	; 0x27
    23fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2400:	89 a5       	ldd	r24, Y+41	; 0x29
    2402:	9a a5       	ldd	r25, Y+42	; 0x2a
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a e7       	ldi	r20, 0x7A	; 122
    240a:	55 e4       	ldi	r21, 0x45	; 69
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8b a3       	std	Y+35, r24	; 0x23
    2416:	9c a3       	std	Y+36, r25	; 0x24
    2418:	ad a3       	std	Y+37, r26	; 0x25
    241a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    241c:	6b a1       	ldd	r22, Y+35	; 0x23
    241e:	7c a1       	ldd	r23, Y+36	; 0x24
    2420:	8d a1       	ldd	r24, Y+37	; 0x25
    2422:	9e a1       	ldd	r25, Y+38	; 0x26
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	2c f4       	brge	.+10     	; 0x243e <SERVO_MOTOR_voidRotate+0x15a>
		__ticks = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9a a3       	std	Y+34, r25	; 0x22
    243a:	89 a3       	std	Y+33, r24	; 0x21
    243c:	3f c0       	rjmp	.+126    	; 0x24bc <SERVO_MOTOR_voidRotate+0x1d8>
	else if (__tmp > 65535)
    243e:	6b a1       	ldd	r22, Y+35	; 0x23
    2440:	7c a1       	ldd	r23, Y+36	; 0x24
    2442:	8d a1       	ldd	r24, Y+37	; 0x25
    2444:	9e a1       	ldd	r25, Y+38	; 0x26
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	4c f5       	brge	.+82     	; 0x24a8 <SERVO_MOTOR_voidRotate+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2456:	6f a1       	ldd	r22, Y+39	; 0x27
    2458:	78 a5       	ldd	r23, Y+40	; 0x28
    245a:	89 a5       	ldd	r24, Y+41	; 0x29
    245c:	9a a5       	ldd	r25, Y+42	; 0x2a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9a a3       	std	Y+34, r25	; 0x22
    247c:	89 a3       	std	Y+33, r24	; 0x21
    247e:	0f c0       	rjmp	.+30     	; 0x249e <SERVO_MOTOR_voidRotate+0x1ba>
    2480:	80 e9       	ldi	r24, 0x90	; 144
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	98 a3       	std	Y+32, r25	; 0x20
    2486:	8f 8f       	std	Y+31, r24	; 0x1f
    2488:	8f 8d       	ldd	r24, Y+31	; 0x1f
    248a:	98 a1       	ldd	r25, Y+32	; 0x20
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <SERVO_MOTOR_voidRotate+0x1a8>
    2490:	98 a3       	std	Y+32, r25	; 0x20
    2492:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	89 a1       	ldd	r24, Y+33	; 0x21
    2496:	9a a1       	ldd	r25, Y+34	; 0x22
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	9a a3       	std	Y+34, r25	; 0x22
    249c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249e:	89 a1       	ldd	r24, Y+33	; 0x21
    24a0:	9a a1       	ldd	r25, Y+34	; 0x22
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	69 f7       	brne	.-38     	; 0x2480 <SERVO_MOTOR_voidRotate+0x19c>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <SERVO_MOTOR_voidRotate+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a8:	6b a1       	ldd	r22, Y+35	; 0x23
    24aa:	7c a1       	ldd	r23, Y+36	; 0x24
    24ac:	8d a1       	ldd	r24, Y+37	; 0x25
    24ae:	9e a1       	ldd	r25, Y+38	; 0x26
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9a a3       	std	Y+34, r25	; 0x22
    24ba:	89 a3       	std	Y+33, r24	; 0x21
    24bc:	89 a1       	ldd	r24, Y+33	; 0x21
    24be:	9a a1       	ldd	r25, Y+34	; 0x22
    24c0:	9e 8f       	std	Y+30, r25	; 0x1e
    24c2:	8d 8f       	std	Y+29, r24	; 0x1d
    24c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <SERVO_MOTOR_voidRotate+0x1e4>
    24cc:	9e 8f       	std	Y+30, r25	; 0x1e
    24ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(LEFT);
    24d0:	8b e7       	ldi	r24, 0x7B	; 123
    24d2:	92 e0       	ldi	r25, 0x02	; 2
    24d4:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	aa e7       	ldi	r26, 0x7A	; 122
    24de:	b4 e4       	ldi	r27, 0x44	; 68
    24e0:	89 8f       	std	Y+25, r24	; 0x19
    24e2:	9a 8f       	std	Y+26, r25	; 0x1a
    24e4:	ab 8f       	std	Y+27, r26	; 0x1b
    24e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a e7       	ldi	r20, 0x7A	; 122
    24f6:	55 e4       	ldi	r21, 0x45	; 69
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	8d 8b       	std	Y+21, r24	; 0x15
    2502:	9e 8b       	std	Y+22, r25	; 0x16
    2504:	af 8b       	std	Y+23, r26	; 0x17
    2506:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2508:	6d 89       	ldd	r22, Y+21	; 0x15
    250a:	7e 89       	ldd	r23, Y+22	; 0x16
    250c:	8f 89       	ldd	r24, Y+23	; 0x17
    250e:	98 8d       	ldd	r25, Y+24	; 0x18
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e8       	ldi	r20, 0x80	; 128
    2516:	5f e3       	ldi	r21, 0x3F	; 63
    2518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251c:	88 23       	and	r24, r24
    251e:	2c f4       	brge	.+10     	; 0x252a <SERVO_MOTOR_voidRotate+0x246>
		__ticks = 1;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <SERVO_MOTOR_voidRotate+0x2c4>
	else if (__tmp > 65535)
    252a:	6d 89       	ldd	r22, Y+21	; 0x15
    252c:	7e 89       	ldd	r23, Y+22	; 0x16
    252e:	8f 89       	ldd	r24, Y+23	; 0x17
    2530:	98 8d       	ldd	r25, Y+24	; 0x18
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	3f ef       	ldi	r19, 0xFF	; 255
    2536:	4f e7       	ldi	r20, 0x7F	; 127
    2538:	57 e4       	ldi	r21, 0x47	; 71
    253a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253e:	18 16       	cp	r1, r24
    2540:	4c f5       	brge	.+82     	; 0x2594 <SERVO_MOTOR_voidRotate+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2542:	69 8d       	ldd	r22, Y+25	; 0x19
    2544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e2       	ldi	r20, 0x20	; 32
    2550:	51 e4       	ldi	r21, 0x41	; 65
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9c 8b       	std	Y+20, r25	; 0x14
    2568:	8b 8b       	std	Y+19, r24	; 0x13
    256a:	0f c0       	rjmp	.+30     	; 0x258a <SERVO_MOTOR_voidRotate+0x2a6>
    256c:	80 e9       	ldi	r24, 0x90	; 144
    256e:	91 e0       	ldi	r25, 0x01	; 1
    2570:	9a 8b       	std	Y+18, r25	; 0x12
    2572:	89 8b       	std	Y+17, r24	; 0x11
    2574:	89 89       	ldd	r24, Y+17	; 0x11
    2576:	9a 89       	ldd	r25, Y+18	; 0x12
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <SERVO_MOTOR_voidRotate+0x294>
    257c:	9a 8b       	std	Y+18, r25	; 0x12
    257e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	9c 8b       	std	Y+20, r25	; 0x14
    2588:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258a:	8b 89       	ldd	r24, Y+19	; 0x13
    258c:	9c 89       	ldd	r25, Y+20	; 0x14
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	69 f7       	brne	.-38     	; 0x256c <SERVO_MOTOR_voidRotate+0x288>
    2592:	14 c0       	rjmp	.+40     	; 0x25bc <SERVO_MOTOR_voidRotate+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2594:	6d 89       	ldd	r22, Y+21	; 0x15
    2596:	7e 89       	ldd	r23, Y+22	; 0x16
    2598:	8f 89       	ldd	r24, Y+23	; 0x17
    259a:	98 8d       	ldd	r25, Y+24	; 0x18
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	8b 89       	ldd	r24, Y+19	; 0x13
    25aa:	9c 89       	ldd	r25, Y+20	; 0x14
    25ac:	98 8b       	std	Y+16, r25	; 0x10
    25ae:	8f 87       	std	Y+15, r24	; 0x0f
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	98 89       	ldd	r25, Y+16	; 0x10
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	f1 f7       	brne	.-4      	; 0x25b4 <SERVO_MOTOR_voidRotate+0x2d0>
    25b8:	98 8b       	std	Y+16, r25	; 0x10
    25ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(MIDDLE);
    25bc:	81 e8       	ldi	r24, 0x81	; 129
    25be:	91 e0       	ldi	r25, 0x01	; 1
    25c0:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	aa e7       	ldi	r26, 0x7A	; 122
    25ca:	b4 e4       	ldi	r27, 0x44	; 68
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a e7       	ldi	r20, 0x7A	; 122
    25e2:	55 e4       	ldi	r21, 0x45	; 69
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <SERVO_MOTOR_voidRotate+0x332>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <SERVO_MOTOR_voidRotate+0x3b0>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <SERVO_MOTOR_voidRotate+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <SERVO_MOTOR_voidRotate+0x392>
    2658:	80 e9       	ldi	r24, 0x90	; 144
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <SERVO_MOTOR_voidRotate+0x380>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <SERVO_MOTOR_voidRotate+0x374>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <SERVO_MOTOR_voidRotate+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <SERVO_MOTOR_voidRotate+0x3bc>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    26a8:	e8 96       	adiw	r28, 0x38	; 56
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <SERVO_MOTOR_voidRotateLeft>:
void SERVO_MOTOR_voidRotateLeft(void){
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(LEFT);
    26c2:	8b e7       	ldi	r24, 0x7B	; 123
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <SERVO_MOTOR_voidRotateRight>:
void SERVO_MOTOR_voidRotateRight(void){
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(RIGHT);
    26d8:	87 e8       	ldi	r24, 0x87	; 135
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
}
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <SERVO_MOTOR_voidRotateMiddle>:
void SERVO_MOTOR_voidRotateMiddle(void){
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(MIDDLE);
    26ee:	81 e8       	ldi	r24, 0x81	; 129
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	0e 94 95 07 	call	0xf2a	; 0xf2a <Pwm1_voidSetOCR1A>
}
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <SERVO_MOTOR_voidTurnOff>:



void SERVO_MOTOR_voidTurnOff(void){
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidStop();
    2704:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Pwm1_voidStop>
	return;
}
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <MOTORS_CAR_voidInit>:
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include "MOTORS_CAR_priv.h"
#include "MOTORS_CAR_conf.h"
void MOTORS_CAR_voidInit(void){
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(MOTORS_CAR_EN1_GROUP,MOTORS_CAR_EN1_PIN,DIO_u8OUTPUT);
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	62 e0       	ldi	r22, 0x02	; 2
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_EN2_GROUP,MOTORS_CAR_EN2_PIN,DIO_u8OUTPUT);
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	63 e0       	ldi	r22, 0x03	; 3
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8OUTPUT);
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	64 e0       	ldi	r22, 0x04	; 4
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8OUTPUT);
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	65 e0       	ldi	r22, 0x05	; 5
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8OUTPUT);
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	66 e0       	ldi	r22, 0x06	; 6
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8OUTPUT);
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	67 e0       	ldi	r22, 0x07	; 7
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(MOTORS_CAR_EN1_GROUP,MOTORS_CAR_EN1_PIN,DIO_u8HIGH);
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_EN2_GROUP,MOTORS_CAR_EN2_PIN,DIO_u8HIGH);
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	63 e0       	ldi	r22, 0x03	; 3
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>

}
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <MOTORS_CAR_voidForward>:
void MOTORS_CAR_voidForward(void){
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
	/*Forward left*/
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8HIGH);
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	66 e0       	ldi	r22, 0x06	; 6
    2778:	41 e0       	ldi	r20, 0x01	; 1
    277a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8LOW);
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	67 e0       	ldi	r22, 0x07	; 7
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	/* FORWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	64 e0       	ldi	r22, 0x04	; 4
    278c:	40 e0       	ldi	r20, 0x00	; 0
    278e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	65 e0       	ldi	r22, 0x05	; 5
    2796:	41 e0       	ldi	r20, 0x01	; 1
    2798:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
}
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <MOTORS_CAR_voidBackward>:
void MOTORS_CAR_voidBackward(void){
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD LEFT*/
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    27aa:	82 e0       	ldi	r24, 0x02	; 2
    27ac:	66 e0       	ldi	r22, 0x06	; 6
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8HIGH);
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	67 e0       	ldi	r22, 0x07	; 7
    27b8:	41 e0       	ldi	r20, 0x01	; 1
    27ba:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	/*BACKWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8HIGH);
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	64 e0       	ldi	r22, 0x04	; 4
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	65 e0       	ldi	r22, 0x05	; 5
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
}
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <MOTORS_CAR_voidRight>:
void MOTORS_CAR_voidRight(void){
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8HIGH);
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	64 e0       	ldi	r22, 0x04	; 4
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	65 e0       	ldi	r22, 0x05	; 5
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>

	/* FORWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	64 e0       	ldi	r22, 0x04	; 4
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	65 e0       	ldi	r22, 0x05	; 5
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>


}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <MOTORS_CAR_voidLeft>:
void MOTORS_CAR_voidLeft(void){
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD LEFT*/
		DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	66 e0       	ldi	r22, 0x06	; 6
    281a:	40 e0       	ldi	r20, 0x00	; 0
    281c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8HIGH);
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	67 e0       	ldi	r22, 0x07	; 7
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>

	/* FORWARD RIGHT*/
		DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    282a:	82 e0       	ldi	r24, 0x02	; 2
    282c:	64 e0       	ldi	r22, 0x04	; 4
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	65 e0       	ldi	r22, 0x05	; 5
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
}
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <MOTORS_CAR_voidStop>:
void MOTORS_CAR_voidStop(void){
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	cd b7       	in	r28, 0x3d	; 61
    284a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	64 e0       	ldi	r22, 0x04	; 4
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	65 e0       	ldi	r22, 0x05	; 5
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	66 e0       	ldi	r22, 0x06	; 6
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8LOW);
    286a:	82 e0       	ldi	r24, 0x02	; 2
    286c:	67 e0       	ldi	r22, 0x07	; 7
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <LCD_voidWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
void LCD_voidWriteNLatch(u8 Copy_u8Byte){
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	e9 97       	sbiw	r28, 0x39	; 57
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	62 e0       	ldi	r22, 0x02	; 2
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	63 e0       	ldi	r22, 0x03	; 3
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    28a4:	89 ad       	ldd	r24, Y+57	; 0x39
    28a6:	98 2f       	mov	r25, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	99 27       	eor	r25, r25
    28ac:	99 1f       	adc	r25, r25
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	67 e0       	ldi	r22, 0x07	; 7
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    28b8:	89 ad       	ldd	r24, Y+57	; 0x39
    28ba:	82 95       	swap	r24
    28bc:	86 95       	lsr	r24
    28be:	86 95       	lsr	r24
    28c0:	83 70       	andi	r24, 0x03	; 3
    28c2:	98 2f       	mov	r25, r24
    28c4:	91 70       	andi	r25, 0x01	; 1
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	66 e0       	ldi	r22, 0x06	; 6
    28ca:	49 2f       	mov	r20, r25
    28cc:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    28d0:	89 ad       	ldd	r24, Y+57	; 0x39
    28d2:	82 95       	swap	r24
    28d4:	86 95       	lsr	r24
    28d6:	87 70       	andi	r24, 0x07	; 7
    28d8:	98 2f       	mov	r25, r24
    28da:	91 70       	andi	r25, 0x01	; 1
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	65 e0       	ldi	r22, 0x05	; 5
    28e0:	49 2f       	mov	r20, r25
    28e2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    28e6:	89 ad       	ldd	r24, Y+57	; 0x39
    28e8:	82 95       	swap	r24
    28ea:	8f 70       	andi	r24, 0x0F	; 15
    28ec:	98 2f       	mov	r25, r24
    28ee:	91 70       	andi	r25, 0x01	; 1
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	64 e0       	ldi	r22, 0x04	; 4
    28f4:	49 2f       	mov	r20, r25
    28f6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e8       	ldi	r26, 0x80	; 128
    290a:	bf e3       	ldi	r27, 0x3F	; 63
    290c:	8d ab       	std	Y+53, r24	; 0x35
    290e:	9e ab       	std	Y+54, r25	; 0x36
    2910:	af ab       	std	Y+55, r26	; 0x37
    2912:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6d a9       	ldd	r22, Y+53	; 0x35
    2916:	7e a9       	ldd	r23, Y+54	; 0x36
    2918:	8f a9       	ldd	r24, Y+55	; 0x37
    291a:	98 ad       	ldd	r25, Y+56	; 0x38
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a e7       	ldi	r20, 0x7A	; 122
    2922:	55 e4       	ldi	r21, 0x45	; 69
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	89 ab       	std	Y+49, r24	; 0x31
    292e:	9a ab       	std	Y+50, r25	; 0x32
    2930:	ab ab       	std	Y+51, r26	; 0x33
    2932:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2934:	69 a9       	ldd	r22, Y+49	; 0x31
    2936:	7a a9       	ldd	r23, Y+50	; 0x32
    2938:	8b a9       	ldd	r24, Y+51	; 0x33
    293a:	9c a9       	ldd	r25, Y+52	; 0x34
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_voidWriteNLatch+0xdc>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	98 ab       	std	Y+48, r25	; 0x30
    2952:	8f a7       	std	Y+47, r24	; 0x2f
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <LCD_voidWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2956:	69 a9       	ldd	r22, Y+49	; 0x31
    2958:	7a a9       	ldd	r23, Y+50	; 0x32
    295a:	8b a9       	ldd	r24, Y+51	; 0x33
    295c:	9c a9       	ldd	r25, Y+52	; 0x34
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <LCD_voidWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6d a9       	ldd	r22, Y+53	; 0x35
    2970:	7e a9       	ldd	r23, Y+54	; 0x36
    2972:	8f a9       	ldd	r24, Y+55	; 0x37
    2974:	98 ad       	ldd	r25, Y+56	; 0x38
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	98 ab       	std	Y+48, r25	; 0x30
    2994:	8f a7       	std	Y+47, r24	; 0x2f
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <LCD_voidWriteNLatch+0x13c>
    2998:	80 e9       	ldi	r24, 0x90	; 144
    299a:	91 e0       	ldi	r25, 0x01	; 1
    299c:	9e a7       	std	Y+46, r25	; 0x2e
    299e:	8d a7       	std	Y+45, r24	; 0x2d
    29a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    29a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_voidWriteNLatch+0x12a>
    29a8:	9e a7       	std	Y+46, r25	; 0x2e
    29aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ae:	98 a9       	ldd	r25, Y+48	; 0x30
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	98 ab       	std	Y+48, r25	; 0x30
    29b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <LCD_voidWriteNLatch+0x11e>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <LCD_voidWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	69 a9       	ldd	r22, Y+49	; 0x31
    29c2:	7a a9       	ldd	r23, Y+50	; 0x32
    29c4:	8b a9       	ldd	r24, Y+51	; 0x33
    29c6:	9c a9       	ldd	r25, Y+52	; 0x34
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	98 ab       	std	Y+48, r25	; 0x30
    29d2:	8f a7       	std	Y+47, r24	; 0x2f
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	9c a7       	std	Y+44, r25	; 0x2c
    29da:	8b a7       	std	Y+43, r24	; 0x2b
    29dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    29de:	9c a5       	ldd	r25, Y+44	; 0x2c
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_voidWriteNLatch+0x166>
    29e4:	9c a7       	std	Y+44, r25	; 0x2c
    29e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	63 e0       	ldi	r22, 0x03	; 3
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e0       	ldi	r26, 0x00	; 0
    29f8:	b0 e4       	ldi	r27, 0x40	; 64
    29fa:	8f a3       	std	Y+39, r24	; 0x27
    29fc:	98 a7       	std	Y+40, r25	; 0x28
    29fe:	a9 a7       	std	Y+41, r26	; 0x29
    2a00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6f a1       	ldd	r22, Y+39	; 0x27
    2a04:	78 a5       	ldd	r23, Y+40	; 0x28
    2a06:	89 a5       	ldd	r24, Y+41	; 0x29
    2a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a e7       	ldi	r20, 0x7A	; 122
    2a10:	55 e4       	ldi	r21, 0x45	; 69
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	8b a3       	std	Y+35, r24	; 0x23
    2a1c:	9c a3       	std	Y+36, r25	; 0x24
    2a1e:	ad a3       	std	Y+37, r26	; 0x25
    2a20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a22:	6b a1       	ldd	r22, Y+35	; 0x23
    2a24:	7c a1       	ldd	r23, Y+36	; 0x24
    2a26:	8d a1       	ldd	r24, Y+37	; 0x25
    2a28:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <LCD_voidWriteNLatch+0x1ca>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9a a3       	std	Y+34, r25	; 0x22
    2a40:	89 a3       	std	Y+33, r24	; 0x21
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <LCD_voidWriteNLatch+0x248>
	else if (__tmp > 65535)
    2a44:	6b a1       	ldd	r22, Y+35	; 0x23
    2a46:	7c a1       	ldd	r23, Y+36	; 0x24
    2a48:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <LCD_voidWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a5e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a60:	89 a5       	ldd	r24, Y+41	; 0x29
    2a62:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9a a3       	std	Y+34, r25	; 0x22
    2a82:	89 a3       	std	Y+33, r24	; 0x21
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <LCD_voidWriteNLatch+0x22a>
    2a86:	80 e9       	ldi	r24, 0x90	; 144
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	98 a3       	std	Y+32, r25	; 0x20
    2a8c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a90:	98 a1       	ldd	r25, Y+32	; 0x20
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_voidWriteNLatch+0x218>
    2a96:	98 a3       	std	Y+32, r25	; 0x20
    2a98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9a a3       	std	Y+34, r25	; 0x22
    2aa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <LCD_voidWriteNLatch+0x20c>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <LCD_voidWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	9a a3       	std	Y+34, r25	; 0x22
    2ac0:	89 a3       	std	Y+33, r24	; 0x21
    2ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2acc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_voidWriteNLatch+0x254>
    2ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    2ad6:	89 ad       	ldd	r24, Y+57	; 0x39
    2ad8:	86 95       	lsr	r24
    2ada:	86 95       	lsr	r24
    2adc:	86 95       	lsr	r24
    2ade:	98 2f       	mov	r25, r24
    2ae0:	91 70       	andi	r25, 0x01	; 1
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	67 e0       	ldi	r22, 0x07	; 7
    2ae6:	49 2f       	mov	r20, r25
    2ae8:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    2aec:	89 ad       	ldd	r24, Y+57	; 0x39
    2aee:	86 95       	lsr	r24
    2af0:	86 95       	lsr	r24
    2af2:	98 2f       	mov	r25, r24
    2af4:	91 70       	andi	r25, 0x01	; 1
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	66 e0       	ldi	r22, 0x06	; 6
    2afa:	49 2f       	mov	r20, r25
    2afc:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    2b00:	89 ad       	ldd	r24, Y+57	; 0x39
    2b02:	86 95       	lsr	r24
    2b04:	98 2f       	mov	r25, r24
    2b06:	91 70       	andi	r25, 0x01	; 1
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	65 e0       	ldi	r22, 0x05	; 5
    2b0c:	49 2f       	mov	r20, r25
    2b0e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    2b12:	89 ad       	ldd	r24, Y+57	; 0x39
    2b14:	98 2f       	mov	r25, r24
    2b16:	91 70       	andi	r25, 0x01	; 1
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	64 e0       	ldi	r22, 0x04	; 4
    2b1c:	49 2f       	mov	r20, r25
    2b1e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	63 e0       	ldi	r22, 0x03	; 3
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	89 8f       	std	Y+25, r24	; 0x19
    2b36:	9a 8f       	std	Y+26, r25	; 0x1a
    2b38:	ab 8f       	std	Y+27, r26	; 0x1b
    2b3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a e7       	ldi	r20, 0x7A	; 122
    2b4a:	55 e4       	ldi	r21, 0x45	; 69
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8d 8b       	std	Y+21, r24	; 0x15
    2b56:	9e 8b       	std	Y+22, r25	; 0x16
    2b58:	af 8b       	std	Y+23, r26	; 0x17
    2b5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b60:	8f 89       	ldd	r24, Y+23	; 0x17
    2b62:	98 8d       	ldd	r25, Y+24	; 0x18
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_voidWriteNLatch+0x304>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 8b       	std	Y+20, r25	; 0x14
    2b7a:	8b 8b       	std	Y+19, r24	; 0x13
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <LCD_voidWriteNLatch+0x382>
	else if (__tmp > 65535)
    2b7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b80:	7e 89       	ldd	r23, Y+22	; 0x16
    2b82:	8f 89       	ldd	r24, Y+23	; 0x17
    2b84:	98 8d       	ldd	r25, Y+24	; 0x18
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <LCD_voidWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	69 8d       	ldd	r22, Y+25	; 0x19
    2b98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9c 8b       	std	Y+20, r25	; 0x14
    2bbc:	8b 8b       	std	Y+19, r24	; 0x13
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <LCD_voidWriteNLatch+0x364>
    2bc0:	80 e9       	ldi	r24, 0x90	; 144
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	9a 8b       	std	Y+18, r25	; 0x12
    2bc6:	89 8b       	std	Y+17, r24	; 0x11
    2bc8:	89 89       	ldd	r24, Y+17	; 0x11
    2bca:	9a 89       	ldd	r25, Y+18	; 0x12
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_voidWriteNLatch+0x352>
    2bd0:	9a 8b       	std	Y+18, r25	; 0x12
    2bd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	8b 89       	ldd	r24, Y+19	; 0x13
    2be0:	9c 89       	ldd	r25, Y+20	; 0x14
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <LCD_voidWriteNLatch+0x346>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <LCD_voidWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bea:	7e 89       	ldd	r23, Y+22	; 0x16
    2bec:	8f 89       	ldd	r24, Y+23	; 0x17
    2bee:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	98 8b       	std	Y+16, r25	; 0x10
    2c02:	8f 87       	std	Y+15, r24	; 0x0f
    2c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c06:	98 89       	ldd	r25, Y+16	; 0x10
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_voidWriteNLatch+0x38e>
    2c0c:	98 8b       	std	Y+16, r25	; 0x10
    2c0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	63 e0       	ldi	r22, 0x03	; 3
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e0       	ldi	r26, 0x00	; 0
    2c20:	b0 e4       	ldi	r27, 0x40	; 64
    2c22:	8b 87       	std	Y+11, r24	; 0x0b
    2c24:	9c 87       	std	Y+12, r25	; 0x0c
    2c26:	ad 87       	std	Y+13, r26	; 0x0d
    2c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	55 e4       	ldi	r21, 0x45	; 69
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8f 83       	std	Y+7, r24	; 0x07
    2c44:	98 87       	std	Y+8, r25	; 0x08
    2c46:	a9 87       	std	Y+9, r26	; 0x09
    2c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <LCD_voidWriteNLatch+0x3f2>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <LCD_voidWriteNLatch+0x470>
	else if (__tmp > 65535)
    2c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6e:	78 85       	ldd	r23, Y+8	; 0x08
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <LCD_voidWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <LCD_voidWriteNLatch+0x452>
    2cae:	80 e9       	ldi	r24, 0x90	; 144
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <LCD_voidWriteNLatch+0x440>
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <LCD_voidWriteNLatch+0x434>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <LCD_voidWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <LCD_voidWriteNLatch+0x47c>
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

					return;
}
    2cfe:	e9 96       	adiw	r28, 0x39	; 57
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <LCD_voidInit>:
void LCD_voidInit(void){
    2d10:	df 93       	push	r29
    2d12:	cf 93       	push	r28
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	6c 97       	sbiw	r28, 0x1c	; 28
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	61 e0       	ldi	r22, 0x01	; 1
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	62 e0       	ldi	r22, 0x02	; 2
    2d32:	41 e0       	ldi	r20, 0x01	; 1
    2d34:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	63 e0       	ldi	r22, 0x03	; 3
    2d3c:	41 e0       	ldi	r20, 0x01	; 1
    2d3e:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	67 e0       	ldi	r22, 0x07	; 7
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	66 e0       	ldi	r22, 0x06	; 6
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	65 e0       	ldi	r22, 0x05	; 5
    2d5a:	41 e0       	ldi	r20, 0x01	; 1
    2d5c:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	64 e0       	ldi	r22, 0x04	; 4
    2d64:	41 e0       	ldi	r20, 0x01	; 1
    2d66:	0e 94 b7 0c 	call	0x196e	; 0x196e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_voidWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	67 e0       	ldi	r22, 0x07	; 7
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	66 e0       	ldi	r22, 0x06	; 6
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	64 e0       	ldi	r22, 0x04	; 4
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	63 e0       	ldi	r22, 0x03	; 3
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	89 8f       	std	Y+25, r24	; 0x19
    2da6:	9a 8f       	std	Y+26, r25	; 0x1a
    2da8:	ab 8f       	std	Y+27, r26	; 0x1b
    2daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	69 8d       	ldd	r22, Y+25	; 0x19
    2dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	55 e4       	ldi	r21, 0x45	; 69
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8d 8b       	std	Y+21, r24	; 0x15
    2dc6:	9e 8b       	std	Y+22, r25	; 0x16
    2dc8:	af 8b       	std	Y+23, r26	; 0x17
    2dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <LCD_voidInit+0xde>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
    2dea:	8b 8b       	std	Y+19, r24	; 0x13
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    2dee:	6d 89       	ldd	r22, Y+21	; 0x15
    2df0:	7e 89       	ldd	r23, Y+22	; 0x16
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	98 8d       	ldd	r25, Y+24	; 0x18
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <LCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	69 8d       	ldd	r22, Y+25	; 0x19
    2e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9c 8b       	std	Y+20, r25	; 0x14
    2e2c:	8b 8b       	std	Y+19, r24	; 0x13
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <LCD_voidInit+0x13e>
    2e30:	80 e9       	ldi	r24, 0x90	; 144
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	9a 8b       	std	Y+18, r25	; 0x12
    2e36:	89 8b       	std	Y+17, r24	; 0x11
    2e38:	89 89       	ldd	r24, Y+17	; 0x11
    2e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_voidInit+0x12c>
    2e40:	9a 8b       	std	Y+18, r25	; 0x12
    2e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	9c 89       	ldd	r25, Y+20	; 0x14
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <LCD_voidInit+0x120>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <LCD_voidInit+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	98 8b       	std	Y+16, r25	; 0x10
    2e72:	8f 87       	std	Y+15, r24	; 0x0f
    2e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e76:	98 89       	ldd	r25, Y+16	; 0x10
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_voidInit+0x168>
    2e7c:	98 8b       	std	Y+16, r25	; 0x10
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	63 e0       	ldi	r22, 0x03	; 3
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e0       	ldi	r26, 0x00	; 0
    2e90:	b0 e4       	ldi	r27, 0x40	; 64
    2e92:	8b 87       	std	Y+11, r24	; 0x0b
    2e94:	9c 87       	std	Y+12, r25	; 0x0c
    2e96:	ad 87       	std	Y+13, r26	; 0x0d
    2e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	55 e4       	ldi	r21, 0x45	; 69
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	a9 87       	std	Y+9, r26	; 0x09
    2eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_voidInit+0x1cc>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_voidInit+0x24a>
	else if (__tmp > 65535)
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_voidInit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_voidInit+0x22c>
    2f1e:	80 e9       	ldi	r24, 0x90	; 144
    2f20:	91 e0       	ldi	r25, 0x01	; 1
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_voidInit+0x21a>
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_voidInit+0x20e>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_voidInit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_voidInit+0x256>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	61 e0       	ldi	r22, 0x01	; 1
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>

	      LCD_voidWriteNLatch(0x28);
    2f78:	88 e2       	ldi	r24, 0x28	; 40
    2f7a:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>

#endif
	      //desplay on off

	     	      DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	     	      LCD_voidWriteNLatch(0X0F);
    2f88:	8f e0       	ldi	r24, 0x0F	; 15
    2f8a:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
	     	      //desplay clear
	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	61 e0       	ldi	r22, 0x01	; 1
    2f92:	40 e0       	ldi	r20, 0x00	; 0
    2f94:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	     	    	     	      LCD_voidWriteNLatch(0X01);
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	     	    	     	    	      LCD_voidWriteNLatch(0X06);
    2fa8:	86 e0       	ldi	r24, 0x06	; 6
    2faa:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
	      return;
}
    2fae:	6c 96       	adiw	r28, 0x1c	; 28
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	cf 91       	pop	r28
    2fbc:	df 91       	pop	r29
    2fbe:	08 95       	ret

00002fc0 <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_u8Data){
    2fc0:	df 93       	push	r29
    2fc2:	cf 93       	push	r28
    2fc4:	0f 92       	push	r0
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	61 e0       	ldi	r22, 0x01	; 1
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(Copy_u8Data);
    2fd6:	89 81       	ldd	r24, Y+1	; 0x01
    2fd8:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
	return;
}
    2fdc:	0f 90       	pop	r0
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <LCD_voidWriteCommand>:
void LCD_voidWriteCommand(u8 Copy_u8Command){
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	0f 92       	push	r0
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	40 e0       	ldi	r20, 0x00	; 0
    2ff6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
			      LCD_voidWriteNLatch(Copy_u8Command);
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
			      return;
}
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <LCD_voidWriteString>:

void LCD_voidWriteString(const char*Copy_String){
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	00 d0       	rcall	.+0      	; 0x300e <LCD_voidWriteString+0x6>
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	9a 83       	std	Y+2, r25	; 0x02
    3014:	89 83       	std	Y+1, r24	; 0x01
    3016:	10 c0       	rjmp	.+32     	; 0x3038 <LCD_voidWriteString+0x30>

	while(*Copy_String!=0){
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	41 e0       	ldi	r20, 0x01	; 1
    301e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
			LCD_voidWriteNLatch(*Copy_String++);
    3022:	e9 81       	ldd	r30, Y+1	; 0x01
    3024:	fa 81       	ldd	r31, Y+2	; 0x02
    3026:	20 81       	ld	r18, Z
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	01 96       	adiw	r24, 0x01	; 1
    302e:	9a 83       	std	Y+2, r25	; 0x02
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	82 2f       	mov	r24, r18
    3034:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
			      return;
}

void LCD_voidWriteString(const char*Copy_String){

	while(*Copy_String!=0){
    3038:	e9 81       	ldd	r30, Y+1	; 0x01
    303a:	fa 81       	ldd	r31, Y+2	; 0x02
    303c:	80 81       	ld	r24, Z
    303e:	88 23       	and	r24, r24
    3040:	59 f7       	brne	.-42     	; 0x3018 <LCD_voidWriteString+0x10>
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_voidWriteNLatch(*Copy_String++);
		}
	return;
}
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <LCD_voidClearScreen>:
void LCD_voidClearScreen(void){
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	40 e0       	ldi	r20, 0x00	; 0
    305a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(0x01);
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_voidWriteNLatch>
	LCD_voidWriteCommand(0x80);           //GO TO POSITION ZER0
    3064:	80 e8       	ldi	r24, 0x80	; 128
    3066:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
	return;
}
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <LCD_voidShiftDisplayRight>:
void LCD_voidShiftDisplayRight(void){
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x18);
    3078:	88 e1       	ldi	r24, 0x18	; 24
    307a:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
	return ;
}
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	08 95       	ret

00003084 <LCD_voidDisplayLeft>:
void LCD_voidDisplayLeft(void){
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x1c);
    308c:	8c e1       	ldi	r24, 0x1C	; 28
    308e:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
	return ;
}
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <LCD_voidSetCgram>:
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <LCD_voidSetCgram+0x6>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LCD_voidSetCgram+0x8>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9b 83       	std	Y+3, r25	; 0x03
    30a8:	8a 83       	std	Y+2, r24	; 0x02
    30aa:	6c 83       	std	Y+4, r22	; 0x04
    30ac:	4d 83       	std	Y+5, r20	; 0x05

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	08 96       	adiw	r24, 0x08	; 8
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    30c6:	19 82       	std	Y+1, r1	; 0x01
    30c8:	0e c0       	rjmp	.+28     	; 0x30e6 <LCD_voidSetCgram+0x4e>
			LCD_voidWriteData(Copy_u8Array[i]);
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	9b 81       	ldd	r25, Y+3	; 0x03
    30d4:	fc 01       	movw	r30, r24
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 1f       	adc	r31, r19
    30da:	80 81       	ld	r24, Z
    30dc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <LCD_voidWriteData>
}
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	8f 5f       	subi	r24, 0xFF	; 255
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	28 2f       	mov	r18, r24
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	88 2f       	mov	r24, r24
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	88 0f       	add	r24, r24
    30f8:	99 1f       	adc	r25, r25
    30fa:	88 0f       	add	r24, r24
    30fc:	99 1f       	adc	r25, r25
    30fe:	28 17       	cp	r18, r24
    3100:	39 07       	cpc	r19, r25
    3102:	1c f3       	brlt	.-58     	; 0x30ca <LCD_voidSetCgram+0x32>
			LCD_voidWriteData(Copy_u8Array[i]);

		}
		return;
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	0f 90       	pop	r0
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	08 95       	ret

00003114 <LCD_voidSetDdram>:
void LCD_voidSetDdram(u8 Copy_u8Position){
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	0f 92       	push	r0
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidWriteCommand(0X80+(8*Copy_u8Position));
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	40 96       	adiw	r24, 0x10	; 16
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	88 0f       	add	r24, r24
    3132:	99 1f       	adc	r25, r25
    3134:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
		return;
}
    3138:	0f 90       	pop	r0
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	08 95       	ret

00003140 <LCD_voidWriteCharacter>:
void LCD_voidWriteCharacter(u8 Copy_u8Char){
    3140:	df 93       	push	r29
    3142:	cf 93       	push	r28
    3144:	0f 92       	push	r0
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(Copy_u8Char);
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <LCD_voidWriteData>
	return;
}
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <LCD_voidWritInteger>:
void LCD_voidWritInteger(u16 Copy_intNumber){
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	cd b7       	in	r28, 0x3d	; 61
    3160:	de b7       	in	r29, 0x3e	; 62
    3162:	2f 97       	sbiw	r28, 0x0f	; 15
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	99 87       	std	Y+9, r25	; 0x09
    3170:	88 87       	std	Y+8, r24	; 0x08
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    3172:	2d b7       	in	r18, 0x3d	; 61
    3174:	3e b7       	in	r19, 0x3e	; 62
    3176:	3f 87       	std	Y+15, r19	; 0x0f
    3178:	2e 87       	std	Y+14, r18	; 0x0e
void LCD_voidWriteCharacter(u8 Copy_u8Char){

	LCD_voidWriteData(Copy_u8Char);
	return;
}
void LCD_voidWritInteger(u16 Copy_intNumber){
    317a:	8d b7       	in	r24, 0x3d	; 61
    317c:	9e b7       	in	r25, 0x3e	; 62
    317e:	9b 87       	std	Y+11, r25	; 0x0b
    3180:	8a 87       	std	Y+10, r24	; 0x0a

int local_intTempNum=Copy_intNumber;
    3182:	88 85       	ldd	r24, Y+8	; 0x08
    3184:	99 85       	ldd	r25, Y+9	; 0x09
    3186:	9d 83       	std	Y+5, r25	; 0x05
    3188:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    318a:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    318c:	88 85       	ldd	r24, Y+8	; 0x08
    318e:	99 85       	ldd	r25, Y+9	; 0x09
    3190:	00 97       	sbiw	r24, 0x00	; 0
    3192:	89 f4       	brne	.+34     	; 0x31b6 <LCD_voidWritInteger+0x5c>
	LCD_voidWriteCharacter('0');
    3194:	80 e3       	ldi	r24, 0x30	; 48
    3196:	0e 94 a0 18 	call	0x3140	; 0x3140 <LCD_voidWriteCharacter>
    319a:	69 c0       	rjmp	.+210    	; 0x326e <LCD_voidWritInteger+0x114>
	return;
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	2a e0       	ldi	r18, 0x0A	; 10
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	b9 01       	movw	r22, r18
    31a6:	0e 94 76 23 	call	0x46ec	; 0x46ec <__divmodhi4>
    31aa:	cb 01       	movw	r24, r22
    31ac:	9d 83       	std	Y+5, r25	; 0x05
    31ae:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_voidWriteCharacter('0');
	return;
}
while(local_intTempNum!=0){
    31b6:	8c 81       	ldd	r24, Y+4	; 0x04
    31b8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	79 f7       	brne	.-34     	; 0x319c <LCD_voidWritInteger+0x42>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    31be:	8b 81       	ldd	r24, Y+3	; 0x03
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	2d b7       	in	r18, 0x3d	; 61
    31c6:	3e b7       	in	r19, 0x3e	; 62
    31c8:	28 1b       	sub	r18, r24
    31ca:	39 0b       	sbc	r19, r25
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	3e bf       	out	0x3e, r19	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	2d bf       	out	0x3d, r18	; 61
    31d6:	8d b7       	in	r24, 0x3d	; 61
    31d8:	9e b7       	in	r25, 0x3e	; 62
    31da:	01 96       	adiw	r24, 0x01	; 1
    31dc:	9d 87       	std	Y+13, r25	; 0x0d
    31de:	8c 87       	std	Y+12, r24	; 0x0c
    31e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    31e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    31e4:	00 96       	adiw	r24, 0x00	; 0
    31e6:	9d 87       	std	Y+13, r25	; 0x0d
    31e8:	8c 87       	std	Y+12, r24	; 0x0c
    31ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    31ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    31ee:	3f 83       	std	Y+7, r19	; 0x07
    31f0:	2e 83       	std	Y+6, r18	; 0x06
local_intTempNum=Copy_intNumber;
    31f2:	88 85       	ldd	r24, Y+8	; 0x08
    31f4:	99 85       	ldd	r25, Y+9	; 0x09
    31f6:	9d 83       	std	Y+5, r25	; 0x05
    31f8:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	8a 83       	std	Y+2, r24	; 0x02
    31fe:	20 c0       	rjmp	.+64     	; 0x3240 <LCD_voidWritInteger+0xe6>
	array[i-1]=local_intTempNum%10+'0';
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	fc 01       	movw	r30, r24
    3208:	31 97       	sbiw	r30, 0x01	; 1
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	9d 81       	ldd	r25, Y+5	; 0x05
    320e:	2a e0       	ldi	r18, 0x0A	; 10
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	b9 01       	movw	r22, r18
    3214:	0e 94 76 23 	call	0x46ec	; 0x46ec <__divmodhi4>
    3218:	28 2f       	mov	r18, r24
    321a:	20 5d       	subi	r18, 0xD0	; 208
    321c:	8e 81       	ldd	r24, Y+6	; 0x06
    321e:	9f 81       	ldd	r25, Y+7	; 0x07
    3220:	e8 0f       	add	r30, r24
    3222:	f9 1f       	adc	r31, r25
    3224:	20 83       	st	Z, r18
	local_intTempNum/=10;
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	2a e0       	ldi	r18, 0x0A	; 10
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	b9 01       	movw	r22, r18
    3230:	0e 94 76 23 	call	0x46ec	; 0x46ec <__divmodhi4>
    3234:	cb 01       	movw	r24, r22
    3236:	9d 83       	std	Y+5, r25	; 0x05
    3238:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	81 50       	subi	r24, 0x01	; 1
    323e:	8a 83       	std	Y+2, r24	; 0x02
    3240:	8a 81       	ldd	r24, Y+2	; 0x02
    3242:	88 23       	and	r24, r24
    3244:	e9 f6       	brne	.-70     	; 0x3200 <LCD_voidWritInteger+0xa6>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3246:	19 82       	std	Y+1, r1	; 0x01
    3248:	0e c0       	rjmp	.+28     	; 0x3266 <LCD_voidWritInteger+0x10c>
	LCD_voidWriteCharacter(array[i]);
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	28 2f       	mov	r18, r24
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	8e 81       	ldd	r24, Y+6	; 0x06
    3252:	9f 81       	ldd	r25, Y+7	; 0x07
    3254:	fc 01       	movw	r30, r24
    3256:	e2 0f       	add	r30, r18
    3258:	f3 1f       	adc	r31, r19
    325a:	80 81       	ld	r24, Z
    325c:	0e 94 a0 18 	call	0x3140	; 0x3140 <LCD_voidWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	8f 5f       	subi	r24, 0xFF	; 255
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	99 81       	ldd	r25, Y+1	; 0x01
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	98 17       	cp	r25, r24
    326c:	70 f3       	brcs	.-36     	; 0x324a <LCD_voidWritInteger+0xf0>
    326e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3270:	9b 85       	ldd	r25, Y+11	; 0x0b
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	9e bf       	out	0x3e, r25	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    327c:	2e 85       	ldd	r18, Y+14	; 0x0e
    327e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	3e bf       	out	0x3e, r19	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	2d bf       	out	0x3d, r18	; 61
    328a:	2f 96       	adiw	r28, 0x0f	; 15
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	de bf       	out	0x3e, r29	; 62
    3292:	0f be       	out	0x3f, r0	; 63
    3294:	cd bf       	out	0x3d, r28	; 61
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	08 95       	ret

0000329c <LCD_voidWriteFloat>:
void LCD_voidWriteFloat(f32 Copy_floatNumber){
    329c:	df 93       	push	r29
    329e:	cf 93       	push	r28
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2c 97       	sbiw	r28, 0x0c	; 12
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	69 87       	std	Y+9, r22	; 0x09
    32b2:	7a 87       	std	Y+10, r23	; 0x0a
    32b4:	8b 87       	std	Y+11, r24	; 0x0b
    32b6:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32int=(u32)(Copy_floatNumber);
    32b8:	69 85       	ldd	r22, Y+9	; 0x09
    32ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    32bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    32be:	9c 85       	ldd	r25, Y+12	; 0x0c
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	8d 83       	std	Y+5, r24	; 0x05
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	af 83       	std	Y+7, r26	; 0x07
    32ce:	b8 87       	std	Y+8, r27	; 0x08
	LCD_voidWritInteger(Local_u32int);
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	0e 94 ad 18 	call	0x315a	; 0x315a <LCD_voidWritInteger>
	LCD_voidWriteCharacter('.');
    32d8:	8e e2       	ldi	r24, 0x2E	; 46
    32da:	0e 94 a0 18 	call	0x3140	; 0x3140 <LCD_voidWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    32de:	6d 81       	ldd	r22, Y+5	; 0x05
    32e0:	7e 81       	ldd	r23, Y+6	; 0x06
    32e2:	8f 81       	ldd	r24, Y+7	; 0x07
    32e4:	98 85       	ldd	r25, Y+8	; 0x08
    32e6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32ea:	9b 01       	movw	r18, r22
    32ec:	ac 01       	movw	r20, r24
    32ee:	69 85       	ldd	r22, Y+9	; 0x09
    32f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    32f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    32f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    32f6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a e7       	ldi	r20, 0x7A	; 122
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	9a 83       	std	Y+2, r25	; 0x02
    3322:	ab 83       	std	Y+3, r26	; 0x03
    3324:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidWritInteger(Local_u32float);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	0e 94 ad 18 	call	0x315a	; 0x315a <LCD_voidWritInteger>

	return;
}
    332e:	2c 96       	adiw	r28, 0x0c	; 12
    3330:	0f b6       	in	r0, 0x3f	; 63
    3332:	f8 94       	cli
    3334:	de bf       	out	0x3e, r29	; 62
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	cd bf       	out	0x3d, r28	; 61
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <LCD_voidGoToPosition>:
void LCD_voidGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	00 d0       	rcall	.+0      	; 0x3346 <LCD_voidGoToPosition+0x6>
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	82 30       	cpi	r24, 0x02	; 2
    3352:	90 f4       	brcc	.+36     	; 0x3378 <LCD_voidGoToPosition+0x38>
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	81 31       	cpi	r24, 0x11	; 17
    3358:	78 f4       	brcc	.+30     	; 0x3378 <LCD_voidGoToPosition+0x38>
		if(Copy_u8Row==0){
    335a:	89 81       	ldd	r24, Y+1	; 0x01
    335c:	88 23       	and	r24, r24
    335e:	29 f4       	brne	.+10     	; 0x336a <LCD_voidGoToPosition+0x2a>
			LCD_voidWriteCommand((0x80+Copy_u8Col));
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	80 58       	subi	r24, 0x80	; 128
    3364:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
    3368:	07 c0       	rjmp	.+14     	; 0x3378 <LCD_voidGoToPosition+0x38>
		}
		else if(Copy_u8Row==1){
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	81 30       	cpi	r24, 0x01	; 1
    336e:	21 f4       	brne	.+8      	; 0x3378 <LCD_voidGoToPosition+0x38>
			LCD_voidWriteCommand((0xC0+Copy_u8Col));
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	80 54       	subi	r24, 0x40	; 64
    3374:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <LCD_voidWriteCommand>
		}
	}

		return;

}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <main>:
	Back
}states;
u16 Mid_Distance;
u16 Right_Distance;
u16 Left_Distance;
int main(){
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	c6 5c       	subi	r28, 0xC6	; 198
    3390:	d0 40       	sbci	r29, 0x00	; 0
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    339c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <LCD_voidInit>
	EXTI_voidInit();
    33a0:	0e 94 17 0b 	call	0x162e	; 0x162e <EXTI_voidInit>
	SERVO_MOTOR_voidInit();
    33a4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <SERVO_MOTOR_voidInit>
	ULTRASONIC_SENSOR_voidInit();
    33a8:	0e 94 35 10 	call	0x206a	; 0x206a <ULTRASONIC_SENSOR_voidInit>
	MOTORS_CAR_voidInit();
    33ac:	0e 94 87 13 	call	0x270e	; 0x270e <MOTORS_CAR_voidInit>
	Mid_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    33b0:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    33b4:	90 93 c0 01 	sts	0x01C0, r25
    33b8:	80 93 bf 01 	sts	0x01BF, r24
	LCD_voidWriteString("Autonomous car ");
    33bc:	80 e6       	ldi	r24, 0x60	; 96
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
	LCD_voidGoToPosition(1,0);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_voidGoToPosition>
	LCD_voidWriteString("      IS ON");
    33cc:	80 e7       	ldi	r24, 0x70	; 112
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
    33d4:	fe 01       	movw	r30, r28
    33d6:	ef 53       	subi	r30, 0x3F	; 63
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	aa ef       	ldi	r26, 0xFA	; 250
    33e0:	b4 e4       	ldi	r27, 0x44	; 68
    33e2:	80 83       	st	Z, r24
    33e4:	91 83       	std	Z+1, r25	; 0x01
    33e6:	a2 83       	std	Z+2, r26	; 0x02
    33e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	8e 01       	movw	r16, r28
    33ec:	03 54       	subi	r16, 0x43	; 67
    33ee:	1f 4f       	sbci	r17, 0xFF	; 255
    33f0:	fe 01       	movw	r30, r28
    33f2:	ef 53       	subi	r30, 0x3F	; 63
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	60 81       	ld	r22, Z
    33f8:	71 81       	ldd	r23, Z+1	; 0x01
    33fa:	82 81       	ldd	r24, Z+2	; 0x02
    33fc:	93 81       	ldd	r25, Z+3	; 0x03
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a e7       	ldi	r20, 0x7A	; 122
    3404:	55 e4       	ldi	r21, 0x45	; 69
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	f8 01       	movw	r30, r16
    3410:	80 83       	st	Z, r24
    3412:	91 83       	std	Z+1, r25	; 0x01
    3414:	a2 83       	std	Z+2, r26	; 0x02
    3416:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3418:	fe 01       	movw	r30, r28
    341a:	e3 54       	subi	r30, 0x43	; 67
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	60 81       	ld	r22, Z
    3420:	71 81       	ldd	r23, Z+1	; 0x01
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	93 81       	ldd	r25, Z+3	; 0x03
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	44 f4       	brge	.+16     	; 0x3446 <main+0xc4>
		__ticks = 1;
    3436:	fe 01       	movw	r30, r28
    3438:	e5 54       	subi	r30, 0x45	; 69
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
    3444:	64 c0       	rjmp	.+200    	; 0x350e <main+0x18c>
	else if (__tmp > 65535)
    3446:	fe 01       	movw	r30, r28
    3448:	e3 54       	subi	r30, 0x43	; 67
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	0c f0       	brlt	.+2      	; 0x3466 <main+0xe4>
    3464:	43 c0       	rjmp	.+134    	; 0x34ec <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	fe 01       	movw	r30, r28
    3468:	ef 53       	subi	r30, 0x3F	; 63
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e2       	ldi	r20, 0x20	; 32
    347a:	51 e4       	ldi	r21, 0x41	; 65
    347c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	8e 01       	movw	r16, r28
    3486:	05 54       	subi	r16, 0x45	; 69
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
    348a:	bc 01       	movw	r22, r24
    348c:	cd 01       	movw	r24, r26
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	f8 01       	movw	r30, r16
    3498:	91 83       	std	Z+1, r25	; 0x01
    349a:	80 83       	st	Z, r24
    349c:	1f c0       	rjmp	.+62     	; 0x34dc <main+0x15a>
    349e:	fe 01       	movw	r30, r28
    34a0:	e7 54       	subi	r30, 0x47	; 71
    34a2:	ff 4f       	sbci	r31, 0xFF	; 255
    34a4:	80 e9       	ldi	r24, 0x90	; 144
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
    34ac:	fe 01       	movw	r30, r28
    34ae:	e7 54       	subi	r30, 0x47	; 71
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	91 81       	ldd	r25, Z+1	; 0x01
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <main+0x134>
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 54       	subi	r30, 0x47	; 71
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34c4:	de 01       	movw	r26, r28
    34c6:	a5 54       	subi	r26, 0x45	; 69
    34c8:	bf 4f       	sbci	r27, 0xFF	; 255
    34ca:	fe 01       	movw	r30, r28
    34cc:	e5 54       	subi	r30, 0x45	; 69
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	80 81       	ld	r24, Z
    34d2:	91 81       	ldd	r25, Z+1	; 0x01
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	11 96       	adiw	r26, 0x01	; 1
    34d8:	9c 93       	st	X, r25
    34da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34dc:	fe 01       	movw	r30, r28
    34de:	e5 54       	subi	r30, 0x45	; 69
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	d1 f6       	brne	.-76     	; 0x349e <main+0x11c>
    34ea:	27 c0       	rjmp	.+78     	; 0x353a <main+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ec:	8e 01       	movw	r16, r28
    34ee:	05 54       	subi	r16, 0x45	; 69
    34f0:	1f 4f       	sbci	r17, 0xFF	; 255
    34f2:	fe 01       	movw	r30, r28
    34f4:	e3 54       	subi	r30, 0x43	; 67
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	60 81       	ld	r22, Z
    34fa:	71 81       	ldd	r23, Z+1	; 0x01
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	93 81       	ldd	r25, Z+3	; 0x03
    3500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	f8 01       	movw	r30, r16
    350a:	91 83       	std	Z+1, r25	; 0x01
    350c:	80 83       	st	Z, r24
    350e:	de 01       	movw	r26, r28
    3510:	a9 54       	subi	r26, 0x49	; 73
    3512:	bf 4f       	sbci	r27, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	e5 54       	subi	r30, 0x45	; 69
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	8d 93       	st	X+, r24
    3520:	9c 93       	st	X, r25
    3522:	fe 01       	movw	r30, r28
    3524:	e9 54       	subi	r30, 0x49	; 73
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	91 81       	ldd	r25, Z+1	; 0x01
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	f1 f7       	brne	.-4      	; 0x352c <main+0x1aa>
    3530:	fe 01       	movw	r30, r28
    3532:	e9 54       	subi	r30, 0x49	; 73
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
	_delay_ms(2000);
	states=Forward;
    353a:	10 92 ba 01 	sts	0x01BA, r1
	while(1){
		LCD_voidClearScreen();
    353e:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_voidClearScreen>
		switch(states){
    3542:	80 91 ba 01 	lds	r24, 0x01BA
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	cb 53       	subi	r28, 0x3B	; 59
    354c:	df 4f       	sbci	r29, 0xFF	; 255
    354e:	39 83       	std	Y+1, r19	; 0x01
    3550:	28 83       	st	Y, r18
    3552:	c5 5c       	subi	r28, 0xC5	; 197
    3554:	d0 40       	sbci	r29, 0x00	; 0
    3556:	cb 53       	subi	r28, 0x3B	; 59
    3558:	df 4f       	sbci	r29, 0xFF	; 255
    355a:	88 81       	ld	r24, Y
    355c:	99 81       	ldd	r25, Y+1	; 0x01
    355e:	c5 5c       	subi	r28, 0xC5	; 197
    3560:	d0 40       	sbci	r29, 0x00	; 0
    3562:	81 30       	cpi	r24, 0x01	; 1
    3564:	91 05       	cpc	r25, r1
    3566:	09 f4       	brne	.+2      	; 0x356a <main+0x1e8>
    3568:	4b c3       	rjmp	.+1686   	; 0x3c00 <main+0x87e>
    356a:	cb 53       	subi	r28, 0x3B	; 59
    356c:	df 4f       	sbci	r29, 0xFF	; 255
    356e:	e8 81       	ld	r30, Y
    3570:	f9 81       	ldd	r31, Y+1	; 0x01
    3572:	c5 5c       	subi	r28, 0xC5	; 197
    3574:	d0 40       	sbci	r29, 0x00	; 0
    3576:	e2 30       	cpi	r30, 0x02	; 2
    3578:	f1 05       	cpc	r31, r1
    357a:	54 f4       	brge	.+20     	; 0x3590 <main+0x20e>
    357c:	cb 53       	subi	r28, 0x3B	; 59
    357e:	df 4f       	sbci	r29, 0xFF	; 255
    3580:	28 81       	ld	r18, Y
    3582:	39 81       	ldd	r19, Y+1	; 0x01
    3584:	c5 5c       	subi	r28, 0xC5	; 197
    3586:	d0 40       	sbci	r29, 0x00	; 0
    3588:	21 15       	cp	r18, r1
    358a:	31 05       	cpc	r19, r1
    358c:	b1 f0       	breq	.+44     	; 0x35ba <main+0x238>
    358e:	d7 cf       	rjmp	.-82     	; 0x353e <main+0x1bc>
    3590:	cb 53       	subi	r28, 0x3B	; 59
    3592:	df 4f       	sbci	r29, 0xFF	; 255
    3594:	88 81       	ld	r24, Y
    3596:	99 81       	ldd	r25, Y+1	; 0x01
    3598:	c5 5c       	subi	r28, 0xC5	; 197
    359a:	d0 40       	sbci	r29, 0x00	; 0
    359c:	82 30       	cpi	r24, 0x02	; 2
    359e:	91 05       	cpc	r25, r1
    35a0:	09 f4       	brne	.+2      	; 0x35a4 <main+0x222>
    35a2:	a2 c4       	rjmp	.+2372   	; 0x3ee8 <main+0xb66>
    35a4:	cb 53       	subi	r28, 0x3B	; 59
    35a6:	df 4f       	sbci	r29, 0xFF	; 255
    35a8:	e8 81       	ld	r30, Y
    35aa:	f9 81       	ldd	r31, Y+1	; 0x01
    35ac:	c5 5c       	subi	r28, 0xC5	; 197
    35ae:	d0 40       	sbci	r29, 0x00	; 0
    35b0:	e3 30       	cpi	r30, 0x03	; 3
    35b2:	f1 05       	cpc	r31, r1
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <main+0x236>
    35b6:	0c c6       	rjmp	.+3096   	; 0x41d0 <main+0xe4e>
    35b8:	c2 cf       	rjmp	.-124    	; 0x353e <main+0x1bc>
		case Forward:
			LCD_voidWriteString("FORWARD ");
    35ba:	8c e7       	ldi	r24, 0x7C	; 124
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
			SERVO_MOTOR_voidRotateMiddle();
    35c2:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SERVO_MOTOR_voidRotateMiddle>
			Mid_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    35c6:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    35ca:	90 93 c0 01 	sts	0x01C0, r25
    35ce:	80 93 bf 01 	sts	0x01BF, r24
			if(Mid_Distance<=40&&Mid_Distance>0){
    35d2:	80 91 bf 01 	lds	r24, 0x01BF
    35d6:	90 91 c0 01 	lds	r25, 0x01C0
    35da:	89 32       	cpi	r24, 0x29	; 41
    35dc:	91 05       	cpc	r25, r1
    35de:	08 f0       	brcs	.+2      	; 0x35e2 <main+0x260>
    35e0:	0c c3       	rjmp	.+1560   	; 0x3bfa <main+0x878>
    35e2:	80 91 bf 01 	lds	r24, 0x01BF
    35e6:	90 91 c0 01 	lds	r25, 0x01C0
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <main+0x26e>
    35ee:	05 c3       	rjmp	.+1546   	; 0x3bfa <main+0x878>
				MOTORS_CAR_voidStop();
    35f0:	0e 94 22 14 	call	0x2844	; 0x2844 <MOTORS_CAR_voidStop>
				SERVO_MOTOR_voidRotateRight();
    35f4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <SERVO_MOTOR_voidRotateRight>
    35f8:	fe 01       	movw	r30, r28
    35fa:	ed 54       	subi	r30, 0x4D	; 77
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	aa e7       	ldi	r26, 0x7A	; 122
    3604:	b4 e4       	ldi	r27, 0x44	; 68
    3606:	80 83       	st	Z, r24
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	a2 83       	std	Z+2, r26	; 0x02
    360c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	8e 01       	movw	r16, r28
    3610:	01 55       	subi	r16, 0x51	; 81
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	fe 01       	movw	r30, r28
    3616:	ed 54       	subi	r30, 0x4D	; 77
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a e7       	ldi	r20, 0x7A	; 122
    3628:	55 e4       	ldi	r21, 0x45	; 69
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	f8 01       	movw	r30, r16
    3634:	80 83       	st	Z, r24
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	a2 83       	std	Z+2, r26	; 0x02
    363a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    363c:	fe 01       	movw	r30, r28
    363e:	e1 55       	subi	r30, 0x51	; 81
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	60 81       	ld	r22, Z
    3644:	71 81       	ldd	r23, Z+1	; 0x01
    3646:	82 81       	ldd	r24, Z+2	; 0x02
    3648:	93 81       	ldd	r25, Z+3	; 0x03
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	44 f4       	brge	.+16     	; 0x366a <main+0x2e8>
		__ticks = 1;
    365a:	fe 01       	movw	r30, r28
    365c:	e3 55       	subi	r30, 0x53	; 83
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	64 c0       	rjmp	.+200    	; 0x3732 <main+0x3b0>
	else if (__tmp > 65535)
    366a:	fe 01       	movw	r30, r28
    366c:	e1 55       	subi	r30, 0x51	; 81
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	3f ef       	ldi	r19, 0xFF	; 255
    367c:	4f e7       	ldi	r20, 0x7F	; 127
    367e:	57 e4       	ldi	r21, 0x47	; 71
    3680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3684:	18 16       	cp	r1, r24
    3686:	0c f0       	brlt	.+2      	; 0x368a <main+0x308>
    3688:	43 c0       	rjmp	.+134    	; 0x3710 <main+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368a:	fe 01       	movw	r30, r28
    368c:	ed 54       	subi	r30, 0x4D	; 77
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	8e 01       	movw	r16, r28
    36aa:	03 55       	subi	r16, 0x53	; 83
    36ac:	1f 4f       	sbci	r17, 0xFF	; 255
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	f8 01       	movw	r30, r16
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
    36c0:	1f c0       	rjmp	.+62     	; 0x3700 <main+0x37e>
    36c2:	fe 01       	movw	r30, r28
    36c4:	e5 55       	subi	r30, 0x55	; 85
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	80 e9       	ldi	r24, 0x90	; 144
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	fe 01       	movw	r30, r28
    36d2:	e5 55       	subi	r30, 0x55	; 85
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <main+0x358>
    36de:	fe 01       	movw	r30, r28
    36e0:	e5 55       	subi	r30, 0x55	; 85
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e8:	de 01       	movw	r26, r28
    36ea:	a3 55       	subi	r26, 0x53	; 83
    36ec:	bf 4f       	sbci	r27, 0xFF	; 255
    36ee:	fe 01       	movw	r30, r28
    36f0:	e3 55       	subi	r30, 0x53	; 83
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	11 96       	adiw	r26, 0x01	; 1
    36fc:	9c 93       	st	X, r25
    36fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3700:	fe 01       	movw	r30, r28
    3702:	e3 55       	subi	r30, 0x53	; 83
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	d1 f6       	brne	.-76     	; 0x36c2 <main+0x340>
    370e:	27 c0       	rjmp	.+78     	; 0x375e <main+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	8e 01       	movw	r16, r28
    3712:	03 55       	subi	r16, 0x53	; 83
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
    3716:	fe 01       	movw	r30, r28
    3718:	e1 55       	subi	r30, 0x51	; 81
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	f8 01       	movw	r30, r16
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	de 01       	movw	r26, r28
    3734:	a7 55       	subi	r26, 0x57	; 87
    3736:	bf 4f       	sbci	r27, 0xFF	; 255
    3738:	fe 01       	movw	r30, r28
    373a:	e3 55       	subi	r30, 0x53	; 83
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	8d 93       	st	X+, r24
    3744:	9c 93       	st	X, r25
    3746:	fe 01       	movw	r30, r28
    3748:	e7 55       	subi	r30, 0x57	; 87
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <main+0x3ce>
    3754:	fe 01       	movw	r30, r28
    3756:	e7 55       	subi	r30, 0x57	; 87
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	80 83       	st	Z, r24
				_delay_ms(1000);
				Right_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    375e:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    3762:	90 93 be 01 	sts	0x01BE, r25
    3766:	80 93 bd 01 	sts	0x01BD, r24
    376a:	fe 01       	movw	r30, r28
    376c:	eb 55       	subi	r30, 0x5B	; 91
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	aa e7       	ldi	r26, 0x7A	; 122
    3776:	b4 e4       	ldi	r27, 0x44	; 68
    3778:	80 83       	st	Z, r24
    377a:	91 83       	std	Z+1, r25	; 0x01
    377c:	a2 83       	std	Z+2, r26	; 0x02
    377e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3780:	8e 01       	movw	r16, r28
    3782:	0f 55       	subi	r16, 0x5F	; 95
    3784:	1f 4f       	sbci	r17, 0xFF	; 255
    3786:	fe 01       	movw	r30, r28
    3788:	eb 55       	subi	r30, 0x5B	; 91
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	60 81       	ld	r22, Z
    378e:	71 81       	ldd	r23, Z+1	; 0x01
    3790:	82 81       	ldd	r24, Z+2	; 0x02
    3792:	93 81       	ldd	r25, Z+3	; 0x03
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	4a e7       	ldi	r20, 0x7A	; 122
    379a:	55 e4       	ldi	r21, 0x45	; 69
    379c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	f8 01       	movw	r30, r16
    37a6:	80 83       	st	Z, r24
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	a2 83       	std	Z+2, r26	; 0x02
    37ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ae:	fe 01       	movw	r30, r28
    37b0:	ef 55       	subi	r30, 0x5F	; 95
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	60 81       	ld	r22, Z
    37b6:	71 81       	ldd	r23, Z+1	; 0x01
    37b8:	82 81       	ldd	r24, Z+2	; 0x02
    37ba:	93 81       	ldd	r25, Z+3	; 0x03
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e8       	ldi	r20, 0x80	; 128
    37c2:	5f e3       	ldi	r21, 0x3F	; 63
    37c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c8:	88 23       	and	r24, r24
    37ca:	44 f4       	brge	.+16     	; 0x37dc <main+0x45a>
		__ticks = 1;
    37cc:	fe 01       	movw	r30, r28
    37ce:	e1 56       	subi	r30, 0x61	; 97
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	91 83       	std	Z+1, r25	; 0x01
    37d8:	80 83       	st	Z, r24
    37da:	64 c0       	rjmp	.+200    	; 0x38a4 <main+0x522>
	else if (__tmp > 65535)
    37dc:	fe 01       	movw	r30, r28
    37de:	ef 55       	subi	r30, 0x5F	; 95
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	60 81       	ld	r22, Z
    37e4:	71 81       	ldd	r23, Z+1	; 0x01
    37e6:	82 81       	ldd	r24, Z+2	; 0x02
    37e8:	93 81       	ldd	r25, Z+3	; 0x03
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	3f ef       	ldi	r19, 0xFF	; 255
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	57 e4       	ldi	r21, 0x47	; 71
    37f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f6:	18 16       	cp	r1, r24
    37f8:	0c f0       	brlt	.+2      	; 0x37fc <main+0x47a>
    37fa:	43 c0       	rjmp	.+134    	; 0x3882 <main+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fc:	fe 01       	movw	r30, r28
    37fe:	eb 55       	subi	r30, 0x5B	; 91
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	60 81       	ld	r22, Z
    3804:	71 81       	ldd	r23, Z+1	; 0x01
    3806:	82 81       	ldd	r24, Z+2	; 0x02
    3808:	93 81       	ldd	r25, Z+3	; 0x03
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	30 e0       	ldi	r19, 0x00	; 0
    380e:	40 e2       	ldi	r20, 0x20	; 32
    3810:	51 e4       	ldi	r21, 0x41	; 65
    3812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	8e 01       	movw	r16, r28
    381c:	01 56       	subi	r16, 0x61	; 97
    381e:	1f 4f       	sbci	r17, 0xFF	; 255
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	f8 01       	movw	r30, r16
    382e:	91 83       	std	Z+1, r25	; 0x01
    3830:	80 83       	st	Z, r24
    3832:	1f c0       	rjmp	.+62     	; 0x3872 <main+0x4f0>
    3834:	fe 01       	movw	r30, r28
    3836:	e3 56       	subi	r30, 0x63	; 99
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 e9       	ldi	r24, 0x90	; 144
    383c:	91 e0       	ldi	r25, 0x01	; 1
    383e:	91 83       	std	Z+1, r25	; 0x01
    3840:	80 83       	st	Z, r24
    3842:	fe 01       	movw	r30, r28
    3844:	e3 56       	subi	r30, 0x63	; 99
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	91 81       	ldd	r25, Z+1	; 0x01
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	f1 f7       	brne	.-4      	; 0x384c <main+0x4ca>
    3850:	fe 01       	movw	r30, r28
    3852:	e3 56       	subi	r30, 0x63	; 99
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    385a:	de 01       	movw	r26, r28
    385c:	a1 56       	subi	r26, 0x61	; 97
    385e:	bf 4f       	sbci	r27, 0xFF	; 255
    3860:	fe 01       	movw	r30, r28
    3862:	e1 56       	subi	r30, 0x61	; 97
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	80 81       	ld	r24, Z
    3868:	91 81       	ldd	r25, Z+1	; 0x01
    386a:	01 97       	sbiw	r24, 0x01	; 1
    386c:	11 96       	adiw	r26, 0x01	; 1
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3872:	fe 01       	movw	r30, r28
    3874:	e1 56       	subi	r30, 0x61	; 97
    3876:	ff 4f       	sbci	r31, 0xFF	; 255
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	d1 f6       	brne	.-76     	; 0x3834 <main+0x4b2>
    3880:	27 c0       	rjmp	.+78     	; 0x38d0 <main+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	8e 01       	movw	r16, r28
    3884:	01 56       	subi	r16, 0x61	; 97
    3886:	1f 4f       	sbci	r17, 0xFF	; 255
    3888:	fe 01       	movw	r30, r28
    388a:	ef 55       	subi	r30, 0x5F	; 95
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	f8 01       	movw	r30, r16
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	80 83       	st	Z, r24
    38a4:	de 01       	movw	r26, r28
    38a6:	a5 56       	subi	r26, 0x65	; 101
    38a8:	bf 4f       	sbci	r27, 0xFF	; 255
    38aa:	fe 01       	movw	r30, r28
    38ac:	e1 56       	subi	r30, 0x61	; 97
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	80 81       	ld	r24, Z
    38b2:	91 81       	ldd	r25, Z+1	; 0x01
    38b4:	8d 93       	st	X+, r24
    38b6:	9c 93       	st	X, r25
    38b8:	fe 01       	movw	r30, r28
    38ba:	e5 56       	subi	r30, 0x65	; 101
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	91 81       	ldd	r25, Z+1	; 0x01
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <main+0x540>
    38c6:	fe 01       	movw	r30, r28
    38c8:	e5 56       	subi	r30, 0x65	; 101
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
				_delay_ms(1000);
				SERVO_MOTOR_voidRotateLeft();
    38d0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <SERVO_MOTOR_voidRotateLeft>
    38d4:	fe 01       	movw	r30, r28
    38d6:	e9 56       	subi	r30, 0x69	; 105
    38d8:	ff 4f       	sbci	r31, 0xFF	; 255
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	aa e7       	ldi	r26, 0x7A	; 122
    38e0:	b4 e4       	ldi	r27, 0x44	; 68
    38e2:	80 83       	st	Z, r24
    38e4:	91 83       	std	Z+1, r25	; 0x01
    38e6:	a2 83       	std	Z+2, r26	; 0x02
    38e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ea:	8e 01       	movw	r16, r28
    38ec:	0d 56       	subi	r16, 0x6D	; 109
    38ee:	1f 4f       	sbci	r17, 0xFF	; 255
    38f0:	fe 01       	movw	r30, r28
    38f2:	e9 56       	subi	r30, 0x69	; 105
    38f4:	ff 4f       	sbci	r31, 0xFF	; 255
    38f6:	60 81       	ld	r22, Z
    38f8:	71 81       	ldd	r23, Z+1	; 0x01
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e0       	ldi	r19, 0x00	; 0
    3902:	4a e7       	ldi	r20, 0x7A	; 122
    3904:	55 e4       	ldi	r21, 0x45	; 69
    3906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    390a:	dc 01       	movw	r26, r24
    390c:	cb 01       	movw	r24, r22
    390e:	f8 01       	movw	r30, r16
    3910:	80 83       	st	Z, r24
    3912:	91 83       	std	Z+1, r25	; 0x01
    3914:	a2 83       	std	Z+2, r26	; 0x02
    3916:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3918:	fe 01       	movw	r30, r28
    391a:	ed 56       	subi	r30, 0x6D	; 109
    391c:	ff 4f       	sbci	r31, 0xFF	; 255
    391e:	60 81       	ld	r22, Z
    3920:	71 81       	ldd	r23, Z+1	; 0x01
    3922:	82 81       	ldd	r24, Z+2	; 0x02
    3924:	93 81       	ldd	r25, Z+3	; 0x03
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	40 e8       	ldi	r20, 0x80	; 128
    392c:	5f e3       	ldi	r21, 0x3F	; 63
    392e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3932:	88 23       	and	r24, r24
    3934:	44 f4       	brge	.+16     	; 0x3946 <main+0x5c4>
		__ticks = 1;
    3936:	fe 01       	movw	r30, r28
    3938:	ef 56       	subi	r30, 0x6F	; 111
    393a:	ff 4f       	sbci	r31, 0xFF	; 255
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	91 83       	std	Z+1, r25	; 0x01
    3942:	80 83       	st	Z, r24
    3944:	64 c0       	rjmp	.+200    	; 0x3a0e <main+0x68c>
	else if (__tmp > 65535)
    3946:	fe 01       	movw	r30, r28
    3948:	ed 56       	subi	r30, 0x6D	; 109
    394a:	ff 4f       	sbci	r31, 0xFF	; 255
    394c:	60 81       	ld	r22, Z
    394e:	71 81       	ldd	r23, Z+1	; 0x01
    3950:	82 81       	ldd	r24, Z+2	; 0x02
    3952:	93 81       	ldd	r25, Z+3	; 0x03
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	0c f0       	brlt	.+2      	; 0x3966 <main+0x5e4>
    3964:	43 c0       	rjmp	.+134    	; 0x39ec <main+0x66a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3966:	fe 01       	movw	r30, r28
    3968:	e9 56       	subi	r30, 0x69	; 105
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	60 81       	ld	r22, Z
    396e:	71 81       	ldd	r23, Z+1	; 0x01
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	93 81       	ldd	r25, Z+3	; 0x03
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8e 01       	movw	r16, r28
    3986:	0f 56       	subi	r16, 0x6F	; 111
    3988:	1f 4f       	sbci	r17, 0xFF	; 255
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	f8 01       	movw	r30, r16
    3998:	91 83       	std	Z+1, r25	; 0x01
    399a:	80 83       	st	Z, r24
    399c:	1f c0       	rjmp	.+62     	; 0x39dc <main+0x65a>
    399e:	fe 01       	movw	r30, r28
    39a0:	e1 57       	subi	r30, 0x71	; 113
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	80 e9       	ldi	r24, 0x90	; 144
    39a6:	91 e0       	ldi	r25, 0x01	; 1
    39a8:	91 83       	std	Z+1, r25	; 0x01
    39aa:	80 83       	st	Z, r24
    39ac:	fe 01       	movw	r30, r28
    39ae:	e1 57       	subi	r30, 0x71	; 113
    39b0:	ff 4f       	sbci	r31, 0xFF	; 255
    39b2:	80 81       	ld	r24, Z
    39b4:	91 81       	ldd	r25, Z+1	; 0x01
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	f1 f7       	brne	.-4      	; 0x39b6 <main+0x634>
    39ba:	fe 01       	movw	r30, r28
    39bc:	e1 57       	subi	r30, 0x71	; 113
    39be:	ff 4f       	sbci	r31, 0xFF	; 255
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c4:	de 01       	movw	r26, r28
    39c6:	af 56       	subi	r26, 0x6F	; 111
    39c8:	bf 4f       	sbci	r27, 0xFF	; 255
    39ca:	fe 01       	movw	r30, r28
    39cc:	ef 56       	subi	r30, 0x6F	; 111
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	80 81       	ld	r24, Z
    39d2:	91 81       	ldd	r25, Z+1	; 0x01
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	11 96       	adiw	r26, 0x01	; 1
    39d8:	9c 93       	st	X, r25
    39da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39dc:	fe 01       	movw	r30, r28
    39de:	ef 56       	subi	r30, 0x6F	; 111
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	91 81       	ldd	r25, Z+1	; 0x01
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	d1 f6       	brne	.-76     	; 0x399e <main+0x61c>
    39ea:	27 c0       	rjmp	.+78     	; 0x3a3a <main+0x6b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ec:	8e 01       	movw	r16, r28
    39ee:	0f 56       	subi	r16, 0x6F	; 111
    39f0:	1f 4f       	sbci	r17, 0xFF	; 255
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 56       	subi	r30, 0x6D	; 109
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	60 81       	ld	r22, Z
    39fa:	71 81       	ldd	r23, Z+1	; 0x01
    39fc:	82 81       	ldd	r24, Z+2	; 0x02
    39fe:	93 81       	ldd	r25, Z+3	; 0x03
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	f8 01       	movw	r30, r16
    3a0a:	91 83       	std	Z+1, r25	; 0x01
    3a0c:	80 83       	st	Z, r24
    3a0e:	de 01       	movw	r26, r28
    3a10:	a3 57       	subi	r26, 0x73	; 115
    3a12:	bf 4f       	sbci	r27, 0xFF	; 255
    3a14:	fe 01       	movw	r30, r28
    3a16:	ef 56       	subi	r30, 0x6F	; 111
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	91 81       	ldd	r25, Z+1	; 0x01
    3a1e:	8d 93       	st	X+, r24
    3a20:	9c 93       	st	X, r25
    3a22:	fe 01       	movw	r30, r28
    3a24:	e3 57       	subi	r30, 0x73	; 115
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	91 81       	ldd	r25, Z+1	; 0x01
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <main+0x6aa>
    3a30:	fe 01       	movw	r30, r28
    3a32:	e3 57       	subi	r30, 0x73	; 115
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	80 83       	st	Z, r24
				_delay_ms(1000);
				Left_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    3a3a:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    3a3e:	90 93 bc 01 	sts	0x01BC, r25
    3a42:	80 93 bb 01 	sts	0x01BB, r24
    3a46:	fe 01       	movw	r30, r28
    3a48:	e7 57       	subi	r30, 0x77	; 119
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	aa e7       	ldi	r26, 0x7A	; 122
    3a52:	b4 e4       	ldi	r27, 0x44	; 68
    3a54:	80 83       	st	Z, r24
    3a56:	91 83       	std	Z+1, r25	; 0x01
    3a58:	a2 83       	std	Z+2, r26	; 0x02
    3a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5c:	8e 01       	movw	r16, r28
    3a5e:	0b 57       	subi	r16, 0x7B	; 123
    3a60:	1f 4f       	sbci	r17, 0xFF	; 255
    3a62:	fe 01       	movw	r30, r28
    3a64:	e7 57       	subi	r30, 0x77	; 119
    3a66:	ff 4f       	sbci	r31, 0xFF	; 255
    3a68:	60 81       	ld	r22, Z
    3a6a:	71 81       	ldd	r23, Z+1	; 0x01
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	4a e7       	ldi	r20, 0x7A	; 122
    3a76:	55 e4       	ldi	r21, 0x45	; 69
    3a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	f8 01       	movw	r30, r16
    3a82:	80 83       	st	Z, r24
    3a84:	91 83       	std	Z+1, r25	; 0x01
    3a86:	a2 83       	std	Z+2, r26	; 0x02
    3a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	eb 57       	subi	r30, 0x7B	; 123
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	60 81       	ld	r22, Z
    3a92:	71 81       	ldd	r23, Z+1	; 0x01
    3a94:	82 81       	ldd	r24, Z+2	; 0x02
    3a96:	93 81       	ldd	r25, Z+3	; 0x03
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e8       	ldi	r20, 0x80	; 128
    3a9e:	5f e3       	ldi	r21, 0x3F	; 63
    3aa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aa4:	88 23       	and	r24, r24
    3aa6:	44 f4       	brge	.+16     	; 0x3ab8 <main+0x736>
		__ticks = 1;
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	ed 57       	subi	r30, 0x7D	; 125
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	80 83       	st	Z, r24
    3ab6:	64 c0       	rjmp	.+200    	; 0x3b80 <main+0x7fe>
	else if (__tmp > 65535)
    3ab8:	fe 01       	movw	r30, r28
    3aba:	eb 57       	subi	r30, 0x7B	; 123
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	60 81       	ld	r22, Z
    3ac0:	71 81       	ldd	r23, Z+1	; 0x01
    3ac2:	82 81       	ldd	r24, Z+2	; 0x02
    3ac4:	93 81       	ldd	r25, Z+3	; 0x03
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	3f ef       	ldi	r19, 0xFF	; 255
    3aca:	4f e7       	ldi	r20, 0x7F	; 127
    3acc:	57 e4       	ldi	r21, 0x47	; 71
    3ace:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad2:	18 16       	cp	r1, r24
    3ad4:	0c f0       	brlt	.+2      	; 0x3ad8 <main+0x756>
    3ad6:	43 c0       	rjmp	.+134    	; 0x3b5e <main+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad8:	fe 01       	movw	r30, r28
    3ada:	e7 57       	subi	r30, 0x77	; 119
    3adc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ade:	60 81       	ld	r22, Z
    3ae0:	71 81       	ldd	r23, Z+1	; 0x01
    3ae2:	82 81       	ldd	r24, Z+2	; 0x02
    3ae4:	93 81       	ldd	r25, Z+3	; 0x03
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	8e 01       	movw	r16, r28
    3af8:	0d 57       	subi	r16, 0x7D	; 125
    3afa:	1f 4f       	sbci	r17, 0xFF	; 255
    3afc:	bc 01       	movw	r22, r24
    3afe:	cd 01       	movw	r24, r26
    3b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	f8 01       	movw	r30, r16
    3b0a:	91 83       	std	Z+1, r25	; 0x01
    3b0c:	80 83       	st	Z, r24
    3b0e:	1f c0       	rjmp	.+62     	; 0x3b4e <main+0x7cc>
    3b10:	fe 01       	movw	r30, r28
    3b12:	ef 57       	subi	r30, 0x7F	; 127
    3b14:	ff 4f       	sbci	r31, 0xFF	; 255
    3b16:	80 e9       	ldi	r24, 0x90	; 144
    3b18:	91 e0       	ldi	r25, 0x01	; 1
    3b1a:	91 83       	std	Z+1, r25	; 0x01
    3b1c:	80 83       	st	Z, r24
    3b1e:	fe 01       	movw	r30, r28
    3b20:	ef 57       	subi	r30, 0x7F	; 127
    3b22:	ff 4f       	sbci	r31, 0xFF	; 255
    3b24:	80 81       	ld	r24, Z
    3b26:	91 81       	ldd	r25, Z+1	; 0x01
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	f1 f7       	brne	.-4      	; 0x3b28 <main+0x7a6>
    3b2c:	fe 01       	movw	r30, r28
    3b2e:	ef 57       	subi	r30, 0x7F	; 127
    3b30:	ff 4f       	sbci	r31, 0xFF	; 255
    3b32:	91 83       	std	Z+1, r25	; 0x01
    3b34:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b36:	de 01       	movw	r26, r28
    3b38:	ad 57       	subi	r26, 0x7D	; 125
    3b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	ed 57       	subi	r30, 0x7D	; 125
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	11 96       	adiw	r26, 0x01	; 1
    3b4a:	9c 93       	st	X, r25
    3b4c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4e:	fe 01       	movw	r30, r28
    3b50:	ed 57       	subi	r30, 0x7D	; 125
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	80 81       	ld	r24, Z
    3b56:	91 81       	ldd	r25, Z+1	; 0x01
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	d1 f6       	brne	.-76     	; 0x3b10 <main+0x78e>
    3b5c:	28 c0       	rjmp	.+80     	; 0x3bae <main+0x82c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5e:	8e 01       	movw	r16, r28
    3b60:	0d 57       	subi	r16, 0x7D	; 125
    3b62:	1f 4f       	sbci	r17, 0xFF	; 255
    3b64:	fe 01       	movw	r30, r28
    3b66:	eb 57       	subi	r30, 0x7B	; 123
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	60 81       	ld	r22, Z
    3b6c:	71 81       	ldd	r23, Z+1	; 0x01
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	93 81       	ldd	r25, Z+3	; 0x03
    3b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b76:	dc 01       	movw	r26, r24
    3b78:	cb 01       	movw	r24, r22
    3b7a:	f8 01       	movw	r30, r16
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
    3b80:	de 01       	movw	r26, r28
    3b82:	a1 58       	subi	r26, 0x81	; 129
    3b84:	bf 4f       	sbci	r27, 0xFF	; 255
    3b86:	fe 01       	movw	r30, r28
    3b88:	ed 57       	subi	r30, 0x7D	; 125
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	11 96       	adiw	r26, 0x01	; 1
    3b92:	9c 93       	st	X, r25
    3b94:	8e 93       	st	-X, r24
    3b96:	fe 01       	movw	r30, r28
    3b98:	e1 58       	subi	r30, 0x81	; 129
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	f1 f7       	brne	.-4      	; 0x3ba0 <main+0x81e>
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e1 58       	subi	r30, 0x81	; 129
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
				_delay_ms(1000);
				if(Right_Distance>40||Right_Distance==0){
    3bae:	80 91 bd 01 	lds	r24, 0x01BD
    3bb2:	90 91 be 01 	lds	r25, 0x01BE
    3bb6:	89 32       	cpi	r24, 0x29	; 41
    3bb8:	91 05       	cpc	r25, r1
    3bba:	30 f4       	brcc	.+12     	; 0x3bc8 <main+0x846>
    3bbc:	80 91 bd 01 	lds	r24, 0x01BD
    3bc0:	90 91 be 01 	lds	r25, 0x01BE
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <main+0x84e>
					states=Right;
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	80 93 ba 01 	sts	0x01BA, r24
    3bce:	b7 cc       	rjmp	.-1682   	; 0x353e <main+0x1bc>
				}
				else if (Left_Distance>40||Left_Distance==0){
    3bd0:	80 91 bb 01 	lds	r24, 0x01BB
    3bd4:	90 91 bc 01 	lds	r25, 0x01BC
    3bd8:	89 32       	cpi	r24, 0x29	; 41
    3bda:	91 05       	cpc	r25, r1
    3bdc:	30 f4       	brcc	.+12     	; 0x3bea <main+0x868>
    3bde:	80 91 bb 01 	lds	r24, 0x01BB
    3be2:	90 91 bc 01 	lds	r25, 0x01BC
    3be6:	00 97       	sbiw	r24, 0x00	; 0
    3be8:	21 f4       	brne	.+8      	; 0x3bf2 <main+0x870>
					states=Left;
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	80 93 ba 01 	sts	0x01BA, r24
    3bf0:	a6 cc       	rjmp	.-1716   	; 0x353e <main+0x1bc>
				}
				else{
					states=Back;
    3bf2:	83 e0       	ldi	r24, 0x03	; 3
    3bf4:	80 93 ba 01 	sts	0x01BA, r24
    3bf8:	a2 cc       	rjmp	.-1724   	; 0x353e <main+0x1bc>
				}
			}
			else{
				MOTORS_CAR_voidForward();
    3bfa:	0e 94 b6 13 	call	0x276c	; 0x276c <MOTORS_CAR_voidForward>
    3bfe:	9f cc       	rjmp	.-1730   	; 0x353e <main+0x1bc>
			}
			break;
		case Right:
			LCD_voidWriteString("RIGHT");
    3c00:	85 e8       	ldi	r24, 0x85	; 133
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
			MOTORS_CAR_voidRight();
    3c08:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <MOTORS_CAR_voidRight>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e5 58       	subi	r30, 0x85	; 133
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	aa e7       	ldi	r26, 0x7A	; 122
    3c18:	b4 e4       	ldi	r27, 0x44	; 68
    3c1a:	80 83       	st	Z, r24
    3c1c:	91 83       	std	Z+1, r25	; 0x01
    3c1e:	a2 83       	std	Z+2, r26	; 0x02
    3c20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c22:	8e 01       	movw	r16, r28
    3c24:	09 58       	subi	r16, 0x89	; 137
    3c26:	1f 4f       	sbci	r17, 0xFF	; 255
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e5 58       	subi	r30, 0x85	; 133
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	4a e7       	ldi	r20, 0x7A	; 122
    3c3c:	55 e4       	ldi	r21, 0x45	; 69
    3c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	f8 01       	movw	r30, r16
    3c48:	80 83       	st	Z, r24
    3c4a:	91 83       	std	Z+1, r25	; 0x01
    3c4c:	a2 83       	std	Z+2, r26	; 0x02
    3c4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c50:	fe 01       	movw	r30, r28
    3c52:	e9 58       	subi	r30, 0x89	; 137
    3c54:	ff 4f       	sbci	r31, 0xFF	; 255
    3c56:	60 81       	ld	r22, Z
    3c58:	71 81       	ldd	r23, Z+1	; 0x01
    3c5a:	82 81       	ldd	r24, Z+2	; 0x02
    3c5c:	93 81       	ldd	r25, Z+3	; 0x03
    3c5e:	20 e0       	ldi	r18, 0x00	; 0
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	40 e8       	ldi	r20, 0x80	; 128
    3c64:	5f e3       	ldi	r21, 0x3F	; 63
    3c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6a:	88 23       	and	r24, r24
    3c6c:	44 f4       	brge	.+16     	; 0x3c7e <main+0x8fc>
		__ticks = 1;
    3c6e:	fe 01       	movw	r30, r28
    3c70:	eb 58       	subi	r30, 0x8B	; 139
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	91 83       	std	Z+1, r25	; 0x01
    3c7a:	80 83       	st	Z, r24
    3c7c:	64 c0       	rjmp	.+200    	; 0x3d46 <main+0x9c4>
	else if (__tmp > 65535)
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e9 58       	subi	r30, 0x89	; 137
    3c82:	ff 4f       	sbci	r31, 0xFF	; 255
    3c84:	60 81       	ld	r22, Z
    3c86:	71 81       	ldd	r23, Z+1	; 0x01
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	93 81       	ldd	r25, Z+3	; 0x03
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	3f ef       	ldi	r19, 0xFF	; 255
    3c90:	4f e7       	ldi	r20, 0x7F	; 127
    3c92:	57 e4       	ldi	r21, 0x47	; 71
    3c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c98:	18 16       	cp	r1, r24
    3c9a:	0c f0       	brlt	.+2      	; 0x3c9e <main+0x91c>
    3c9c:	43 c0       	rjmp	.+134    	; 0x3d24 <main+0x9a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	e5 58       	subi	r30, 0x85	; 133
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	60 81       	ld	r22, Z
    3ca6:	71 81       	ldd	r23, Z+1	; 0x01
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	93 81       	ldd	r25, Z+3	; 0x03
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e2       	ldi	r20, 0x20	; 32
    3cb2:	51 e4       	ldi	r21, 0x41	; 65
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	8e 01       	movw	r16, r28
    3cbe:	0b 58       	subi	r16, 0x8B	; 139
    3cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc2:	bc 01       	movw	r22, r24
    3cc4:	cd 01       	movw	r24, r26
    3cc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	f8 01       	movw	r30, r16
    3cd0:	91 83       	std	Z+1, r25	; 0x01
    3cd2:	80 83       	st	Z, r24
    3cd4:	1f c0       	rjmp	.+62     	; 0x3d14 <main+0x992>
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	ed 58       	subi	r30, 0x8D	; 141
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 e9       	ldi	r24, 0x90	; 144
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	91 83       	std	Z+1, r25	; 0x01
    3ce2:	80 83       	st	Z, r24
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	ed 58       	subi	r30, 0x8D	; 141
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	80 81       	ld	r24, Z
    3cec:	91 81       	ldd	r25, Z+1	; 0x01
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <main+0x96c>
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	ed 58       	subi	r30, 0x8D	; 141
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cfc:	de 01       	movw	r26, r28
    3cfe:	ab 58       	subi	r26, 0x8B	; 139
    3d00:	bf 4f       	sbci	r27, 0xFF	; 255
    3d02:	fe 01       	movw	r30, r28
    3d04:	eb 58       	subi	r30, 0x8B	; 139
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	80 81       	ld	r24, Z
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	01 97       	sbiw	r24, 0x01	; 1
    3d0e:	11 96       	adiw	r26, 0x01	; 1
    3d10:	9c 93       	st	X, r25
    3d12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d14:	fe 01       	movw	r30, r28
    3d16:	eb 58       	subi	r30, 0x8B	; 139
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	d1 f6       	brne	.-76     	; 0x3cd6 <main+0x954>
    3d22:	27 c0       	rjmp	.+78     	; 0x3d72 <main+0x9f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d24:	8e 01       	movw	r16, r28
    3d26:	0b 58       	subi	r16, 0x8B	; 139
    3d28:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e9 58       	subi	r30, 0x89	; 137
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	f8 01       	movw	r30, r16
    3d42:	91 83       	std	Z+1, r25	; 0x01
    3d44:	80 83       	st	Z, r24
    3d46:	de 01       	movw	r26, r28
    3d48:	af 58       	subi	r26, 0x8F	; 143
    3d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	eb 58       	subi	r30, 0x8B	; 139
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	80 81       	ld	r24, Z
    3d54:	91 81       	ldd	r25, Z+1	; 0x01
    3d56:	8d 93       	st	X+, r24
    3d58:	9c 93       	st	X, r25
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ef 58       	subi	r30, 0x8F	; 143
    3d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d60:	80 81       	ld	r24, Z
    3d62:	91 81       	ldd	r25, Z+1	; 0x01
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <main+0x9e2>
    3d68:	fe 01       	movw	r30, r28
    3d6a:	ef 58       	subi	r30, 0x8F	; 143
    3d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	80 83       	st	Z, r24
			_delay_ms(1000);
			MOTORS_CAR_voidStop();
    3d72:	0e 94 22 14 	call	0x2844	; 0x2844 <MOTORS_CAR_voidStop>
			SERVO_MOTOR_voidRotateMiddle();
    3d76:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SERVO_MOTOR_voidRotateMiddle>
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e3 59       	subi	r30, 0x93	; 147
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	aa e7       	ldi	r26, 0x7A	; 122
    3d86:	b4 e4       	ldi	r27, 0x44	; 68
    3d88:	80 83       	st	Z, r24
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	a2 83       	std	Z+2, r26	; 0x02
    3d8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d90:	8e 01       	movw	r16, r28
    3d92:	07 59       	subi	r16, 0x97	; 151
    3d94:	1f 4f       	sbci	r17, 0xFF	; 255
    3d96:	fe 01       	movw	r30, r28
    3d98:	e3 59       	subi	r30, 0x93	; 147
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	60 81       	ld	r22, Z
    3d9e:	71 81       	ldd	r23, Z+1	; 0x01
    3da0:	82 81       	ldd	r24, Z+2	; 0x02
    3da2:	93 81       	ldd	r25, Z+3	; 0x03
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	4a e7       	ldi	r20, 0x7A	; 122
    3daa:	55 e4       	ldi	r21, 0x45	; 69
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	f8 01       	movw	r30, r16
    3db6:	80 83       	st	Z, r24
    3db8:	91 83       	std	Z+1, r25	; 0x01
    3dba:	a2 83       	std	Z+2, r26	; 0x02
    3dbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	e7 59       	subi	r30, 0x97	; 151
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	60 81       	ld	r22, Z
    3dc6:	71 81       	ldd	r23, Z+1	; 0x01
    3dc8:	82 81       	ldd	r24, Z+2	; 0x02
    3dca:	93 81       	ldd	r25, Z+3	; 0x03
    3dcc:	20 e0       	ldi	r18, 0x00	; 0
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	40 e8       	ldi	r20, 0x80	; 128
    3dd2:	5f e3       	ldi	r21, 0x3F	; 63
    3dd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dd8:	88 23       	and	r24, r24
    3dda:	44 f4       	brge	.+16     	; 0x3dec <main+0xa6a>
		__ticks = 1;
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e9 59       	subi	r30, 0x99	; 153
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	91 83       	std	Z+1, r25	; 0x01
    3de8:	80 83       	st	Z, r24
    3dea:	64 c0       	rjmp	.+200    	; 0x3eb4 <main+0xb32>
	else if (__tmp > 65535)
    3dec:	fe 01       	movw	r30, r28
    3dee:	e7 59       	subi	r30, 0x97	; 151
    3df0:	ff 4f       	sbci	r31, 0xFF	; 255
    3df2:	60 81       	ld	r22, Z
    3df4:	71 81       	ldd	r23, Z+1	; 0x01
    3df6:	82 81       	ldd	r24, Z+2	; 0x02
    3df8:	93 81       	ldd	r25, Z+3	; 0x03
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	3f ef       	ldi	r19, 0xFF	; 255
    3dfe:	4f e7       	ldi	r20, 0x7F	; 127
    3e00:	57 e4       	ldi	r21, 0x47	; 71
    3e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e06:	18 16       	cp	r1, r24
    3e08:	0c f0       	brlt	.+2      	; 0x3e0c <main+0xa8a>
    3e0a:	43 c0       	rjmp	.+134    	; 0x3e92 <main+0xb10>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	e3 59       	subi	r30, 0x93	; 147
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	60 81       	ld	r22, Z
    3e14:	71 81       	ldd	r23, Z+1	; 0x01
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	93 81       	ldd	r25, Z+3	; 0x03
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e2       	ldi	r20, 0x20	; 32
    3e20:	51 e4       	ldi	r21, 0x41	; 65
    3e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	8e 01       	movw	r16, r28
    3e2c:	09 59       	subi	r16, 0x99	; 153
    3e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e30:	bc 01       	movw	r22, r24
    3e32:	cd 01       	movw	r24, r26
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	f8 01       	movw	r30, r16
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	80 83       	st	Z, r24
    3e42:	1f c0       	rjmp	.+62     	; 0x3e82 <main+0xb00>
    3e44:	fe 01       	movw	r30, r28
    3e46:	eb 59       	subi	r30, 0x9B	; 155
    3e48:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4a:	80 e9       	ldi	r24, 0x90	; 144
    3e4c:	91 e0       	ldi	r25, 0x01	; 1
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
    3e52:	fe 01       	movw	r30, r28
    3e54:	eb 59       	subi	r30, 0x9B	; 155
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	80 81       	ld	r24, Z
    3e5a:	91 81       	ldd	r25, Z+1	; 0x01
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	f1 f7       	brne	.-4      	; 0x3e5c <main+0xada>
    3e60:	fe 01       	movw	r30, r28
    3e62:	eb 59       	subi	r30, 0x9B	; 155
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	91 83       	std	Z+1, r25	; 0x01
    3e68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6a:	de 01       	movw	r26, r28
    3e6c:	a9 59       	subi	r26, 0x99	; 153
    3e6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e70:	fe 01       	movw	r30, r28
    3e72:	e9 59       	subi	r30, 0x99	; 153
    3e74:	ff 4f       	sbci	r31, 0xFF	; 255
    3e76:	80 81       	ld	r24, Z
    3e78:	91 81       	ldd	r25, Z+1	; 0x01
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	11 96       	adiw	r26, 0x01	; 1
    3e7e:	9c 93       	st	X, r25
    3e80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e82:	fe 01       	movw	r30, r28
    3e84:	e9 59       	subi	r30, 0x99	; 153
    3e86:	ff 4f       	sbci	r31, 0xFF	; 255
    3e88:	80 81       	ld	r24, Z
    3e8a:	91 81       	ldd	r25, Z+1	; 0x01
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	d1 f6       	brne	.-76     	; 0x3e44 <main+0xac2>
    3e90:	28 c0       	rjmp	.+80     	; 0x3ee2 <main+0xb60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e92:	8e 01       	movw	r16, r28
    3e94:	09 59       	subi	r16, 0x99	; 153
    3e96:	1f 4f       	sbci	r17, 0xFF	; 255
    3e98:	fe 01       	movw	r30, r28
    3e9a:	e7 59       	subi	r30, 0x97	; 151
    3e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9e:	60 81       	ld	r22, Z
    3ea0:	71 81       	ldd	r23, Z+1	; 0x01
    3ea2:	82 81       	ldd	r24, Z+2	; 0x02
    3ea4:	93 81       	ldd	r25, Z+3	; 0x03
    3ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eaa:	dc 01       	movw	r26, r24
    3eac:	cb 01       	movw	r24, r22
    3eae:	f8 01       	movw	r30, r16
    3eb0:	91 83       	std	Z+1, r25	; 0x01
    3eb2:	80 83       	st	Z, r24
    3eb4:	de 01       	movw	r26, r28
    3eb6:	ad 59       	subi	r26, 0x9D	; 157
    3eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3eba:	fe 01       	movw	r30, r28
    3ebc:	e9 59       	subi	r30, 0x99	; 153
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	80 81       	ld	r24, Z
    3ec2:	91 81       	ldd	r25, Z+1	; 0x01
    3ec4:	11 96       	adiw	r26, 0x01	; 1
    3ec6:	9c 93       	st	X, r25
    3ec8:	8e 93       	st	-X, r24
    3eca:	fe 01       	movw	r30, r28
    3ecc:	ed 59       	subi	r30, 0x9D	; 157
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	80 81       	ld	r24, Z
    3ed2:	91 81       	ldd	r25, Z+1	; 0x01
    3ed4:	01 97       	sbiw	r24, 0x01	; 1
    3ed6:	f1 f7       	brne	.-4      	; 0x3ed4 <main+0xb52>
    3ed8:	fe 01       	movw	r30, r28
    3eda:	ed 59       	subi	r30, 0x9D	; 157
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
			_delay_ms(1000);
			states=Forward;
    3ee2:	10 92 ba 01 	sts	0x01BA, r1
    3ee6:	2b cb       	rjmp	.-2474   	; 0x353e <main+0x1bc>
			break;
		case Left:
			LCD_voidWriteString("LEFT");
    3ee8:	8b e8       	ldi	r24, 0x8B	; 139
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
			MOTORS_CAR_voidLeft();
    3ef0:	0e 94 07 14 	call	0x280e	; 0x280e <MOTORS_CAR_voidLeft>
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e1 5a       	subi	r30, 0xA1	; 161
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	aa e7       	ldi	r26, 0x7A	; 122
    3f00:	b4 e4       	ldi	r27, 0x44	; 68
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0a:	8e 01       	movw	r16, r28
    3f0c:	05 5a       	subi	r16, 0xA5	; 165
    3f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	e1 5a       	subi	r30, 0xA1	; 161
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4a e7       	ldi	r20, 0x7A	; 122
    3f24:	55 e4       	ldi	r21, 0x45	; 69
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	f8 01       	movw	r30, r16
    3f30:	80 83       	st	Z, r24
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	a2 83       	std	Z+2, r26	; 0x02
    3f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e5 5a       	subi	r30, 0xA5	; 165
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	44 f4       	brge	.+16     	; 0x3f66 <main+0xbe4>
		__ticks = 1;
    3f56:	fe 01       	movw	r30, r28
    3f58:	e7 5a       	subi	r30, 0xA7	; 167
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	64 c0       	rjmp	.+200    	; 0x402e <main+0xcac>
	else if (__tmp > 65535)
    3f66:	fe 01       	movw	r30, r28
    3f68:	e5 5a       	subi	r30, 0xA5	; 165
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	60 81       	ld	r22, Z
    3f6e:	71 81       	ldd	r23, Z+1	; 0x01
    3f70:	82 81       	ldd	r24, Z+2	; 0x02
    3f72:	93 81       	ldd	r25, Z+3	; 0x03
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	3f ef       	ldi	r19, 0xFF	; 255
    3f78:	4f e7       	ldi	r20, 0x7F	; 127
    3f7a:	57 e4       	ldi	r21, 0x47	; 71
    3f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f80:	18 16       	cp	r1, r24
    3f82:	0c f0       	brlt	.+2      	; 0x3f86 <main+0xc04>
    3f84:	43 c0       	rjmp	.+134    	; 0x400c <main+0xc8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f86:	fe 01       	movw	r30, r28
    3f88:	e1 5a       	subi	r30, 0xA1	; 161
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	82 81       	ldd	r24, Z+2	; 0x02
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	40 e2       	ldi	r20, 0x20	; 32
    3f9a:	51 e4       	ldi	r21, 0x41	; 65
    3f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	07 5a       	subi	r16, 0xA7	; 167
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	f8 01       	movw	r30, r16
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24
    3fbc:	1f c0       	rjmp	.+62     	; 0x3ffc <main+0xc7a>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e9 5a       	subi	r30, 0xA9	; 169
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 e9       	ldi	r24, 0x90	; 144
    3fc6:	91 e0       	ldi	r25, 0x01	; 1
    3fc8:	91 83       	std	Z+1, r25	; 0x01
    3fca:	80 83       	st	Z, r24
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e9 5a       	subi	r30, 0xA9	; 169
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <main+0xc54>
    3fda:	fe 01       	movw	r30, r28
    3fdc:	e9 5a       	subi	r30, 0xA9	; 169
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe4:	de 01       	movw	r26, r28
    3fe6:	a7 5a       	subi	r26, 0xA7	; 167
    3fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fea:	fe 01       	movw	r30, r28
    3fec:	e7 5a       	subi	r30, 0xA7	; 167
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	80 81       	ld	r24, Z
    3ff2:	91 81       	ldd	r25, Z+1	; 0x01
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	11 96       	adiw	r26, 0x01	; 1
    3ff8:	9c 93       	st	X, r25
    3ffa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e7 5a       	subi	r30, 0xA7	; 167
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	d1 f6       	brne	.-76     	; 0x3fbe <main+0xc3c>
    400a:	27 c0       	rjmp	.+78     	; 0x405a <main+0xcd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400c:	8e 01       	movw	r16, r28
    400e:	07 5a       	subi	r16, 0xA7	; 167
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	fe 01       	movw	r30, r28
    4014:	e5 5a       	subi	r30, 0xA5	; 165
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	f8 01       	movw	r30, r16
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	de 01       	movw	r26, r28
    4030:	ab 5a       	subi	r26, 0xAB	; 171
    4032:	bf 4f       	sbci	r27, 0xFF	; 255
    4034:	fe 01       	movw	r30, r28
    4036:	e7 5a       	subi	r30, 0xA7	; 167
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	8d 93       	st	X+, r24
    4040:	9c 93       	st	X, r25
    4042:	fe 01       	movw	r30, r28
    4044:	eb 5a       	subi	r30, 0xAB	; 171
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 81       	ld	r24, Z
    404a:	91 81       	ldd	r25, Z+1	; 0x01
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <main+0xcca>
    4050:	fe 01       	movw	r30, r28
    4052:	eb 5a       	subi	r30, 0xAB	; 171
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	91 83       	std	Z+1, r25	; 0x01
    4058:	80 83       	st	Z, r24
			_delay_ms(1000);
			MOTORS_CAR_voidStop();
    405a:	0e 94 22 14 	call	0x2844	; 0x2844 <MOTORS_CAR_voidStop>
			SERVO_MOTOR_voidRotateMiddle();
    405e:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SERVO_MOTOR_voidRotateMiddle>
    4062:	fe 01       	movw	r30, r28
    4064:	ef 5a       	subi	r30, 0xAF	; 175
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	80 e0       	ldi	r24, 0x00	; 0
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	aa e7       	ldi	r26, 0x7A	; 122
    406e:	b4 e4       	ldi	r27, 0x44	; 68
    4070:	80 83       	st	Z, r24
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	a2 83       	std	Z+2, r26	; 0x02
    4076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4078:	8e 01       	movw	r16, r28
    407a:	03 5b       	subi	r16, 0xB3	; 179
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	fe 01       	movw	r30, r28
    4080:	ef 5a       	subi	r30, 0xAF	; 175
    4082:	ff 4f       	sbci	r31, 0xFF	; 255
    4084:	60 81       	ld	r22, Z
    4086:	71 81       	ldd	r23, Z+1	; 0x01
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	93 81       	ldd	r25, Z+3	; 0x03
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	4a e7       	ldi	r20, 0x7A	; 122
    4092:	55 e4       	ldi	r21, 0x45	; 69
    4094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	f8 01       	movw	r30, r16
    409e:	80 83       	st	Z, r24
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	a2 83       	std	Z+2, r26	; 0x02
    40a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40a6:	fe 01       	movw	r30, r28
    40a8:	e3 5b       	subi	r30, 0xB3	; 179
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	60 81       	ld	r22, Z
    40ae:	71 81       	ldd	r23, Z+1	; 0x01
    40b0:	82 81       	ldd	r24, Z+2	; 0x02
    40b2:	93 81       	ldd	r25, Z+3	; 0x03
    40b4:	20 e0       	ldi	r18, 0x00	; 0
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	40 e8       	ldi	r20, 0x80	; 128
    40ba:	5f e3       	ldi	r21, 0x3F	; 63
    40bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40c0:	88 23       	and	r24, r24
    40c2:	44 f4       	brge	.+16     	; 0x40d4 <main+0xd52>
		__ticks = 1;
    40c4:	fe 01       	movw	r30, r28
    40c6:	e5 5b       	subi	r30, 0xB5	; 181
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	80 83       	st	Z, r24
    40d2:	64 c0       	rjmp	.+200    	; 0x419c <main+0xe1a>
	else if (__tmp > 65535)
    40d4:	fe 01       	movw	r30, r28
    40d6:	e3 5b       	subi	r30, 0xB3	; 179
    40d8:	ff 4f       	sbci	r31, 0xFF	; 255
    40da:	60 81       	ld	r22, Z
    40dc:	71 81       	ldd	r23, Z+1	; 0x01
    40de:	82 81       	ldd	r24, Z+2	; 0x02
    40e0:	93 81       	ldd	r25, Z+3	; 0x03
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	3f ef       	ldi	r19, 0xFF	; 255
    40e6:	4f e7       	ldi	r20, 0x7F	; 127
    40e8:	57 e4       	ldi	r21, 0x47	; 71
    40ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ee:	18 16       	cp	r1, r24
    40f0:	0c f0       	brlt	.+2      	; 0x40f4 <main+0xd72>
    40f2:	43 c0       	rjmp	.+134    	; 0x417a <main+0xdf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f4:	fe 01       	movw	r30, r28
    40f6:	ef 5a       	subi	r30, 0xAF	; 175
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	40 e2       	ldi	r20, 0x20	; 32
    4108:	51 e4       	ldi	r21, 0x41	; 65
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	8e 01       	movw	r16, r28
    4114:	05 5b       	subi	r16, 0xB5	; 181
    4116:	1f 4f       	sbci	r17, 0xFF	; 255
    4118:	bc 01       	movw	r22, r24
    411a:	cd 01       	movw	r24, r26
    411c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4120:	dc 01       	movw	r26, r24
    4122:	cb 01       	movw	r24, r22
    4124:	f8 01       	movw	r30, r16
    4126:	91 83       	std	Z+1, r25	; 0x01
    4128:	80 83       	st	Z, r24
    412a:	1f c0       	rjmp	.+62     	; 0x416a <main+0xde8>
    412c:	fe 01       	movw	r30, r28
    412e:	e7 5b       	subi	r30, 0xB7	; 183
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	80 e9       	ldi	r24, 0x90	; 144
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24
    413a:	fe 01       	movw	r30, r28
    413c:	e7 5b       	subi	r30, 0xB7	; 183
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	80 81       	ld	r24, Z
    4142:	91 81       	ldd	r25, Z+1	; 0x01
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	f1 f7       	brne	.-4      	; 0x4144 <main+0xdc2>
    4148:	fe 01       	movw	r30, r28
    414a:	e7 5b       	subi	r30, 0xB7	; 183
    414c:	ff 4f       	sbci	r31, 0xFF	; 255
    414e:	91 83       	std	Z+1, r25	; 0x01
    4150:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4152:	de 01       	movw	r26, r28
    4154:	a5 5b       	subi	r26, 0xB5	; 181
    4156:	bf 4f       	sbci	r27, 0xFF	; 255
    4158:	fe 01       	movw	r30, r28
    415a:	e5 5b       	subi	r30, 0xB5	; 181
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	80 81       	ld	r24, Z
    4160:	91 81       	ldd	r25, Z+1	; 0x01
    4162:	01 97       	sbiw	r24, 0x01	; 1
    4164:	11 96       	adiw	r26, 0x01	; 1
    4166:	9c 93       	st	X, r25
    4168:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    416a:	fe 01       	movw	r30, r28
    416c:	e5 5b       	subi	r30, 0xB5	; 181
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	00 97       	sbiw	r24, 0x00	; 0
    4176:	d1 f6       	brne	.-76     	; 0x412c <main+0xdaa>
    4178:	28 c0       	rjmp	.+80     	; 0x41ca <main+0xe48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    417a:	8e 01       	movw	r16, r28
    417c:	05 5b       	subi	r16, 0xB5	; 181
    417e:	1f 4f       	sbci	r17, 0xFF	; 255
    4180:	fe 01       	movw	r30, r28
    4182:	e3 5b       	subi	r30, 0xB3	; 179
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	f8 01       	movw	r30, r16
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	80 83       	st	Z, r24
    419c:	de 01       	movw	r26, r28
    419e:	a9 5b       	subi	r26, 0xB9	; 185
    41a0:	bf 4f       	sbci	r27, 0xFF	; 255
    41a2:	fe 01       	movw	r30, r28
    41a4:	e5 5b       	subi	r30, 0xB5	; 181
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	80 81       	ld	r24, Z
    41aa:	91 81       	ldd	r25, Z+1	; 0x01
    41ac:	11 96       	adiw	r26, 0x01	; 1
    41ae:	9c 93       	st	X, r25
    41b0:	8e 93       	st	-X, r24
    41b2:	fe 01       	movw	r30, r28
    41b4:	e9 5b       	subi	r30, 0xB9	; 185
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	80 81       	ld	r24, Z
    41ba:	91 81       	ldd	r25, Z+1	; 0x01
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <main+0xe3a>
    41c0:	fe 01       	movw	r30, r28
    41c2:	e9 5b       	subi	r30, 0xB9	; 185
    41c4:	ff 4f       	sbci	r31, 0xFF	; 255
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	80 83       	st	Z, r24
			_delay_ms(1000);
			states=Forward;
    41ca:	10 92 ba 01 	sts	0x01BA, r1
    41ce:	b7 c9       	rjmp	.-3218   	; 0x353e <main+0x1bc>
			break;
		case Back:
			LCD_voidWriteString("BACKWARD");
    41d0:	80 e9       	ldi	r24, 0x90	; 144
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_voidWriteString>
			MOTORS_CAR_voidBackward();
    41d8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <MOTORS_CAR_voidBackward>
    41dc:	fe 01       	movw	r30, r28
    41de:	ed 5b       	subi	r30, 0xBD	; 189
    41e0:	ff 4f       	sbci	r31, 0xFF	; 255
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	aa e7       	ldi	r26, 0x7A	; 122
    41e8:	b4 e4       	ldi	r27, 0x44	; 68
    41ea:	80 83       	st	Z, r24
    41ec:	91 83       	std	Z+1, r25	; 0x01
    41ee:	a2 83       	std	Z+2, r26	; 0x02
    41f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	8e 01       	movw	r16, r28
    41f4:	01 5c       	subi	r16, 0xC1	; 193
    41f6:	1f 4f       	sbci	r17, 0xFF	; 255
    41f8:	fe 01       	movw	r30, r28
    41fa:	ed 5b       	subi	r30, 0xBD	; 189
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	60 81       	ld	r22, Z
    4200:	71 81       	ldd	r23, Z+1	; 0x01
    4202:	82 81       	ldd	r24, Z+2	; 0x02
    4204:	93 81       	ldd	r25, Z+3	; 0x03
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	4a e7       	ldi	r20, 0x7A	; 122
    420c:	55 e4       	ldi	r21, 0x45	; 69
    420e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	f8 01       	movw	r30, r16
    4218:	80 83       	st	Z, r24
    421a:	91 83       	std	Z+1, r25	; 0x01
    421c:	a2 83       	std	Z+2, r26	; 0x02
    421e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4220:	fe 01       	movw	r30, r28
    4222:	ff 96       	adiw	r30, 0x3f	; 63
    4224:	60 81       	ld	r22, Z
    4226:	71 81       	ldd	r23, Z+1	; 0x01
    4228:	82 81       	ldd	r24, Z+2	; 0x02
    422a:	93 81       	ldd	r25, Z+3	; 0x03
    422c:	20 e0       	ldi	r18, 0x00	; 0
    422e:	30 e0       	ldi	r19, 0x00	; 0
    4230:	40 e8       	ldi	r20, 0x80	; 128
    4232:	5f e3       	ldi	r21, 0x3F	; 63
    4234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4238:	88 23       	and	r24, r24
    423a:	2c f4       	brge	.+10     	; 0x4246 <main+0xec4>
		__ticks = 1;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	9e af       	std	Y+62, r25	; 0x3e
    4242:	8d af       	std	Y+61, r24	; 0x3d
    4244:	46 c0       	rjmp	.+140    	; 0x42d2 <main+0xf50>
	else if (__tmp > 65535)
    4246:	fe 01       	movw	r30, r28
    4248:	ff 96       	adiw	r30, 0x3f	; 63
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	3f ef       	ldi	r19, 0xFF	; 255
    4256:	4f e7       	ldi	r20, 0x7F	; 127
    4258:	57 e4       	ldi	r21, 0x47	; 71
    425a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    425e:	18 16       	cp	r1, r24
    4260:	64 f5       	brge	.+88     	; 0x42ba <main+0xf38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4262:	fe 01       	movw	r30, r28
    4264:	ed 5b       	subi	r30, 0xBD	; 189
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	60 81       	ld	r22, Z
    426a:	71 81       	ldd	r23, Z+1	; 0x01
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	40 e2       	ldi	r20, 0x20	; 32
    4276:	51 e4       	ldi	r21, 0x41	; 65
    4278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	bc 01       	movw	r22, r24
    4282:	cd 01       	movw	r24, r26
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9e af       	std	Y+62, r25	; 0x3e
    428e:	8d af       	std	Y+61, r24	; 0x3d
    4290:	0f c0       	rjmp	.+30     	; 0x42b0 <main+0xf2e>
    4292:	80 e9       	ldi	r24, 0x90	; 144
    4294:	91 e0       	ldi	r25, 0x01	; 1
    4296:	9c af       	std	Y+60, r25	; 0x3c
    4298:	8b af       	std	Y+59, r24	; 0x3b
    429a:	8b ad       	ldd	r24, Y+59	; 0x3b
    429c:	9c ad       	ldd	r25, Y+60	; 0x3c
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	f1 f7       	brne	.-4      	; 0x429e <main+0xf1c>
    42a2:	9c af       	std	Y+60, r25	; 0x3c
    42a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    42a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	9e af       	std	Y+62, r25	; 0x3e
    42ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    42b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	69 f7       	brne	.-38     	; 0x4292 <main+0xf10>
    42b8:	16 c0       	rjmp	.+44     	; 0x42e6 <main+0xf64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ba:	fe 01       	movw	r30, r28
    42bc:	ff 96       	adiw	r30, 0x3f	; 63
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	9e af       	std	Y+62, r25	; 0x3e
    42d0:	8d af       	std	Y+61, r24	; 0x3d
    42d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    42d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    42d6:	9a af       	std	Y+58, r25	; 0x3a
    42d8:	89 af       	std	Y+57, r24	; 0x39
    42da:	89 ad       	ldd	r24, Y+57	; 0x39
    42dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <main+0xf5c>
    42e2:	9a af       	std	Y+58, r25	; 0x3a
    42e4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			MOTORS_CAR_voidStop();
    42e6:	0e 94 22 14 	call	0x2844	; 0x2844 <MOTORS_CAR_voidStop>
			SERVO_MOTOR_voidRotateRight();
    42ea:	0e 94 68 13 	call	0x26d0	; 0x26d0 <SERVO_MOTOR_voidRotateRight>
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	aa e7       	ldi	r26, 0x7A	; 122
    42f4:	b4 e4       	ldi	r27, 0x44	; 68
    42f6:	8d ab       	std	Y+53, r24	; 0x35
    42f8:	9e ab       	std	Y+54, r25	; 0x36
    42fa:	af ab       	std	Y+55, r26	; 0x37
    42fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fe:	6d a9       	ldd	r22, Y+53	; 0x35
    4300:	7e a9       	ldd	r23, Y+54	; 0x36
    4302:	8f a9       	ldd	r24, Y+55	; 0x37
    4304:	98 ad       	ldd	r25, Y+56	; 0x38
    4306:	20 e0       	ldi	r18, 0x00	; 0
    4308:	30 e0       	ldi	r19, 0x00	; 0
    430a:	4a e7       	ldi	r20, 0x7A	; 122
    430c:	55 e4       	ldi	r21, 0x45	; 69
    430e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4312:	dc 01       	movw	r26, r24
    4314:	cb 01       	movw	r24, r22
    4316:	89 ab       	std	Y+49, r24	; 0x31
    4318:	9a ab       	std	Y+50, r25	; 0x32
    431a:	ab ab       	std	Y+51, r26	; 0x33
    431c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    431e:	69 a9       	ldd	r22, Y+49	; 0x31
    4320:	7a a9       	ldd	r23, Y+50	; 0x32
    4322:	8b a9       	ldd	r24, Y+51	; 0x33
    4324:	9c a9       	ldd	r25, Y+52	; 0x34
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	40 e8       	ldi	r20, 0x80	; 128
    432c:	5f e3       	ldi	r21, 0x3F	; 63
    432e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4332:	88 23       	and	r24, r24
    4334:	2c f4       	brge	.+10     	; 0x4340 <main+0xfbe>
		__ticks = 1;
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	98 ab       	std	Y+48, r25	; 0x30
    433c:	8f a7       	std	Y+47, r24	; 0x2f
    433e:	3f c0       	rjmp	.+126    	; 0x43be <main+0x103c>
	else if (__tmp > 65535)
    4340:	69 a9       	ldd	r22, Y+49	; 0x31
    4342:	7a a9       	ldd	r23, Y+50	; 0x32
    4344:	8b a9       	ldd	r24, Y+51	; 0x33
    4346:	9c a9       	ldd	r25, Y+52	; 0x34
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	3f ef       	ldi	r19, 0xFF	; 255
    434c:	4f e7       	ldi	r20, 0x7F	; 127
    434e:	57 e4       	ldi	r21, 0x47	; 71
    4350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4354:	18 16       	cp	r1, r24
    4356:	4c f5       	brge	.+82     	; 0x43aa <main+0x1028>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4358:	6d a9       	ldd	r22, Y+53	; 0x35
    435a:	7e a9       	ldd	r23, Y+54	; 0x36
    435c:	8f a9       	ldd	r24, Y+55	; 0x37
    435e:	98 ad       	ldd	r25, Y+56	; 0x38
    4360:	20 e0       	ldi	r18, 0x00	; 0
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	40 e2       	ldi	r20, 0x20	; 32
    4366:	51 e4       	ldi	r21, 0x41	; 65
    4368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4378:	dc 01       	movw	r26, r24
    437a:	cb 01       	movw	r24, r22
    437c:	98 ab       	std	Y+48, r25	; 0x30
    437e:	8f a7       	std	Y+47, r24	; 0x2f
    4380:	0f c0       	rjmp	.+30     	; 0x43a0 <main+0x101e>
    4382:	80 e9       	ldi	r24, 0x90	; 144
    4384:	91 e0       	ldi	r25, 0x01	; 1
    4386:	9e a7       	std	Y+46, r25	; 0x2e
    4388:	8d a7       	std	Y+45, r24	; 0x2d
    438a:	8d a5       	ldd	r24, Y+45	; 0x2d
    438c:	9e a5       	ldd	r25, Y+46	; 0x2e
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <main+0x100c>
    4392:	9e a7       	std	Y+46, r25	; 0x2e
    4394:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4396:	8f a5       	ldd	r24, Y+47	; 0x2f
    4398:	98 a9       	ldd	r25, Y+48	; 0x30
    439a:	01 97       	sbiw	r24, 0x01	; 1
    439c:	98 ab       	std	Y+48, r25	; 0x30
    439e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    43a2:	98 a9       	ldd	r25, Y+48	; 0x30
    43a4:	00 97       	sbiw	r24, 0x00	; 0
    43a6:	69 f7       	brne	.-38     	; 0x4382 <main+0x1000>
    43a8:	14 c0       	rjmp	.+40     	; 0x43d2 <main+0x1050>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43aa:	69 a9       	ldd	r22, Y+49	; 0x31
    43ac:	7a a9       	ldd	r23, Y+50	; 0x32
    43ae:	8b a9       	ldd	r24, Y+51	; 0x33
    43b0:	9c a9       	ldd	r25, Y+52	; 0x34
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	98 ab       	std	Y+48, r25	; 0x30
    43bc:	8f a7       	std	Y+47, r24	; 0x2f
    43be:	8f a5       	ldd	r24, Y+47	; 0x2f
    43c0:	98 a9       	ldd	r25, Y+48	; 0x30
    43c2:	9c a7       	std	Y+44, r25	; 0x2c
    43c4:	8b a7       	std	Y+43, r24	; 0x2b
    43c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    43c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	f1 f7       	brne	.-4      	; 0x43ca <main+0x1048>
    43ce:	9c a7       	std	Y+44, r25	; 0x2c
    43d0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1000);
			Right_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    43d2:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    43d6:	90 93 be 01 	sts	0x01BE, r25
    43da:	80 93 bd 01 	sts	0x01BD, r24
    43de:	80 e0       	ldi	r24, 0x00	; 0
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	aa e7       	ldi	r26, 0x7A	; 122
    43e4:	b4 e4       	ldi	r27, 0x44	; 68
    43e6:	8f a3       	std	Y+39, r24	; 0x27
    43e8:	98 a7       	std	Y+40, r25	; 0x28
    43ea:	a9 a7       	std	Y+41, r26	; 0x29
    43ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ee:	6f a1       	ldd	r22, Y+39	; 0x27
    43f0:	78 a5       	ldd	r23, Y+40	; 0x28
    43f2:	89 a5       	ldd	r24, Y+41	; 0x29
    43f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	4a e7       	ldi	r20, 0x7A	; 122
    43fc:	55 e4       	ldi	r21, 0x45	; 69
    43fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4402:	dc 01       	movw	r26, r24
    4404:	cb 01       	movw	r24, r22
    4406:	8b a3       	std	Y+35, r24	; 0x23
    4408:	9c a3       	std	Y+36, r25	; 0x24
    440a:	ad a3       	std	Y+37, r26	; 0x25
    440c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    440e:	6b a1       	ldd	r22, Y+35	; 0x23
    4410:	7c a1       	ldd	r23, Y+36	; 0x24
    4412:	8d a1       	ldd	r24, Y+37	; 0x25
    4414:	9e a1       	ldd	r25, Y+38	; 0x26
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e8       	ldi	r20, 0x80	; 128
    441c:	5f e3       	ldi	r21, 0x3F	; 63
    441e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4422:	88 23       	and	r24, r24
    4424:	2c f4       	brge	.+10     	; 0x4430 <main+0x10ae>
		__ticks = 1;
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	90 e0       	ldi	r25, 0x00	; 0
    442a:	9a a3       	std	Y+34, r25	; 0x22
    442c:	89 a3       	std	Y+33, r24	; 0x21
    442e:	3f c0       	rjmp	.+126    	; 0x44ae <main+0x112c>
	else if (__tmp > 65535)
    4430:	6b a1       	ldd	r22, Y+35	; 0x23
    4432:	7c a1       	ldd	r23, Y+36	; 0x24
    4434:	8d a1       	ldd	r24, Y+37	; 0x25
    4436:	9e a1       	ldd	r25, Y+38	; 0x26
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	3f ef       	ldi	r19, 0xFF	; 255
    443c:	4f e7       	ldi	r20, 0x7F	; 127
    443e:	57 e4       	ldi	r21, 0x47	; 71
    4440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4444:	18 16       	cp	r1, r24
    4446:	4c f5       	brge	.+82     	; 0x449a <main+0x1118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4448:	6f a1       	ldd	r22, Y+39	; 0x27
    444a:	78 a5       	ldd	r23, Y+40	; 0x28
    444c:	89 a5       	ldd	r24, Y+41	; 0x29
    444e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	30 e0       	ldi	r19, 0x00	; 0
    4454:	40 e2       	ldi	r20, 0x20	; 32
    4456:	51 e4       	ldi	r21, 0x41	; 65
    4458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	bc 01       	movw	r22, r24
    4462:	cd 01       	movw	r24, r26
    4464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	9a a3       	std	Y+34, r25	; 0x22
    446e:	89 a3       	std	Y+33, r24	; 0x21
    4470:	0f c0       	rjmp	.+30     	; 0x4490 <main+0x110e>
    4472:	80 e9       	ldi	r24, 0x90	; 144
    4474:	91 e0       	ldi	r25, 0x01	; 1
    4476:	98 a3       	std	Y+32, r25	; 0x20
    4478:	8f 8f       	std	Y+31, r24	; 0x1f
    447a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    447c:	98 a1       	ldd	r25, Y+32	; 0x20
    447e:	01 97       	sbiw	r24, 0x01	; 1
    4480:	f1 f7       	brne	.-4      	; 0x447e <main+0x10fc>
    4482:	98 a3       	std	Y+32, r25	; 0x20
    4484:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	89 a1       	ldd	r24, Y+33	; 0x21
    4488:	9a a1       	ldd	r25, Y+34	; 0x22
    448a:	01 97       	sbiw	r24, 0x01	; 1
    448c:	9a a3       	std	Y+34, r25	; 0x22
    448e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4490:	89 a1       	ldd	r24, Y+33	; 0x21
    4492:	9a a1       	ldd	r25, Y+34	; 0x22
    4494:	00 97       	sbiw	r24, 0x00	; 0
    4496:	69 f7       	brne	.-38     	; 0x4472 <main+0x10f0>
    4498:	14 c0       	rjmp	.+40     	; 0x44c2 <main+0x1140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    449a:	6b a1       	ldd	r22, Y+35	; 0x23
    449c:	7c a1       	ldd	r23, Y+36	; 0x24
    449e:	8d a1       	ldd	r24, Y+37	; 0x25
    44a0:	9e a1       	ldd	r25, Y+38	; 0x26
    44a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	9a a3       	std	Y+34, r25	; 0x22
    44ac:	89 a3       	std	Y+33, r24	; 0x21
    44ae:	89 a1       	ldd	r24, Y+33	; 0x21
    44b0:	9a a1       	ldd	r25, Y+34	; 0x22
    44b2:	9e 8f       	std	Y+30, r25	; 0x1e
    44b4:	8d 8f       	std	Y+29, r24	; 0x1d
    44b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <main+0x1138>
    44be:	9e 8f       	std	Y+30, r25	; 0x1e
    44c0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			SERVO_MOTOR_voidRotateLeft();
    44c2:	0e 94 5d 13 	call	0x26ba	; 0x26ba <SERVO_MOTOR_voidRotateLeft>
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	aa e7       	ldi	r26, 0x7A	; 122
    44cc:	b4 e4       	ldi	r27, 0x44	; 68
    44ce:	89 8f       	std	Y+25, r24	; 0x19
    44d0:	9a 8f       	std	Y+26, r25	; 0x1a
    44d2:	ab 8f       	std	Y+27, r26	; 0x1b
    44d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d6:	69 8d       	ldd	r22, Y+25	; 0x19
    44d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	4a e7       	ldi	r20, 0x7A	; 122
    44e4:	55 e4       	ldi	r21, 0x45	; 69
    44e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	8d 8b       	std	Y+21, r24	; 0x15
    44f0:	9e 8b       	std	Y+22, r25	; 0x16
    44f2:	af 8b       	std	Y+23, r26	; 0x17
    44f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44f6:	6d 89       	ldd	r22, Y+21	; 0x15
    44f8:	7e 89       	ldd	r23, Y+22	; 0x16
    44fa:	8f 89       	ldd	r24, Y+23	; 0x17
    44fc:	98 8d       	ldd	r25, Y+24	; 0x18
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e8       	ldi	r20, 0x80	; 128
    4504:	5f e3       	ldi	r21, 0x3F	; 63
    4506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    450a:	88 23       	and	r24, r24
    450c:	2c f4       	brge	.+10     	; 0x4518 <main+0x1196>
		__ticks = 1;
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	9c 8b       	std	Y+20, r25	; 0x14
    4514:	8b 8b       	std	Y+19, r24	; 0x13
    4516:	3f c0       	rjmp	.+126    	; 0x4596 <main+0x1214>
	else if (__tmp > 65535)
    4518:	6d 89       	ldd	r22, Y+21	; 0x15
    451a:	7e 89       	ldd	r23, Y+22	; 0x16
    451c:	8f 89       	ldd	r24, Y+23	; 0x17
    451e:	98 8d       	ldd	r25, Y+24	; 0x18
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	3f ef       	ldi	r19, 0xFF	; 255
    4524:	4f e7       	ldi	r20, 0x7F	; 127
    4526:	57 e4       	ldi	r21, 0x47	; 71
    4528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    452c:	18 16       	cp	r1, r24
    452e:	4c f5       	brge	.+82     	; 0x4582 <main+0x1200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4530:	69 8d       	ldd	r22, Y+25	; 0x19
    4532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e2       	ldi	r20, 0x20	; 32
    453e:	51 e4       	ldi	r21, 0x41	; 65
    4540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	bc 01       	movw	r22, r24
    454a:	cd 01       	movw	r24, r26
    454c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	9c 8b       	std	Y+20, r25	; 0x14
    4556:	8b 8b       	std	Y+19, r24	; 0x13
    4558:	0f c0       	rjmp	.+30     	; 0x4578 <main+0x11f6>
    455a:	80 e9       	ldi	r24, 0x90	; 144
    455c:	91 e0       	ldi	r25, 0x01	; 1
    455e:	9a 8b       	std	Y+18, r25	; 0x12
    4560:	89 8b       	std	Y+17, r24	; 0x11
    4562:	89 89       	ldd	r24, Y+17	; 0x11
    4564:	9a 89       	ldd	r25, Y+18	; 0x12
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <main+0x11e4>
    456a:	9a 8b       	std	Y+18, r25	; 0x12
    456c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456e:	8b 89       	ldd	r24, Y+19	; 0x13
    4570:	9c 89       	ldd	r25, Y+20	; 0x14
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	9c 8b       	std	Y+20, r25	; 0x14
    4576:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4578:	8b 89       	ldd	r24, Y+19	; 0x13
    457a:	9c 89       	ldd	r25, Y+20	; 0x14
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	69 f7       	brne	.-38     	; 0x455a <main+0x11d8>
    4580:	14 c0       	rjmp	.+40     	; 0x45aa <main+0x1228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4582:	6d 89       	ldd	r22, Y+21	; 0x15
    4584:	7e 89       	ldd	r23, Y+22	; 0x16
    4586:	8f 89       	ldd	r24, Y+23	; 0x17
    4588:	98 8d       	ldd	r25, Y+24	; 0x18
    458a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458e:	dc 01       	movw	r26, r24
    4590:	cb 01       	movw	r24, r22
    4592:	9c 8b       	std	Y+20, r25	; 0x14
    4594:	8b 8b       	std	Y+19, r24	; 0x13
    4596:	8b 89       	ldd	r24, Y+19	; 0x13
    4598:	9c 89       	ldd	r25, Y+20	; 0x14
    459a:	98 8b       	std	Y+16, r25	; 0x10
    459c:	8f 87       	std	Y+15, r24	; 0x0f
    459e:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a0:	98 89       	ldd	r25, Y+16	; 0x10
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	f1 f7       	brne	.-4      	; 0x45a2 <main+0x1220>
    45a6:	98 8b       	std	Y+16, r25	; 0x10
    45a8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Left_Distance=ULTRASONIC_SENSOR_u16ReadDistance();
    45aa:	0e 94 2b 11 	call	0x2256	; 0x2256 <ULTRASONIC_SENSOR_u16ReadDistance>
    45ae:	90 93 bc 01 	sts	0x01BC, r25
    45b2:	80 93 bb 01 	sts	0x01BB, r24
    45b6:	80 e0       	ldi	r24, 0x00	; 0
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	aa e7       	ldi	r26, 0x7A	; 122
    45bc:	b4 e4       	ldi	r27, 0x44	; 68
    45be:	8b 87       	std	Y+11, r24	; 0x0b
    45c0:	9c 87       	std	Y+12, r25	; 0x0c
    45c2:	ad 87       	std	Y+13, r26	; 0x0d
    45c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    45cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	4a e7       	ldi	r20, 0x7A	; 122
    45d4:	55 e4       	ldi	r21, 0x45	; 69
    45d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	8f 83       	std	Y+7, r24	; 0x07
    45e0:	98 87       	std	Y+8, r25	; 0x08
    45e2:	a9 87       	std	Y+9, r26	; 0x09
    45e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e6:	6f 81       	ldd	r22, Y+7	; 0x07
    45e8:	78 85       	ldd	r23, Y+8	; 0x08
    45ea:	89 85       	ldd	r24, Y+9	; 0x09
    45ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ee:	20 e0       	ldi	r18, 0x00	; 0
    45f0:	30 e0       	ldi	r19, 0x00	; 0
    45f2:	40 e8       	ldi	r20, 0x80	; 128
    45f4:	5f e3       	ldi	r21, 0x3F	; 63
    45f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45fa:	88 23       	and	r24, r24
    45fc:	2c f4       	brge	.+10     	; 0x4608 <main+0x1286>
		__ticks = 1;
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	9e 83       	std	Y+6, r25	; 0x06
    4604:	8d 83       	std	Y+5, r24	; 0x05
    4606:	3f c0       	rjmp	.+126    	; 0x4686 <main+0x1304>
	else if (__tmp > 65535)
    4608:	6f 81       	ldd	r22, Y+7	; 0x07
    460a:	78 85       	ldd	r23, Y+8	; 0x08
    460c:	89 85       	ldd	r24, Y+9	; 0x09
    460e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	3f ef       	ldi	r19, 0xFF	; 255
    4614:	4f e7       	ldi	r20, 0x7F	; 127
    4616:	57 e4       	ldi	r21, 0x47	; 71
    4618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    461c:	18 16       	cp	r1, r24
    461e:	4c f5       	brge	.+82     	; 0x4672 <main+0x12f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4620:	6b 85       	ldd	r22, Y+11	; 0x0b
    4622:	7c 85       	ldd	r23, Y+12	; 0x0c
    4624:	8d 85       	ldd	r24, Y+13	; 0x0d
    4626:	9e 85       	ldd	r25, Y+14	; 0x0e
    4628:	20 e0       	ldi	r18, 0x00	; 0
    462a:	30 e0       	ldi	r19, 0x00	; 0
    462c:	40 e2       	ldi	r20, 0x20	; 32
    462e:	51 e4       	ldi	r21, 0x41	; 65
    4630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	bc 01       	movw	r22, r24
    463a:	cd 01       	movw	r24, r26
    463c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	9e 83       	std	Y+6, r25	; 0x06
    4646:	8d 83       	std	Y+5, r24	; 0x05
    4648:	0f c0       	rjmp	.+30     	; 0x4668 <main+0x12e6>
    464a:	80 e9       	ldi	r24, 0x90	; 144
    464c:	91 e0       	ldi	r25, 0x01	; 1
    464e:	9c 83       	std	Y+4, r25	; 0x04
    4650:	8b 83       	std	Y+3, r24	; 0x03
    4652:	8b 81       	ldd	r24, Y+3	; 0x03
    4654:	9c 81       	ldd	r25, Y+4	; 0x04
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	f1 f7       	brne	.-4      	; 0x4656 <main+0x12d4>
    465a:	9c 83       	std	Y+4, r25	; 0x04
    465c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465e:	8d 81       	ldd	r24, Y+5	; 0x05
    4660:	9e 81       	ldd	r25, Y+6	; 0x06
    4662:	01 97       	sbiw	r24, 0x01	; 1
    4664:	9e 83       	std	Y+6, r25	; 0x06
    4666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4668:	8d 81       	ldd	r24, Y+5	; 0x05
    466a:	9e 81       	ldd	r25, Y+6	; 0x06
    466c:	00 97       	sbiw	r24, 0x00	; 0
    466e:	69 f7       	brne	.-38     	; 0x464a <main+0x12c8>
    4670:	14 c0       	rjmp	.+40     	; 0x469a <main+0x1318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4672:	6f 81       	ldd	r22, Y+7	; 0x07
    4674:	78 85       	ldd	r23, Y+8	; 0x08
    4676:	89 85       	ldd	r24, Y+9	; 0x09
    4678:	9a 85       	ldd	r25, Y+10	; 0x0a
    467a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	9e 83       	std	Y+6, r25	; 0x06
    4684:	8d 83       	std	Y+5, r24	; 0x05
    4686:	8d 81       	ldd	r24, Y+5	; 0x05
    4688:	9e 81       	ldd	r25, Y+6	; 0x06
    468a:	9a 83       	std	Y+2, r25	; 0x02
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	9a 81       	ldd	r25, Y+2	; 0x02
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <main+0x1310>
    4696:	9a 83       	std	Y+2, r25	; 0x02
    4698:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			if(Right_Distance>40||Right_Distance==0){
    469a:	80 91 bd 01 	lds	r24, 0x01BD
    469e:	90 91 be 01 	lds	r25, 0x01BE
    46a2:	89 32       	cpi	r24, 0x29	; 41
    46a4:	91 05       	cpc	r25, r1
    46a6:	30 f4       	brcc	.+12     	; 0x46b4 <main+0x1332>
    46a8:	80 91 bd 01 	lds	r24, 0x01BD
    46ac:	90 91 be 01 	lds	r25, 0x01BE
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	29 f4       	brne	.+10     	; 0x46be <main+0x133c>
				states=Right;
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	80 93 ba 01 	sts	0x01BA, r24
    46ba:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <main+0x1bc>
				}
			else if (Left_Distance>40||Left_Distance==0){
    46be:	80 91 bb 01 	lds	r24, 0x01BB
    46c2:	90 91 bc 01 	lds	r25, 0x01BC
    46c6:	89 32       	cpi	r24, 0x29	; 41
    46c8:	91 05       	cpc	r25, r1
    46ca:	30 f4       	brcc	.+12     	; 0x46d8 <main+0x1356>
    46cc:	80 91 bb 01 	lds	r24, 0x01BB
    46d0:	90 91 bc 01 	lds	r25, 0x01BC
    46d4:	00 97       	sbiw	r24, 0x00	; 0
    46d6:	29 f4       	brne	.+10     	; 0x46e2 <main+0x1360>

				states=Left;
    46d8:	82 e0       	ldi	r24, 0x02	; 2
    46da:	80 93 ba 01 	sts	0x01BA, r24
    46de:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <main+0x1bc>
				}
				else{
				states=Back;
    46e2:	83 e0       	ldi	r24, 0x03	; 3
    46e4:	80 93 ba 01 	sts	0x01BA, r24
    46e8:	0c 94 9f 1a 	jmp	0x353e	; 0x353e <main+0x1bc>

000046ec <__divmodhi4>:
    46ec:	97 fb       	bst	r25, 7
    46ee:	09 2e       	mov	r0, r25
    46f0:	07 26       	eor	r0, r23
    46f2:	0a d0       	rcall	.+20     	; 0x4708 <__divmodhi4_neg1>
    46f4:	77 fd       	sbrc	r23, 7
    46f6:	04 d0       	rcall	.+8      	; 0x4700 <__divmodhi4_neg2>
    46f8:	27 d0       	rcall	.+78     	; 0x4748 <__udivmodhi4>
    46fa:	06 d0       	rcall	.+12     	; 0x4708 <__divmodhi4_neg1>
    46fc:	00 20       	and	r0, r0
    46fe:	1a f4       	brpl	.+6      	; 0x4706 <__divmodhi4_exit>

00004700 <__divmodhi4_neg2>:
    4700:	70 95       	com	r23
    4702:	61 95       	neg	r22
    4704:	7f 4f       	sbci	r23, 0xFF	; 255

00004706 <__divmodhi4_exit>:
    4706:	08 95       	ret

00004708 <__divmodhi4_neg1>:
    4708:	f6 f7       	brtc	.-4      	; 0x4706 <__divmodhi4_exit>
    470a:	90 95       	com	r25
    470c:	81 95       	neg	r24
    470e:	9f 4f       	sbci	r25, 0xFF	; 255
    4710:	08 95       	ret

00004712 <__divmodsi4>:
    4712:	97 fb       	bst	r25, 7
    4714:	09 2e       	mov	r0, r25
    4716:	05 26       	eor	r0, r21
    4718:	0e d0       	rcall	.+28     	; 0x4736 <__divmodsi4_neg1>
    471a:	57 fd       	sbrc	r21, 7
    471c:	04 d0       	rcall	.+8      	; 0x4726 <__divmodsi4_neg2>
    471e:	28 d0       	rcall	.+80     	; 0x4770 <__udivmodsi4>
    4720:	0a d0       	rcall	.+20     	; 0x4736 <__divmodsi4_neg1>
    4722:	00 1c       	adc	r0, r0
    4724:	38 f4       	brcc	.+14     	; 0x4734 <__divmodsi4_exit>

00004726 <__divmodsi4_neg2>:
    4726:	50 95       	com	r21
    4728:	40 95       	com	r20
    472a:	30 95       	com	r19
    472c:	21 95       	neg	r18
    472e:	3f 4f       	sbci	r19, 0xFF	; 255
    4730:	4f 4f       	sbci	r20, 0xFF	; 255
    4732:	5f 4f       	sbci	r21, 0xFF	; 255

00004734 <__divmodsi4_exit>:
    4734:	08 95       	ret

00004736 <__divmodsi4_neg1>:
    4736:	f6 f7       	brtc	.-4      	; 0x4734 <__divmodsi4_exit>
    4738:	90 95       	com	r25
    473a:	80 95       	com	r24
    473c:	70 95       	com	r23
    473e:	61 95       	neg	r22
    4740:	7f 4f       	sbci	r23, 0xFF	; 255
    4742:	8f 4f       	sbci	r24, 0xFF	; 255
    4744:	9f 4f       	sbci	r25, 0xFF	; 255
    4746:	08 95       	ret

00004748 <__udivmodhi4>:
    4748:	aa 1b       	sub	r26, r26
    474a:	bb 1b       	sub	r27, r27
    474c:	51 e1       	ldi	r21, 0x11	; 17
    474e:	07 c0       	rjmp	.+14     	; 0x475e <__udivmodhi4_ep>

00004750 <__udivmodhi4_loop>:
    4750:	aa 1f       	adc	r26, r26
    4752:	bb 1f       	adc	r27, r27
    4754:	a6 17       	cp	r26, r22
    4756:	b7 07       	cpc	r27, r23
    4758:	10 f0       	brcs	.+4      	; 0x475e <__udivmodhi4_ep>
    475a:	a6 1b       	sub	r26, r22
    475c:	b7 0b       	sbc	r27, r23

0000475e <__udivmodhi4_ep>:
    475e:	88 1f       	adc	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	5a 95       	dec	r21
    4764:	a9 f7       	brne	.-22     	; 0x4750 <__udivmodhi4_loop>
    4766:	80 95       	com	r24
    4768:	90 95       	com	r25
    476a:	bc 01       	movw	r22, r24
    476c:	cd 01       	movw	r24, r26
    476e:	08 95       	ret

00004770 <__udivmodsi4>:
    4770:	a1 e2       	ldi	r26, 0x21	; 33
    4772:	1a 2e       	mov	r1, r26
    4774:	aa 1b       	sub	r26, r26
    4776:	bb 1b       	sub	r27, r27
    4778:	fd 01       	movw	r30, r26
    477a:	0d c0       	rjmp	.+26     	; 0x4796 <__udivmodsi4_ep>

0000477c <__udivmodsi4_loop>:
    477c:	aa 1f       	adc	r26, r26
    477e:	bb 1f       	adc	r27, r27
    4780:	ee 1f       	adc	r30, r30
    4782:	ff 1f       	adc	r31, r31
    4784:	a2 17       	cp	r26, r18
    4786:	b3 07       	cpc	r27, r19
    4788:	e4 07       	cpc	r30, r20
    478a:	f5 07       	cpc	r31, r21
    478c:	20 f0       	brcs	.+8      	; 0x4796 <__udivmodsi4_ep>
    478e:	a2 1b       	sub	r26, r18
    4790:	b3 0b       	sbc	r27, r19
    4792:	e4 0b       	sbc	r30, r20
    4794:	f5 0b       	sbc	r31, r21

00004796 <__udivmodsi4_ep>:
    4796:	66 1f       	adc	r22, r22
    4798:	77 1f       	adc	r23, r23
    479a:	88 1f       	adc	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	1a 94       	dec	r1
    47a0:	69 f7       	brne	.-38     	; 0x477c <__udivmodsi4_loop>
    47a2:	60 95       	com	r22
    47a4:	70 95       	com	r23
    47a6:	80 95       	com	r24
    47a8:	90 95       	com	r25
    47aa:	9b 01       	movw	r18, r22
    47ac:	ac 01       	movw	r20, r24
    47ae:	bd 01       	movw	r22, r26
    47b0:	cf 01       	movw	r24, r30
    47b2:	08 95       	ret

000047b4 <__prologue_saves__>:
    47b4:	2f 92       	push	r2
    47b6:	3f 92       	push	r3
    47b8:	4f 92       	push	r4
    47ba:	5f 92       	push	r5
    47bc:	6f 92       	push	r6
    47be:	7f 92       	push	r7
    47c0:	8f 92       	push	r8
    47c2:	9f 92       	push	r9
    47c4:	af 92       	push	r10
    47c6:	bf 92       	push	r11
    47c8:	cf 92       	push	r12
    47ca:	df 92       	push	r13
    47cc:	ef 92       	push	r14
    47ce:	ff 92       	push	r15
    47d0:	0f 93       	push	r16
    47d2:	1f 93       	push	r17
    47d4:	cf 93       	push	r28
    47d6:	df 93       	push	r29
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	ca 1b       	sub	r28, r26
    47de:	db 0b       	sbc	r29, r27
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	09 94       	ijmp

000047ec <__epilogue_restores__>:
    47ec:	2a 88       	ldd	r2, Y+18	; 0x12
    47ee:	39 88       	ldd	r3, Y+17	; 0x11
    47f0:	48 88       	ldd	r4, Y+16	; 0x10
    47f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    47f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    47f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    47f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    47fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    47fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    47fe:	b9 84       	ldd	r11, Y+9	; 0x09
    4800:	c8 84       	ldd	r12, Y+8	; 0x08
    4802:	df 80       	ldd	r13, Y+7	; 0x07
    4804:	ee 80       	ldd	r14, Y+6	; 0x06
    4806:	fd 80       	ldd	r15, Y+5	; 0x05
    4808:	0c 81       	ldd	r16, Y+4	; 0x04
    480a:	1b 81       	ldd	r17, Y+3	; 0x03
    480c:	aa 81       	ldd	r26, Y+2	; 0x02
    480e:	b9 81       	ldd	r27, Y+1	; 0x01
    4810:	ce 0f       	add	r28, r30
    4812:	d1 1d       	adc	r29, r1
    4814:	0f b6       	in	r0, 0x3f	; 63
    4816:	f8 94       	cli
    4818:	de bf       	out	0x3e, r29	; 62
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	cd bf       	out	0x3d, r28	; 61
    481e:	ed 01       	movw	r28, r26
    4820:	08 95       	ret

00004822 <ceil>:
    4822:	3b d0       	rcall	.+118    	; 0x489a <__fp_trunc>
    4824:	80 f0       	brcs	.+32     	; 0x4846 <ceil+0x24>
    4826:	9f 37       	cpi	r25, 0x7F	; 127
    4828:	40 f4       	brcc	.+16     	; 0x483a <ceil+0x18>
    482a:	91 11       	cpse	r25, r1
    482c:	0e f4       	brtc	.+2      	; 0x4830 <ceil+0xe>
    482e:	4d c0       	rjmp	.+154    	; 0x48ca <__fp_szero>
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	80 e8       	ldi	r24, 0x80	; 128
    4836:	9f e3       	ldi	r25, 0x3F	; 63
    4838:	08 95       	ret
    483a:	26 f0       	brts	.+8      	; 0x4844 <ceil+0x22>
    483c:	1b 16       	cp	r1, r27
    483e:	61 1d       	adc	r22, r1
    4840:	71 1d       	adc	r23, r1
    4842:	81 1d       	adc	r24, r1
    4844:	01 c0       	rjmp	.+2      	; 0x4848 <__fp_mintl>
    4846:	1b c0       	rjmp	.+54     	; 0x487e <__fp_mpack>

00004848 <__fp_mintl>:
    4848:	88 23       	and	r24, r24
    484a:	71 f4       	brne	.+28     	; 0x4868 <__fp_mintl+0x20>
    484c:	77 23       	and	r23, r23
    484e:	21 f0       	breq	.+8      	; 0x4858 <__fp_mintl+0x10>
    4850:	98 50       	subi	r25, 0x08	; 8
    4852:	87 2b       	or	r24, r23
    4854:	76 2f       	mov	r23, r22
    4856:	07 c0       	rjmp	.+14     	; 0x4866 <__fp_mintl+0x1e>
    4858:	66 23       	and	r22, r22
    485a:	11 f4       	brne	.+4      	; 0x4860 <__fp_mintl+0x18>
    485c:	99 27       	eor	r25, r25
    485e:	0d c0       	rjmp	.+26     	; 0x487a <__fp_mintl+0x32>
    4860:	90 51       	subi	r25, 0x10	; 16
    4862:	86 2b       	or	r24, r22
    4864:	70 e0       	ldi	r23, 0x00	; 0
    4866:	60 e0       	ldi	r22, 0x00	; 0
    4868:	2a f0       	brmi	.+10     	; 0x4874 <__fp_mintl+0x2c>
    486a:	9a 95       	dec	r25
    486c:	66 0f       	add	r22, r22
    486e:	77 1f       	adc	r23, r23
    4870:	88 1f       	adc	r24, r24
    4872:	da f7       	brpl	.-10     	; 0x486a <__fp_mintl+0x22>
    4874:	88 0f       	add	r24, r24
    4876:	96 95       	lsr	r25
    4878:	87 95       	ror	r24
    487a:	97 f9       	bld	r25, 7
    487c:	08 95       	ret

0000487e <__fp_mpack>:
    487e:	9f 3f       	cpi	r25, 0xFF	; 255
    4880:	31 f0       	breq	.+12     	; 0x488e <__fp_mpack_finite+0xc>

00004882 <__fp_mpack_finite>:
    4882:	91 50       	subi	r25, 0x01	; 1
    4884:	20 f4       	brcc	.+8      	; 0x488e <__fp_mpack_finite+0xc>
    4886:	87 95       	ror	r24
    4888:	77 95       	ror	r23
    488a:	67 95       	ror	r22
    488c:	b7 95       	ror	r27
    488e:	88 0f       	add	r24, r24
    4890:	91 1d       	adc	r25, r1
    4892:	96 95       	lsr	r25
    4894:	87 95       	ror	r24
    4896:	97 f9       	bld	r25, 7
    4898:	08 95       	ret

0000489a <__fp_trunc>:
    489a:	25 d0       	rcall	.+74     	; 0x48e6 <__fp_splitA>
    489c:	a0 f0       	brcs	.+40     	; 0x48c6 <__fp_trunc+0x2c>
    489e:	be e7       	ldi	r27, 0x7E	; 126
    48a0:	b9 17       	cp	r27, r25
    48a2:	88 f4       	brcc	.+34     	; 0x48c6 <__fp_trunc+0x2c>
    48a4:	bb 27       	eor	r27, r27
    48a6:	9f 38       	cpi	r25, 0x8F	; 143
    48a8:	60 f4       	brcc	.+24     	; 0x48c2 <__fp_trunc+0x28>
    48aa:	16 16       	cp	r1, r22
    48ac:	b1 1d       	adc	r27, r1
    48ae:	67 2f       	mov	r22, r23
    48b0:	78 2f       	mov	r23, r24
    48b2:	88 27       	eor	r24, r24
    48b4:	98 5f       	subi	r25, 0xF8	; 248
    48b6:	f7 cf       	rjmp	.-18     	; 0x48a6 <__fp_trunc+0xc>
    48b8:	86 95       	lsr	r24
    48ba:	77 95       	ror	r23
    48bc:	67 95       	ror	r22
    48be:	b1 1d       	adc	r27, r1
    48c0:	93 95       	inc	r25
    48c2:	96 39       	cpi	r25, 0x96	; 150
    48c4:	c8 f3       	brcs	.-14     	; 0x48b8 <__fp_trunc+0x1e>
    48c6:	08 95       	ret

000048c8 <__fp_zero>:
    48c8:	e8 94       	clt

000048ca <__fp_szero>:
    48ca:	bb 27       	eor	r27, r27
    48cc:	66 27       	eor	r22, r22
    48ce:	77 27       	eor	r23, r23
    48d0:	cb 01       	movw	r24, r22
    48d2:	97 f9       	bld	r25, 7
    48d4:	08 95       	ret

000048d6 <__fp_split3>:
    48d6:	57 fd       	sbrc	r21, 7
    48d8:	90 58       	subi	r25, 0x80	; 128
    48da:	44 0f       	add	r20, r20
    48dc:	55 1f       	adc	r21, r21
    48de:	59 f0       	breq	.+22     	; 0x48f6 <__fp_splitA+0x10>
    48e0:	5f 3f       	cpi	r21, 0xFF	; 255
    48e2:	71 f0       	breq	.+28     	; 0x4900 <__fp_splitA+0x1a>
    48e4:	47 95       	ror	r20

000048e6 <__fp_splitA>:
    48e6:	88 0f       	add	r24, r24
    48e8:	97 fb       	bst	r25, 7
    48ea:	99 1f       	adc	r25, r25
    48ec:	61 f0       	breq	.+24     	; 0x4906 <__fp_splitA+0x20>
    48ee:	9f 3f       	cpi	r25, 0xFF	; 255
    48f0:	79 f0       	breq	.+30     	; 0x4910 <__fp_splitA+0x2a>
    48f2:	87 95       	ror	r24
    48f4:	08 95       	ret
    48f6:	12 16       	cp	r1, r18
    48f8:	13 06       	cpc	r1, r19
    48fa:	14 06       	cpc	r1, r20
    48fc:	55 1f       	adc	r21, r21
    48fe:	f2 cf       	rjmp	.-28     	; 0x48e4 <__fp_split3+0xe>
    4900:	46 95       	lsr	r20
    4902:	f1 df       	rcall	.-30     	; 0x48e6 <__fp_splitA>
    4904:	08 c0       	rjmp	.+16     	; 0x4916 <__fp_splitA+0x30>
    4906:	16 16       	cp	r1, r22
    4908:	17 06       	cpc	r1, r23
    490a:	18 06       	cpc	r1, r24
    490c:	99 1f       	adc	r25, r25
    490e:	f1 cf       	rjmp	.-30     	; 0x48f2 <__fp_splitA+0xc>
    4910:	86 95       	lsr	r24
    4912:	71 05       	cpc	r23, r1
    4914:	61 05       	cpc	r22, r1
    4916:	08 94       	sec
    4918:	08 95       	ret

0000491a <_exit>:
    491a:	f8 94       	cli

0000491c <__stop_program>:
    491c:	ff cf       	rjmp	.-2      	; 0x491c <__stop_program>
